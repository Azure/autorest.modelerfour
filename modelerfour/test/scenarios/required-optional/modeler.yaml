!<!CodeModel> 
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: required-optional
schemas: !<!Schemas> 
  numbers:
  - !<!NumberSchema> &ref_1
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_20
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  strings:
  - !<!StringSchema> &ref_13
    type: string
    language: !<!Languages> 
      default:
        name: string
        description: simple string
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_9
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: string
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_0
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: Error-message
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_2
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: string-wrapper-value
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_3
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: string-optional-wrapper-value
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_4
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: product-name
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_8
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: post-content-schemaItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_6
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: array-wrapper-valueItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_7
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: array-optional-wrapper-valueItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_12
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: post-0-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  objects:
  - !<!ObjectSchema> &ref_15
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_1
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_0
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: Error
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_23
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_1
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: int-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_25
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_1
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: int-optional-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_31
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_2
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: string-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_33
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_3
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: string-optional-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_5
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_1
      required: true
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_4
      required: false
      serializedName: name
      language: !<!Languages> 
        default:
          name: name
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: product
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_39
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_5
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: class-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_41
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: *ref_5
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: class-optional-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_47
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_10
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        elementType: *ref_6
        language: !<!Languages> 
          default:
            name: array-wrapper-value
            description: ''
        protocol: !<!Protocols> {}
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: array-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_49
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_11
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        elementType: *ref_7
        language: !<!Languages> 
          default:
            name: array-optional-wrapper-value
            description: ''
        protocol: !<!Protocols> {}
      serializedName: value
      language: !<!Languages> 
        default:
          name: value
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: array-optional-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  arrays:
  - !<!ArraySchema> &ref_43
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: *ref_8
    language: !<!Languages> 
      default:
        name: paths·1cfd2ux·reqopt-requied-array-parameter·post·requestbody·content·application-json·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_45
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: *ref_9
    language: !<!Languages> 
      default:
        name: paths·1h5nnq2·reqopt-optional-array-header·post·parameters·0·schema
        description: ''
    protocol: !<!Protocols> {}
  - *ref_10
  - *ref_11
  - !<!ArraySchema> &ref_51
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: *ref_12
    language: !<!Languages> 
      default:
        name: paths·9esllz·reqopt-requied-array-header·post·parameters·0·schema
        description: ''
    protocol: !<!Protocols> {}
globalParameters:
- !<!Parameter> &ref_54
  schema: *ref_9
  implementation: Client
  required: true
  extensions:
    x-ms-priority: 0
  language: !<!Languages> 
    default:
      name: required-global-path
      description: number of items to skip
      serializedName: required-global-path
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: path
- !<!Parameter> &ref_55
  schema: *ref_9
  implementation: Client
  required: true
  extensions:
    x-ms-priority: 1
  language: !<!Languages> 
    default:
      name: required-global-query
      description: number of items to skip
      serializedName: required-global-query
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
- !<!Parameter> &ref_56
  schema: *ref_20
  implementation: Client
  extensions:
    x-ms-priority: 2
  language: !<!Languages> 
    default:
      name: optional-global-query
      description: number of items to skip
      serializedName: optional-global-query
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
- !<!Parameter> &ref_16
  schema: *ref_13
  clientDefaultValue: 'http://localhost:3000'
  implementation: Client
  origin: 'modelerfour:synthesized/host'
  required: true
  extensions:
    x-ms-skip-url-encoding: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
      serializedName: $host
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
operationGroups:
- !<!OperationGroup> 
  $key: implicit
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_14
      schema: *ref_9
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: pathParameter
          description: ''
          serializedName: pathParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/reqopt/implicit/required/path/{pathParameter}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_14
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getRequiredPath
        description: Test implicitly required path parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_17
      schema: *ref_9
      implementation: Method
      language: !<!Languages> 
        default:
          name: queryParameter
          description: ''
          serializedName: queryParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/implicit/optional/query
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_17
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putOptionalQuery
        description: Test implicitly optional query parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_18
      schema: *ref_9
      implementation: Method
      language: !<!Languages> 
        default:
          name: queryParameter
          description: ''
          serializedName: queryParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/implicit/optional/header
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_18
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putOptionalHeader
        description: Test implicitly optional header parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_19
        schema: *ref_9
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_19
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/implicit/optional/body
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putOptionalBody
        description: Test implicitly optional body parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - *ref_54
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/reqopt/global/required/path/{required-global-path}'
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getRequiredGlobalPath
        description: Test implicitly required path parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - *ref_55
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/global/required/query
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getRequiredGlobalQuery
        description: Test implicitly required query parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - *ref_56
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/global/optional/query
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getOptionalGlobalQuery
        description: Test implicitly optional query parameter
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: implicit
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: explicit
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_21
        schema: *ref_20
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_21
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/integer/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredIntegerParameter
        description: Test explicitly required integer. Please put null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_22
        schema: *ref_20
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_22
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/integer/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalIntegerParameter
        description: Test explicitly optional integer. Please put null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_24
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_24
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/integer/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredIntegerProperty
        description: Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_26
        schema: *ref_25
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_26
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/integer/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalIntegerProperty
        description: Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_27
      schema: *ref_20
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: headerParameter
          description: ''
          serializedName: headerParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/requied/integer/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_27
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredIntegerHeader
        description: Test explicitly required integer. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_28
      schema: *ref_20
      implementation: Method
      language: !<!Languages> 
        default:
          name: headerParameter
          description: ''
          serializedName: headerParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/optional/integer/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_28
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalIntegerHeader
        description: Test explicitly optional integer. Please put a header 'headerParameter' => null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_29
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_29
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/string/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredStringParameter
        description: Test explicitly required string. Please put null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_30
        schema: *ref_9
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_30
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/string/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalStringParameter
        description: Test explicitly optional string. Please put null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_32
        schema: *ref_31
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_32
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/string/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredStringProperty
        description: Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_34
        schema: *ref_33
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_34
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/string/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalStringProperty
        description: Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_35
      schema: *ref_9
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: headerParameter
          description: ''
          serializedName: headerParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/requied/string/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_35
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredStringHeader
        description: Test explicitly required string. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_36
      schema: *ref_9
      implementation: Method
      language: !<!Languages> 
        default:
          name: bodyParameter
          description: ''
          serializedName: bodyParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/optional/string/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_36
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalStringHeader
        description: Test explicitly optional string. Please put a header 'headerParameter' => null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_37
        schema: *ref_5
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_37
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/class/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredClassParameter
        description: Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_38
        schema: *ref_5
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_38
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/class/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalClassParameter
        description: Test explicitly optional complex object. Please put null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_40
        schema: *ref_39
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_40
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/class/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredClassProperty
        description: Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_42
        schema: *ref_41
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_42
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/class/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalClassProperty
        description: Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_44
        schema: *ref_43
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_44
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/array/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredArrayParameter
        description: Test explicitly required array. Please put null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_46
        schema: *ref_45
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_46
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/array/parameter
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalArrayParameter
        description: Test explicitly optional array. Please put null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_48
        schema: *ref_47
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_48
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/requied/array/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredArrayProperty
        description: Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_50
        schema: *ref_49
        implementation: Method
        required: false
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_50
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /reqopt/optional/array/property
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalArrayProperty
        description: Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_52
      schema: *ref_51
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: headerParameter
          description: ''
          serializedName: headerParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
          style: simple
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/requied/array/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_52
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postRequiredArrayHeader
        description: Test explicitly required array. Please put a header 'headerParameter' => null and the client library should throw before the request is sent.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    parameters:
    - *ref_16
    - !<!Parameter> &ref_53
      schema: *ref_45
      implementation: Method
      language: !<!Languages> 
        default:
          name: headerParameter
          description: ''
          serializedName: headerParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
          style: simple
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /reqopt/optional/array/header
          method: post
          uri: '{$host}'
    signatureParameters:
    - *ref_53
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: postOptionalArrayHeader
        description: Test explicitly optional integer. Please put a header 'headerParameter' => null.
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: explicit
      description: ''
  protocol: !<!Protocols> {}
security: !<!Security> 
  authenticationRequired: false
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
