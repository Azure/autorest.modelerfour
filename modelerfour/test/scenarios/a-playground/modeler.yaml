!<!CodeModel> 
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: body-complex
schemas: !<!Schemas> 
  booleans:
  - !<!BooleanSchema> &ref_7
    type: boolean
    language: !<!Languages> 
      default:
        name: boolean
        description: ''
    protocol: !<!Protocols> {}
  numbers:
  - !<!NumberSchema> &ref_48
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: Basic Id
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_3
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_4
    type: integer
    precision: 64
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_5
    type: number
    precision: 32
    language: !<!Languages> 
      default:
        name: number
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_6
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: number
        description: ''
    protocol: !<!Protocols> {}
  strings:
  - !<!StringSchema> &ref_1
    type: string
    language: !<!Languages> 
      default:
        name: string
        description: simple string
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_0
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: basic-name
        description: Name property with a very long description that does not fit on a single line and a line break.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_2
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: Error-message
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_72
    type: string
    language: !<!Languages> 
      default:
        name: ''
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_8
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: string-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_9
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: string-wrapper-empty
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_10
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: string-wrapper-null
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_11
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: array-wrapper-arrayItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_12
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: string
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_13
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: pet-name
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_16
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: cat-color
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_14
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: dog-food
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_18
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: siamese-breed
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_21
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: Fish-fishtype
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_22
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: Fish-species
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_34
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: DotFish-fish.type
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_35
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: DotFish-species
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_37
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: DotSalmon-location
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_25
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: salmon-location
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_40
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: readonly-obj-id
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_41
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: MyBaseType-propB1
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_42
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: MyBaseHelperType-propBH1
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_26
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: smart_salmon-college_degree
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_44
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: MyDerivedType-propD1
        description: ''
    protocol: !<!Protocols> {}
  choices:
  - !<!ChoiceSchema> &ref_49
    choices:
    - !<!ChoiceValue> 
      value: cyan
      language:
        default:
          name: cyan
          description: ''
    - !<!ChoiceValue> 
      value: Magenta
      language:
        default:
          name: Magenta
          description: ''
    - !<!ChoiceValue> 
      value: YELLOW
      language:
        default:
          name: YELLOW
          description: ''
    - !<!ChoiceValue> 
      value: blacK
      language:
        default:
          name: blacK
          description: ''
    type: choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    choiceType: *ref_1
    language: !<!Languages> 
      default:
        name: CMYKColors
        description: ''
    protocol: !<!Protocols> {}
  - !<!ChoiceSchema> &ref_50
    choices:
    - !<!ChoiceValue> 
      value: Kind1
      language:
        default:
          name: Kind1
          description: ''
    type: choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    choiceType: *ref_1
    language: !<!Languages> 
      default:
        name: MyKind
        description: ''
    protocol: !<!Protocols> {}
  - !<!ChoiceSchema> &ref_51
    choices:
    - !<!ChoiceValue> 
      value: pink
      language:
        default:
          name: pink
          description: ''
    - !<!ChoiceValue> 
      value: gray
      language:
        default:
          name: gray
          description: ''
    - !<!ChoiceValue> 
      value: brown
      language:
        default:
          name: brown
          description: ''
    type: choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    choiceType: *ref_1
    defaultValue: gray
    language: !<!Languages> 
      default:
        name: GoblinSharkColor
        description: Colors possible
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_71
    type: constant
    value: !<!ConstantValue> 
      value: '2016-02-29'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion-2016-02-29
        description: Api Version (2016-02-29)
    protocol: !<!Protocols> {}
  dictionaries:
  - !<!DictionarySchema> &ref_67
    type: dictionary
    elementType: *ref_12
    language: !<!Languages> 
      default:
        name: dictionary-wrapper-defaultProgram
        description: Dictionary of <string>
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_28
    type: dictionary
    elementType: !<!AnySchema> 
      type: any
      language: !<!Languages> 
        default:
          name: any
          description: Any object
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: smart_salmon
        description: Dictionary of <any>
    protocol: !<!Protocols> {}
  byteArrays:
  - !<!ByteArraySchema> &ref_60
    type: byte-array
    format: byte
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: byte-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  - !<!ByteArraySchema> &ref_61
    type: byte-array
    format: byte
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: sawshark-picture
        description: ''
    protocol: !<!Protocols> {}
  dateTimes:
  - !<!DateTimeSchema> &ref_54
    type: date-time
    format: date-time
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: datetime-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  - !<!DateTimeSchema> &ref_55
    type: date-time
    format: date-time
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: datetime-wrapper-now
        description: ''
    protocol: !<!Protocols> {}
  - !<!DateTimeSchema> &ref_56
    type: date-time
    format: date-time-rfc1123
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: datetimerfc1123-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  - !<!DateTimeSchema> &ref_57
    type: date-time
    format: date-time-rfc1123
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: datetimerfc1123-wrapper-now
        description: ''
    protocol: !<!Protocols> {}
  - !<!DateTimeSchema> &ref_58
    type: date-time
    format: date-time
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: shark-birthday
        description: ''
    protocol: !<!Protocols> {}
  dates:
  - !<!DateSchema> &ref_52
    type: date
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: date-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  - !<!DateSchema> &ref_53
    type: date
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: date-wrapper-leap
        description: ''
    protocol: !<!Protocols> {}
  durations:
  - !<!DurationSchema> &ref_59
    type: duration
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: duration-wrapper-field
        description: ''
    protocol: !<!Protocols> {}
  objects:
  - !<!ObjectSchema> &ref_68
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_48
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: Basic Id
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_0
      serializedName: name
      language: !<!Languages> 
        default:
          name: name
          description: Name property with a very long description that does not fit on a single line and a line break.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_49
      serializedName: color
      language: !<!Languages> 
        default:
          name: color
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: basic
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_69
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_3
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_2
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: Error
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_75
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_3
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_3
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: int-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_77
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_4
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_4
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: long-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_79
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_5
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_5
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: float-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_81
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_6
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_6
      serializedName: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
      language: !<!Languages> 
        default:
          name: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: double-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_83
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_7
      serializedName: field_true
      language: !<!Languages> 
        default:
          name: field_true
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_7
      serializedName: field_false
      language: !<!Languages> 
        default:
          name: field_false
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: boolean-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_85
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_8
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_9
      serializedName: empty
      language: !<!Languages> 
        default:
          name: empty
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_10
      serializedName: 'null'
      language: !<!Languages> 
        default:
          name: 'null'
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: string-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_87
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_52
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_53
      serializedName: leap
      language: !<!Languages> 
        default:
          name: leap
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: date-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_89
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_54
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_55
      serializedName: now
      language: !<!Languages> 
        default:
          name: now
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: datetime-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_91
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_56
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_57
      serializedName: now
      language: !<!Languages> 
        default:
          name: now
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: datetimerfc1123-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_93
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_59
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: duration-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_95
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_60
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: byte-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_97
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_62
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_11
        language: !<!Languages> 
          default:
            name: array-wrapper-array
            description: ''
        protocol: !<!Protocols> {}
      serializedName: array
      language: !<!Languages> 
        default:
          name: array
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: array-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_100
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_67
      serializedName: defaultProgram
      language: !<!Languages> 
        default:
          name: defaultProgram
          description: Dictionary of <string>
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: dictionary-wrapper
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_15
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_17
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        parents: !<!Relations> 
          all:
          - *ref_15
          immediate:
          - *ref_15
        properties:
        - !<!Property> 
          schema: *ref_14
          serializedName: food
          language: !<!Languages> 
            default:
              name: food
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        - input
        language: !<!Languages> 
          default:
            name: dog
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      - !<!ObjectSchema> &ref_19
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_20
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            parents: !<!Relations> 
              all:
              - *ref_19
              - *ref_15
              immediate:
              - *ref_19
            properties:
            - !<!Property> 
              schema: *ref_18
              serializedName: breed
              language: !<!Languages> 
                default:
                  name: breed
                  description: ''
              protocol: !<!Protocols> {}
            serializationFormats:
            - json
            usage:
            - output
            - input
            language: !<!Languages> 
              default:
                name: siamese
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          immediate:
          - *ref_20
        parents: !<!Relations> 
          all:
          - *ref_15
          immediate:
          - *ref_15
        properties:
        - !<!Property> 
          schema: *ref_16
          serializedName: color
          language: !<!Languages> 
            default:
              name: color
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_63
            type: array
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            elementType: *ref_17
            language: !<!Languages> 
              default:
                name: cat-hates
                description: ''
            protocol: !<!Protocols> {}
          serializedName: hates
          language: !<!Languages> 
            default:
              name: hates
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        - input
        language: !<!Languages> 
          default:
            name: cat
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      - *ref_20
      immediate:
      - *ref_17
      - *ref_19
    properties:
    - !<!Property> 
      schema: *ref_3
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_13
      serializedName: name
      language: !<!Languages> 
        default:
          name: name
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: pet
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_19
  - *ref_17
  - *ref_20
  - !<!ObjectSchema> &ref_23
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_27
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_29
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: smart_salmon
            parents: !<!Relations> 
              all:
              - *ref_27
              - *ref_28
              - *ref_23
              - *ref_28
              immediate:
              - *ref_27
              - *ref_28
            properties:
            - !<!Property> 
              schema: *ref_26
              serializedName: college_degree
              language: !<!Languages> 
                default:
                  name: college_degree
                  description: ''
              protocol: !<!Protocols> {}
            serializationFormats:
            - json
            usage:
            - output
            - input
            language: !<!Languages> 
              default:
                name: smart_salmon
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          immediate:
          - *ref_29
        discriminator: !<!Discriminator> 
          all:
            smart_salmon: *ref_29
          immediate:
            smart_salmon: *ref_29
          property: !<!Property> &ref_24
            schema: *ref_21
            isDiscriminator: true
            required: true
            serializedName: fishtype
            language: !<!Languages> 
              default:
                name: fishtype
                description: ''
            protocol: !<!Protocols> {}
        discriminatorValue: salmon
        parents: !<!Relations> 
          all:
          - *ref_23
          immediate:
          - *ref_23
        properties:
        - !<!Property> 
          schema: *ref_25
          serializedName: location
          language: !<!Languages> 
            default:
              name: location
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_7
          serializedName: iswild
          language: !<!Languages> 
            default:
              name: iswild
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        - input
        language: !<!Languages> 
          default:
            name: salmon
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      - *ref_29
      - !<!ObjectSchema> &ref_30
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_31
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: sawshark
            parents: !<!Relations> 
              all:
              - *ref_30
              - *ref_23
              immediate:
              - *ref_30
            properties:
            - !<!Property> 
              schema: *ref_61
              serializedName: picture
              language: !<!Languages> 
                default:
                  name: picture
                  description: ''
              protocol: !<!Protocols> {}
            serializationFormats:
            - json
            usage:
            - output
            - input
            language: !<!Languages> 
              default:
                name: sawshark
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          - !<!ObjectSchema> &ref_32
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: goblin
            parents: !<!Relations> 
              all:
              - *ref_30
              - *ref_23
              immediate:
              - *ref_30
            properties:
            - !<!Property> 
              schema: *ref_3
              serializedName: jawsize
              language: !<!Languages> 
                default:
                  name: jawsize
                  description: ''
              protocol: !<!Protocols> {}
            - !<!Property> 
              schema: *ref_51
              serializedName: color
              language: !<!Languages> 
                default:
                  name: color
                  description: Colors possible
              protocol: !<!Protocols> {}
            serializationFormats:
            - json
            usage:
            - output
            - input
            extensions:
              x-ms-discriminator-value: goblin
            language: !<!Languages> 
              default:
                name: goblinshark
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          - !<!ObjectSchema> &ref_33
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: cookiecuttershark
            parents: !<!Relations> 
              all:
              - *ref_30
              - *ref_23
              immediate:
              - *ref_30
            serializationFormats:
            - json
            usage:
            - output
            - input
            language: !<!Languages> 
              default:
                name: cookiecuttershark
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          immediate:
          - *ref_31
          - *ref_32
          - *ref_33
        discriminator: !<!Discriminator> 
          all:
            cookiecuttershark: *ref_33
            goblin: *ref_32
            sawshark: *ref_31
          immediate:
            cookiecuttershark: *ref_33
            goblin: *ref_32
            sawshark: *ref_31
          property: *ref_24
        discriminatorValue: shark
        parents: !<!Relations> 
          all:
          - *ref_23
          immediate:
          - *ref_23
        properties:
        - !<!Property> 
          schema: *ref_3
          required: false
          serializedName: age
          language: !<!Languages> 
            default:
              name: age
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_58
          required: true
          serializedName: birthday
          language: !<!Languages> 
            default:
              name: birthday
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        - input
        language: !<!Languages> 
          default:
            name: shark
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      - *ref_31
      - *ref_32
      - *ref_33
      immediate:
      - *ref_27
      - *ref_30
    discriminator: !<!Discriminator> 
      all:
        cookiecuttershark: *ref_33
        goblin: *ref_32
        salmon: *ref_27
        sawshark: *ref_31
        shark: *ref_30
        smart_salmon: *ref_29
      immediate:
        salmon: *ref_27
        shark: *ref_30
      property: *ref_24
    properties:
    - *ref_24
    - !<!Property> 
      schema: *ref_22
      required: false
      serializedName: species
      language: !<!Languages> 
        default:
          name: species
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_5
      required: true
      serializedName: length
      language: !<!Languages> 
        default:
          name: length
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_64
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_23
        language: !<!Languages> 
          default:
            name: Fish-siblings
            description: ''
        protocol: !<!Protocols> {}
      required: false
      serializedName: siblings
      language: !<!Languages> 
        default:
          name: siblings
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: Fish
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_38
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_39
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        discriminatorValue: DotSalmon
        parents: !<!Relations> 
          all:
          - *ref_38
          immediate:
          - *ref_38
        properties:
        - !<!Property> 
          schema: *ref_37
          serializedName: location
          language: !<!Languages> 
            default:
              name: location
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_7
          serializedName: iswild
          language: !<!Languages> 
            default:
              name: iswild
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        language: !<!Languages> 
          default:
            name: DotSalmon
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      immediate:
      - *ref_39
    discriminator: !<!Discriminator> 
      all:
        DotSalmon: *ref_39
      immediate:
        DotSalmon: *ref_39
      property: !<!Property> &ref_36
        schema: *ref_34
        isDiscriminator: true
        required: true
        serializedName: fish.type
        language: !<!Languages> 
          default:
            name: fish.type
            description: ''
        protocol: !<!Protocols> {}
    properties:
    - *ref_36
    - !<!Property> 
      schema: *ref_35
      required: false
      serializedName: species
      language: !<!Languages> 
        default:
          name: species
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: DotFish
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_105
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_39
      serializedName: sampleSalmon
      language: !<!Languages> 
        default:
          name: sampleSalmon
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_65
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_39
        language: !<!Languages> 
          default:
            name: DotFishMarket-salmons
            description: ''
        protocol: !<!Protocols> {}
      serializedName: salmons
      language: !<!Languages> 
        default:
          name: salmons
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_38
      serializedName: sampleFish
      language: !<!Languages> 
        default:
          name: sampleFish
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_66
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_38
        language: !<!Languages> 
          default:
            name: DotFishMarket-fishes
            description: ''
        protocol: !<!Protocols> {}
      serializedName: fishes
      language: !<!Languages> 
        default:
          name: fishes
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: DotFishMarket
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_39
  - *ref_27
  - !<!ObjectSchema> &ref_110
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      schema: *ref_40
      readOnly: true
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_3
      serializedName: size
      language: !<!Languages> 
        default:
          name: size
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    - input
    language: !<!Languages> 
      default:
        name: readonly-obj
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_45
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_46
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        discriminatorValue: Kind1
        parents: !<!Relations> 
          all:
          - *ref_45
          immediate:
          - *ref_45
        properties:
        - !<!Property> 
          schema: *ref_44
          serializedName: propD1
          language: !<!Languages> 
            default:
              name: propD1
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        extensions:
          x-ms-discriminator-value: Kind1
        language: !<!Languages> 
          default:
            name: MyDerivedType
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      immediate:
      - *ref_46
    discriminator: !<!Discriminator> 
      all:
        Kind1: *ref_46
      immediate:
        Kind1: *ref_46
      property: !<!Property> &ref_43
        schema: *ref_50
        isDiscriminator: true
        required: true
        serializedName: kind
        language: !<!Languages> 
          default:
            name: kind
            description: ''
        protocol: !<!Protocols> {}
    properties:
    - *ref_43
    - !<!Property> 
      schema: *ref_41
      required: false
      serializedName: propB1
      language: !<!Languages> 
        default:
          name: propB1
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ObjectSchema> &ref_47
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        properties:
        - !<!Property> 
          schema: *ref_42
          serializedName: propBH1
          language: !<!Languages> 
            default:
              name: propBH1
              description: ''
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        language: !<!Languages> 
          default:
            name: MyBaseHelperType
            description: ''
            namespace: ''
        protocol: !<!Protocols> {}
      required: false
      serializedName: helper
      extensions:
        x-ms-client-flatten: true
      language: !<!Languages> 
        default:
          name: helper
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: MyBaseType
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_47
  - *ref_29
  - *ref_30
  - *ref_31
  - *ref_32
  - *ref_33
  - *ref_46
  arrays:
  - *ref_62
  - *ref_63
  - *ref_64
  - *ref_65
  - *ref_66
globalParameters:
- !<!Parameter> &ref_70
  schema: *ref_1
  clientDefaultValue: 'http://localhost:3000'
  implementation: Client
  required: true
  extensions:
    x-ms-skip-url-encoding: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
      serializedName: $host
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_112
  schema: *ref_71
  implementation: Client
  required: true
  language: !<!Languages> 
    default:
      name: ApiVersion
      description: Api Version
      serializedName: api-version
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
operationGroups:
- !<!OperationGroup> 
  $key: basic
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_68
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    - *ref_112
    - !<!Parameter> &ref_73
      schema: *ref_72
      clientDefaultValue: garrett
      implementation: Method
      required: true
      extensions:
        x-ms-client-default: garrett
      language: !<!Languages> 
        default:
          name: pcldef
          description: boop.
          serializedName: pcldef
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_74
        schema: *ref_68
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_74
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/basic/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters:
    - *ref_73
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/invalid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_68
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: danceDanceRevolution
        description: Get a basic complex type that is invalid for the local strong type
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/empty
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_68
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get a basic complex type that is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/null
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_68
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNull
        description: Get a basic complex type whose properties are null
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/notprovided
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_68
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get a basic complex type while the server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: basic
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: primitive
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/integer
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_75
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getInt
        description: Get complex types with integer properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_76
        schema: *ref_75
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put -1 and 2
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_76
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/integer
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putInt
        description: Put complex types with integer properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/long
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_77
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getLong
        description: Get complex types with long properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_78
        schema: *ref_77
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 1099511627775 and -999511627788
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_78
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/long
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putLong
        description: Put complex types with long properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/float
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getFloat
        description: Get complex types with float properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_80
        schema: *ref_79
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 1.05 and -0.003
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_80
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/float
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putFloat
        description: Put complex types with float properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/double
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_81
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDouble
        description: Get complex types with double properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_82
        schema: *ref_81
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_82
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/double
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putDouble
        description: Put complex types with double properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/bool
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_83
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getBool
        description: Get complex types with bool properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_84
        schema: *ref_83
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put true and false
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_84
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/bool
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putBool
        description: Put complex types with bool properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/string
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getString
        description: Get complex types with string properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_86
        schema: *ref_85
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''goodrequest'', '''', and null'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/string
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putString
        description: Put complex types with string properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/date
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_87
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDate
        description: Get complex types with date properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_88
        schema: *ref_87
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put '0001-01-01' and '2016-02-29'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_88
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/date
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putDate
        description: Put complex types with date properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/datetime
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_89
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDateTime
        description: Get complex types with datetime properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_90
        schema: *ref_89
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''0001-01-01T12:00:00-04:00'' and ''2015-05-18T11:38:00-08:00'''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_90
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/datetime
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putDateTime
        description: Put complex types with datetime properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/datetimerfc1123
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_91
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDateTimeRfc1123
        description: Get complex types with datetimeRfc1123 properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_92
        schema: *ref_91
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''Mon, 01 Jan 0001 12:00:00 GMT'' and ''Mon, 18 May 2015 11:38:00 GMT'''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_92
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/datetimerfc1123
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putDateTimeRfc1123
        description: Put complex types with datetimeRfc1123 properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/duration
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_93
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDuration
        description: Get complex types with duration properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_94
        schema: *ref_93
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 'P123DT22H14M12.011S'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_94
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/duration
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putDuration
        description: Put complex types with duration properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/byte
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_95
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getByte
        description: Get complex types with byte properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_96
        schema: *ref_95
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_96
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/byte
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putByte
        description: Put complex types with byte properties
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: primitive
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: array
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_97
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types with array property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_98
        schema: *ref_97
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_98
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/array/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types with array property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/empty
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_97
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get complex types with array property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_99
        schema: *ref_97
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_99
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/array/empty
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putEmpty
        description: Put complex types with array property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/notprovided
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_97
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get complex types with array property while server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: array
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: dictionary
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types with dictionary property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_101
        schema: *ref_100
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_101
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/dictionary/typed/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types with dictionary property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/empty
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get complex types with dictionary property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_102
        schema: *ref_100
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_102
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/dictionary/typed/empty
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putEmpty
        description: Put complex types with dictionary property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/null
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNull
        description: Get complex types with dictionary property which is null
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/notprovided
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get complex types with dictionary property while server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: dictionary
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: inheritance
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/inheritance/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_20
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that extend others
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_103
        schema: *ref_20
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_103
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/inheritance/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that extend others
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: inheritance
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: polymorphism
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_23
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that are polymorphic
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_104
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please put a salmon that looks like this:
              {
                      'fishtype':'Salmon',
                      'location':'alaska',
                      'iswild':true,
                      'species':'king',
                      'length':1.0,
                      'siblings':[
                        {
                          'fishtype':'Shark',
                          'age':6,
                          'birthday': '2012-01-05T01:00:00Z',
                          'length':20.0,
                          'species':'predator',
                        },
                        {
                          'fishtype':'Sawshark',
                          'age':105,
                          'birthday': '1900-01-05T01:00:00Z',
                          'length':10.0,
                          'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                          'species':'dangerous',
                        },
                        {
                          'fishtype': 'goblin',
                          'age': 1,
                          'birthday': '2015-08-08T00:00:00Z',
                          'length': 30.0,
                          'species': 'scary',
                          'jawsize': 5
                        }
                      ]
                    };
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_104
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that are polymorphic
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/dotsyntax
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_38
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDotSyntax
        description: 'Get complex types that are polymorphic, JSON key contains a dot'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/composedWithDiscriminator
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_105
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComposedWithDiscriminator
        description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/composedWithoutDiscriminator
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_105
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComposedWithoutDiscriminator
        description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/complicated
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_27
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComplicated
        description: 'Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_106
        schema: *ref_27
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_106
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/complicated
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putComplicated
        description: 'Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_107
        schema: *ref_27
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_107
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/missingdiscriminator
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_27
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putMissingDiscriminator
        description: 'Put complex types that are polymorphic, omitting the discriminator'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_108
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please put a salmon that looks like this:
              {
                      'fishtype':'Salmon',
                      'location':'alaska',
                      'iswild':true,
                      'species':'king',
                      'length':1.0,
                      'siblings':[
                        {
                          'fishtype':'Shark',
                          'age':6,
                          'birthday': '2012-01-05T01:00:00Z',
                          'length':20.0,
                          'species':'predator',
                        },
                        {
                          'fishtype':'Sawshark',
                          'age':105,
                          'birthday': '1900-01-05T01:00:00Z',
                          'length':10.0,
                          'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                          'species':'dangerous',
                        },
                        {
                          'fishtype': 'goblin',
                          'age': 1,
                          'birthday': '2015-08-08T00:00:00Z',
                          'length': 30.0,
                          'species': 'scary',
                          'jawsize': 5
                        }
                      ]
                    };
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_108
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/missingrequired/invalid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValidMissingRequired
        description: 'Put complex types that are polymorphic, attempting to omit required ''birthday'' field - the request should not be allowed from the client'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: polymorphism
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: polymorphicrecursive
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphicrecursive/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_23
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that are polymorphic and have recursive references
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_109
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please put a salmon that looks like this:
              {
                      'fishtype':'Salmon',
                      'location':'alaska',
                      'iswild':true,
                      'species':'king',
                      'length':1.0,
                      'siblings':[
                        {
                          'fishtype':'Shark',
                          'age':6,
                          'birthday': '2012-01-05T01:00:00Z',
                          'length':20.0,
                          'species':'predator',
                        },
                        {
                          'fishtype':'Sawshark',
                          'age':105,
                          'birthday': '1900-01-05T01:00:00Z',
                          'length':10.0,
                          'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                          'species':'dangerous',
                        },
                        {
                          'fishtype': 'goblin',
                          'age': 1,
                          'birthday': '2015-08-08T00:00:00Z',
                          'length': 30.0,
                          'species': 'scary',
                          'jawsize': 5
                        }
                      ]
                    };
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_109
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphicrecursive/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that are polymorphic and have recursive references
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: polymorphicrecursive
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: readonlyproperty
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/readonlyproperty/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_110
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that have readonly properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_111
        schema: *ref_110
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_111
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/readonlyproperty/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_69
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that have readonly properties
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: readonlyproperty
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: flattencomplex
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    parameters:
    - *ref_70
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/flatten/valid
          method: get
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!SchemaResponse> 
      schema: *ref_45
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: getValid
        description: ''
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: flattencomplex
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
