!<!CodeModel> 
info: !<!Info> 
  description: Some cool documentation.
  title: complex-model
schemas: !<!Schemas> 
  numbers:
  - !<!NumberSchema> &ref_11
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  strings:
  - !<!StringSchema> &ref_0
    type: string
    language: !<!Languages> 
      default:
        name: string
        description: simple string
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_16
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: string
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_1
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: Product-product_id
        description: 'Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_2
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: Product-description
        description: Description of product.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_3
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: Product-display_name
        description: Display name of product.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_4
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    defaultValue: '100'
    language: !<!Languages> 
      default:
        name: Product-capacity
        description: 'Capacity of product. For example, 4 people.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_5
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: Product-image
        description: Image URL representing the product.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_7
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    language: !<!Languages> 
      default:
        name: Error-message
        description: ''
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_15
    type: constant
    value: !<!ConstantValue> 
      value: '123456'
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: ''
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_17
    type: constant
    value: !<!ConstantValue> 
      value: 2014-04-01-preview
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: ApiVersion-2014-04-01-preview
        description: Api Version (2014-04-01-preview)
    protocol: !<!Protocols> {}
  dictionaries:
  - !<!DictionarySchema> &ref_12
    type: dictionary
    elementType: !<!ArraySchema> &ref_9
      type: array
      apiVersions:
      - !<!ApiVersion> 
        version: 2014-04-01-preview
      elementType: !<!ObjectSchema> &ref_6
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: 2014-04-01-preview
        properties:
        - !<!Property> 
          schema: *ref_1
          serializedName: product_id
          language: !<!Languages> 
            default:
              name: product_id
              description: 'Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_2
          serializedName: description
          language: !<!Languages> 
            default:
              name: description
              description: Description of product.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_3
          serializedName: display_name
          language: !<!Languages> 
            default:
              name: display_name
              description: Display name of product.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_4
          serializedName: capacity
          language: !<!Languages> 
            default:
              name: capacity
              description: 'Capacity of product. For example, 4 people.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_5
          serializedName: image
          language: !<!Languages> 
            default:
              name: image
              description: Image URL representing the product.
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        - input
        language: !<!Languages> 
          default:
            name: Product
            description: The product documentation.
            namespace: ''
        protocol: !<!Protocols> {}
      language: !<!Languages> 
        default:
          name: components·5px1as·schemas·catalogdictionaryofarray·properties·productdictionaryofarray·additionalproperties
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: CatalogDictionaryOfArray-productDictionaryOfArray
        description: Dictionary of Array of product
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_13
    type: dictionary
    elementType: *ref_6
    language: !<!Languages> 
      default:
        name: CatalogDictionary-productDictionary
        description: Dictionary of products
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_14
    type: dictionary
    elementType: *ref_6
    language: !<!Languages> 
      default:
        name: CatalogArrayOfDictionary-productArrayOfDictionaryItem
        description: Dictionary of <Product>
    protocol: !<!Protocols> {}
  objects:
  - !<!ObjectSchema> &ref_19
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_8
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: 2014-04-01-preview
        elementType: *ref_6
        language: !<!Languages> 
          default:
            name: CatalogArray-productArray
            description: Array of products
        protocol: !<!Protocols> {}
      serializedName: productArray
      language: !<!Languages> 
        default:
          name: productArray
          description: Array of products
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: CatalogArray
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_6
  - !<!ObjectSchema> &ref_20
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    properties:
    - !<!Property> 
      schema: *ref_11
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_7
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: ''
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: Error
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_25
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    properties:
    - !<!Property> 
      schema: *ref_12
      serializedName: productDictionaryOfArray
      language: !<!Languages> 
        default:
          name: productDictionaryOfArray
          description: Dictionary of Array of product
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: CatalogDictionaryOfArray
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_27
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    properties:
    - !<!Property> 
      schema: *ref_13
      serializedName: productDictionary
      language: !<!Languages> 
        default:
          name: productDictionary
          description: Dictionary of products
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: CatalogDictionary
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_30
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_10
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: 2014-04-01-preview
        elementType: *ref_14
        language: !<!Languages> 
          default:
            name: CatalogArrayOfDictionary-productArrayOfDictionary
            description: Array of dictionary of products
        protocol: !<!Protocols> {}
      serializedName: productArrayOfDictionary
      language: !<!Languages> 
        default:
          name: productArrayOfDictionary
          description: Array of dictionary of products
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: CatalogArrayOfDictionary
        description: ''
        namespace: ''
    protocol: !<!Protocols> {}
  arrays:
  - *ref_8
  - *ref_9
  - *ref_10
globalParameters:
- !<!Parameter> &ref_32
  schema: *ref_15
  implementation: Client
  required: true
  extensions:
    x-ms-priority: 0
  language: !<!Languages> 
    default:
      name: subscriptionId
      description: Subscription ID.
      serializedName: subscriptionId
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: path
- !<!Parameter> &ref_21
  schema: *ref_0
  clientDefaultValue: 'http://localhost:3000'
  implementation: Client
  required: true
  extensions:
    x-ms-skip-url-encoding: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
      serializedName: $host
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_22
  schema: *ref_17
  implementation: Client
  required: true
  language: !<!Languages> 
    default:
      name: ApiVersion
      description: Api Version
      serializedName: api-version
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
operationGroups:
- !<!OperationGroup> 
  $key: ''
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    parameters:
    - *ref_21
    - *ref_32
    - !<!Parameter> &ref_18
      schema: *ref_16
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: resourceGroupName
          description: Resource Group ID.
          serializedName: resourceGroupName
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - *ref_22
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_18
    responses:
    - !<!SchemaResponse> 
      schema: *ref_19
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_20
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: list
        description: 'The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.'
        summary: Product Types
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    parameters:
    - *ref_21
    - !<!Parameter> &ref_23
      schema: *ref_16
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: subscriptionId
          description: Subscription ID.
          serializedName: subscriptionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_24
      schema: *ref_16
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: resourceGroupName
          description: Resource Group ID.
          serializedName: resourceGroupName
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - *ref_22
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_26
        schema: *ref_25
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: body Parameter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_26
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters:
    - *ref_23
    - *ref_24
    responses:
    - !<!SchemaResponse> 
      schema: *ref_27
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_20
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: create
        description: Resets products.
        summary: Create products
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 2014-04-01-preview
    parameters:
    - *ref_21
    - !<!Parameter> &ref_28
      schema: *ref_16
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: subscriptionId
          description: Subscription ID.
          serializedName: subscriptionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_29
      schema: *ref_16
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: resourceGroupName
          description: Resource Group ID.
          serializedName: resourceGroupName
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - *ref_22
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_31
        schema: *ref_30
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bodyParameter
            description: body Parameter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_31
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: '{$host}'
    signatureParameters:
    - *ref_28
    - *ref_29
    responses:
    - !<!SchemaResponse> 
      schema: *ref_19
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_20
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: update
        description: Resets products.
        summary: Update products
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: ''
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
