!<!CodeModel> 
schemas: !<!Schemas> 
  objects:
  - !<!ObjectSchema> &ref_135
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!NumberSchema> &ref_54
        type: integer
        precision: 64
        language: !<!Languages> 
          default:
            name: Count
            description: >-
              The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip
              parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@odata.count'
      language: !<!Languages> 
        default:
          name: count
          description: >-
            The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip
            parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_55
        type: number
        precision: 64
        language: !<!Languages> 
          default:
            name: Coverage
            description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.'
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.coverage'
      language: !<!Languages> 
        default:
          name: coverage
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!DictionarySchema> &ref_14
        type: dictionary
        elementType: !<!ArraySchema> &ref_16
          type: array
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          elementType: !<!ObjectSchema> &ref_4
            type: object
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            parents: !<!Relations> 
              all:
              - !<!DictionarySchema> &ref_0
                type: dictionary
                elementType: !<!AnySchema> &ref_2
                  type: any
                  language: !<!Languages> 
                    default:
                      name: any
                      description: Any object
                  protocol: !<!Protocols> {}
                language: !<!Languages> 
                  default:
                    name: FacetResult
                    description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
                protocol: !<!Protocols> {}
              immediate:
              - *ref_0
            properties:
            - !<!Property> 
              schema: !<!NumberSchema> &ref_56
                type: integer
                precision: 64
                language: !<!Languages> 
                  default:
                    name: Integer
                    description: The approximate count of documents falling within the bucket described by this facet.
                protocol: !<!Protocols> {}
              readOnly: true
              serializedName: count
              language: !<!Languages> 
                default:
                  name: count
                  description: The approximate count of documents falling within the bucket described by this facet.
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: FacetResult
                description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
                namespace: Api20190506
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: ArrayOfFacetResult
              description: Array of FacetResult
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Facets
            description: 'The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.'
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.facets'
      language: !<!Languages> 
        default:
          name: facets
          description: 'The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ObjectSchema> &ref_5
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        properties:
        - !<!Property> 
          schema: !<!BooleanSchema> &ref_26
            type: boolean
            language: !<!Languages> 
              default:
                name: IncludeTotalResultCount
                description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
            protocol: !<!Protocols> {}
          serializedName: count
          language: !<!Languages> 
            default:
              name: includeTotalResultCount
              description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_17
            type: array
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            elementType: !<!StringSchema> &ref_75
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: SearchRequestFacetsItem
                  description: ''
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: SearchRequestFacets
                description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
            protocol: !<!Protocols> {}
          serializedName: facets
          language: !<!Languages> 
            default:
              name: facets
              description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_76
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestFilter
                description: The OData $filter expression to apply to the search query.
            protocol: !<!Protocols> {}
          serializedName: filter
          language: !<!Languages> 
            default:
              name: filter
              description: The OData $filter expression to apply to the search query.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_77
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: HighlightFields
                description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
            protocol: !<!Protocols> {}
          serializedName: highlight
          language: !<!Languages> 
            default:
              name: highlightFields
              description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_78
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestHighlightPostTag
                description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
            protocol: !<!Protocols> {}
          serializedName: highlightPostTag
          language: !<!Languages> 
            default:
              name: highlightPostTag
              description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_79
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestHighlightPreTag
                description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
            protocol: !<!Protocols> {}
          serializedName: highlightPreTag
          language: !<!Languages> 
            default:
              name: highlightPreTag
              description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!NumberSchema> &ref_57
            type: number
            precision: 64
            language: !<!Languages> 
              default:
                name: Number
                description: >-
                  A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
                  even for services with only one replica. The default is 100.
            protocol: !<!Protocols> {}
          serializedName: minimumCoverage
          language: !<!Languages> 
            default:
              name: minimumCoverage
              description: >-
                A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
                for services with only one replica. The default is 100.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_9
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: OrderBy
                description: >-
                  The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
                  followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending
                  by document match score. There can be at most 32 $orderby clauses.
            protocol: !<!Protocols> {}
          serializedName: orderby
          language: !<!Languages> 
            default:
              name: orderBy
              description: >-
                The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
                followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending
                by document match score. There can be at most 32 $orderby clauses.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!SealedChoiceSchema> &ref_39
            choices:
            - !<!ChoiceValue> 
              value: simple
              language:
                default:
                  name: Simple
                  description: ''
            - !<!ChoiceValue> 
              value: full
              language:
                default:
                  name: Full
                  description: ''
            type: sealed-choice
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            choiceType: !<!StringSchema> &ref_1
              type: string
              language: !<!Languages> 
                default:
                  name: String
                  description: simple string
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: QueryType
                description: ''
            protocol: !<!Protocols> {}
          serializedName: queryType
          language: !<!Languages> 
            default:
              name: queryType
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_18
            type: array
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            elementType: !<!StringSchema> &ref_80
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: SearchRequestScoringParametersItem
                  description: ''
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: SearchRequestScoringParameters
                description: >-
                  The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation'
                  the parameter string would be "mylocation--122.2,44.8" (without the quotes).
            protocol: !<!Protocols> {}
          serializedName: scoringParameters
          language: !<!Languages> 
            default:
              name: scoringParameters
              description: >-
                The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation'
                the parameter string would be "mylocation--122.2,44.8" (without the quotes).
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_81
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestScoringProfile
                description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
            protocol: !<!Protocols> {}
          serializedName: scoringProfile
          language: !<!Languages> 
            default:
              name: scoringProfile
              description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_82
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchText
                description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
            protocol: !<!Protocols> {}
          serializedName: search
          language: !<!Languages> 
            default:
              name: searchText
              description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_83
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestSearchFields
                description: >-
                  The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take
                  precedence over any field names listed in this parameter.
            protocol: !<!Protocols> {}
          serializedName: searchFields
          language: !<!Languages> 
            default:
              name: searchFields
              description: >-
                The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence
                over any field names listed in this parameter.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!SealedChoiceSchema> &ref_42
            choices:
            - !<!ChoiceValue> 
              value: any
              language:
                default:
                  name: Any
                  description: ''
            - !<!ChoiceValue> 
              value: all
              language:
                default:
                  name: All
                  description: ''
            type: sealed-choice
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            choiceType: *ref_1
            language: !<!Languages> 
              default:
                name: SearchMode
                description: ''
            protocol: !<!Protocols> {}
          serializedName: searchMode
          language: !<!Languages> 
            default:
              name: searchMode
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!StringSchema> &ref_84
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            language: !<!Languages> 
              default:
                name: SearchRequestSelect
                description: 'The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
            protocol: !<!Protocols> {}
          serializedName: select
          language: !<!Languages> 
            default:
              name: select
              description: 'The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!NumberSchema> &ref_58
            type: integer
            precision: 32
            language: !<!Languages> 
              default:
                name: Integer
                description: >-
                  The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and
                  filter with a range query instead.
            protocol: !<!Protocols> {}
          serializedName: skip
          language: !<!Languages> 
            default:
              name: skip
              description: >-
                The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and
                filter with a range query instead.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!NumberSchema> &ref_59
            type: integer
            precision: 32
            language: !<!Languages> 
              default:
                name: Integer
                description: >-
                  The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a
                  continuation token that can be used to issue another Search request for the next page of results.
            protocol: !<!Protocols> {}
          serializedName: top
          language: !<!Languages> 
            default:
              name: top
              description: >-
                The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a
                continuation token that can be used to issue another Search request for the next page of results.
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: SearchRequest
            description: 'Parameters for filtering, sorting, faceting, paging, and other search query behaviors.'
            namespace: Api20190506
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.nextPageParameters'
      language: !<!Languages> 
        default:
          name: nextPageParameters
          description: 'Parameters for filtering, sorting, faceting, paging, and other search query behaviors.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_20
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_6
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - !<!DictionarySchema> &ref_3
              type: dictionary
              elementType: *ref_2
              language: !<!Languages> 
                default:
                  name: SearchResult
                  description: 'Contains a document found by a search query, plus associated metadata.'
              protocol: !<!Protocols> {}
            immediate:
            - *ref_3
          properties:
          - !<!Property> 
            schema: !<!NumberSchema> &ref_60
              type: number
              precision: 64
              language: !<!Languages> 
                default:
                  name: Score
                  description: The relevance score of the document compared to other documents returned by the query.
              protocol: !<!Protocols> {}
            nullable: false
            readOnly: true
            serializedName: '@search.score'
            language: !<!Languages> 
              default:
                name: score
                description: The relevance score of the document compared to other documents returned by the query.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: !<!DictionarySchema> &ref_15
              type: dictionary
              elementType: !<!ArraySchema> &ref_19
                type: array
                apiVersions:
                - !<!ApiVersion> 
                  version: '2019-05-06'
                elementType: !<!StringSchema> &ref_85
                  type: string
                  apiVersions:
                  - !<!ApiVersion> 
                    version: '2019-05-06'
                  language: !<!Languages> 
                    default:
                      name: SearchResultSearchHighlightsItemsItem
                      description: ''
                  protocol: !<!Protocols> {}
                language: !<!Languages> 
                  default:
                    name: ArrayOfSearchResultSearchHighlightsItemsItem
                    description: Array of SearchResultSearchHighlightsItemsItem
                protocol: !<!Protocols> {}
              language: !<!Languages> 
                default:
                  name: Highlights
                  description: 'Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.'
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: '@search.highlights'
            language: !<!Languages> 
              default:
                name: highlights
                description: 'Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.'
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: SearchResult
              description: 'Contains a document found by a search query, plus associated metadata.'
              namespace: Api20190506
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The sequence of results returned by the query.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: results
          description: The sequence of results returned by the query.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_86
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: NextLink
            description: >-
              Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search
              response. Make sure to use the same verb (GET or POST) as the request that produced this response.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@odata.nextLink'
      language: !<!Languages> 
        default:
          name: nextLink
          description: >-
            Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search
            response. Make sure to use the same verb (GET or POST) as the request that produced this response.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: SearchDocumentsResult
        description: Response containing search results from an index.
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - *ref_4
  - *ref_5
  - *ref_6
  - !<!ObjectSchema> &ref_144
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: Paths1Y7TjlfDocsKeyGetResponses200ContentApplicationJsonSchema
        description: ''
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_158
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_21
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_8
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - !<!DictionarySchema> &ref_7
              type: dictionary
              elementType: *ref_2
              language: !<!Languages> 
                default:
                  name: SuggestResult
                  description: 'A result containing a document found by a suggestion query, plus associated metadata.'
              protocol: !<!Protocols> {}
            immediate:
            - *ref_7
          properties:
          - !<!Property> 
            schema: !<!StringSchema> &ref_90
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: Text
                  description: The text of the suggestion result.
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: '@search.text'
            language: !<!Languages> 
              default:
                name: text
                description: The text of the suggestion result.
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: SuggestResult
              description: 'A result containing a document found by a suggestion query, plus associated metadata.'
              namespace: Api20190506
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The sequence of results returned by the query.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: results
          description: The sequence of results returned by the query.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_61
        type: number
        precision: 64
        language: !<!Languages> 
          default:
            name: Coverage
            description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.'
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.coverage'
      language: !<!Languages> 
        default:
          name: coverage
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.'
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: SuggestDocumentsResult
        description: Response containing suggestion query results from an index.
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - *ref_8
  - !<!ObjectSchema> &ref_160
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!StringSchema> &ref_91
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestFilter
            description: An OData expression that filters the documents considered for suggestions.
        protocol: !<!Protocols> {}
      serializedName: filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents considered for suggestions.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!BooleanSchema> &ref_27
        type: boolean
        language: !<!Languages> 
          default:
            name: UseFuzzyMatching
            description: >-
              A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this
              provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
        protocol: !<!Protocols> {}
      serializedName: fuzzy
      language: !<!Languages> 
        default:
          name: useFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_92
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestHighlightPostTag
            description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
        protocol: !<!Protocols> {}
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_93
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestHighlightPreTag
            description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
        protocol: !<!Protocols> {}
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_62
        type: number
        precision: 64
        language: !<!Languages> 
          default:
            name: Number
            description: >-
              A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
              even for services with only one replica. The default is 80.
        protocol: !<!Protocols> {}
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
            for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_9
      serializedName: orderby
      language: !<!Languages> 
        default:
          name: orderBy
          description: >-
            The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
            followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by
            document match score. There can be at most 32 $orderby clauses.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_94
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SearchText
            description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
        protocol: !<!Protocols> {}
      serializedName: search
      language: !<!Languages> 
        default:
          name: searchText
          description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_95
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestSearchFields
            description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
        protocol: !<!Protocols> {}
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_96
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestSelect
            description: 'The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.'
        protocol: !<!Protocols> {}
      serializedName: select
      language: !<!Languages> 
        default:
          name: select
          description: 'The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_97
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SuggestRequestSuggesterName
            description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        protocol: !<!Protocols> {}
      serializedName: suggesterName
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_63
        type: integer
        precision: 32
        language: !<!Languages> 
          default:
            name: Integer
            description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
        protocol: !<!Protocols> {}
      serializedName: top
      language: !<!Languages> 
        default:
          name: top
          description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: SuggestRequest
        description: 'Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.'
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_164
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> &ref_166
      schema: !<!ArraySchema> &ref_22
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_11
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - !<!DictionarySchema> &ref_10
              type: dictionary
              elementType: *ref_2
              language: !<!Languages> 
                default:
                  name: IndexAction
                  description: Represents an index action that operates on a document.
              protocol: !<!Protocols> {}
            immediate:
            - *ref_10
          properties:
          - !<!Property> 
            schema: !<!SealedChoiceSchema> &ref_68
              choices:
              - !<!ChoiceValue> 
                value: upload
                language:
                  default:
                    name: Upload
                    description: ''
              - !<!ChoiceValue> 
                value: merge
                language:
                  default:
                    name: Merge
                    description: ''
              - !<!ChoiceValue> 
                value: mergeOrUpload
                language:
                  default:
                    name: MergeOrUpload
                    description: ''
              - !<!ChoiceValue> 
                value: delete
                language:
                  default:
                    name: Delete
                    description: ''
              type: sealed-choice
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              choiceType: *ref_1
              language: !<!Languages> 
                default:
                  name: IndexActionType
                  description: The operation to perform on a document in an indexing batch.
              protocol: !<!Protocols> {}
            serializedName: '@search.action'
            language: !<!Languages> 
              default:
                name: actionType
                description: The operation to perform on a document in an indexing batch.
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: IndexAction
              description: Represents an index action that operates on a document.
              namespace: Api20190506
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Actions
            description: The actions in the batch.
        protocol: !<!Protocols> {}
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: actions
          description: The actions in the batch.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: IndexBatch
        description: Contains a batch of document write actions to send to the index.
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - *ref_11
  - !<!ObjectSchema> &ref_169
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_23
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_12
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          properties:
          - !<!Property> 
            schema: !<!StringSchema> &ref_98
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: IndexingResultKey
                  description: The key of a document that was in the indexing request.
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: key
            language: !<!Languages> 
              default:
                name: key
                description: The key of a document that was in the indexing request.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: !<!StringSchema> &ref_99
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: IndexingResultErrorMessage
                  description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: errorMessage
            language: !<!Languages> 
              default:
                name: errorMessage
                description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: !<!BooleanSchema> &ref_28
              type: boolean
              language: !<!Languages> 
                default:
                  name: Succeeded
                  description: A value indicating whether the indexing operation succeeded for the document identified by the key.
              protocol: !<!Protocols> {}
            nullable: false
            readOnly: true
            serializedName: status
            language: !<!Languages> 
              default:
                name: succeeded
                description: A value indicating whether the indexing operation succeeded for the document identified by the key.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: !<!NumberSchema> &ref_64
              type: integer
              precision: 32
              language: !<!Languages> 
                default:
                  name: Integer
                  description: >-
                    The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a
                    version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
              protocol: !<!Protocols> {}
            nullable: false
            readOnly: true
            serializedName: statusCode
            language: !<!Languages> 
              default:
                name: statusCode
                description: >-
                  The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a
                  version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: IndexingResult
              description: Status of an indexing operation for a single document.
              namespace: Api20190506
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The list of status information for each document in the indexing request.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: results
          description: The list of status information for each document in the indexing request.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: IndexDocumentsResult
        description: Response containing the status of operations for all documents in the indexing request.
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - *ref_12
  - !<!ObjectSchema> &ref_182
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!NumberSchema> &ref_65
        type: number
        precision: 64
        language: !<!Languages> 
          default:
            name: Coverage
            description: 'A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.'
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.coverage'
      language: !<!Languages> 
        default:
          name: coverage
          description: 'A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_25
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_13
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          properties:
          - !<!Property> 
            schema: !<!StringSchema> &ref_100
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: AutocompleteItemText
                  description: The completed term.
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: text
            language: !<!Languages> 
              default:
                name: text
                description: The completed term.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: !<!StringSchema> &ref_101
              type: string
              apiVersions:
              - !<!ApiVersion> 
                version: '2019-05-06'
              language: !<!Languages> 
                default:
                  name: AutocompleteItemQueryPlusText
                  description: The query along with the completed term.
              protocol: !<!Protocols> {}
            readOnly: true
            serializedName: queryPlusText
            language: !<!Languages> 
              default:
                name: queryPlusText
                description: The query along with the completed term.
            protocol: !<!Protocols> {}
          language: !<!Languages> 
            default:
              name: AutocompleteItem
              description: The result of Autocomplete requests.
              namespace: Api20190506
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The list of returned Autocompleted items.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: results
          description: The list of returned Autocompleted items.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: AutocompleteResult
        description: The result of Autocomplete query.
        namespace: Api20190506
    protocol: !<!Protocols> {}
  - *ref_13
  - !<!ObjectSchema> &ref_184
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!StringSchema> &ref_102
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: SearchText
            description: The search text on which to base autocomplete results.
        protocol: !<!Protocols> {}
      serializedName: search
      language: !<!Languages> 
        default:
          name: searchText
          description: The search text on which to base autocomplete results.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!SealedChoiceSchema> &ref_50
        choices:
        - !<!ChoiceValue> 
          value: oneTerm
          language:
            default:
              name: OneTerm
              description: ''
        - !<!ChoiceValue> 
          value: twoTerms
          language:
            default:
              name: TwoTerms
              description: ''
        - !<!ChoiceValue> 
          value: oneTermWithContext
          language:
            default:
              name: OneTermWithContext
              description: ''
        type: sealed-choice
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        choiceType: *ref_1
        language: !<!Languages> 
          default:
            name: AutocompleteMode
            description: ''
        protocol: !<!Protocols> {}
      serializedName: autocompleteMode
      language: !<!Languages> 
        default:
          name: autocompleteMode
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_103
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: AutocompleteRequestFilter
            description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
        protocol: !<!Protocols> {}
      serializedName: filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!BooleanSchema> &ref_29
        type: boolean
        language: !<!Languages> 
          default:
            name: UseFuzzyMatching
            description: >-
              A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While
              this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
        protocol: !<!Protocols> {}
      serializedName: fuzzy
      language: !<!Languages> 
        default:
          name: useFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_104
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: AutocompleteRequestHighlightPostTag
            description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
        protocol: !<!Protocols> {}
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_105
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: AutocompleteRequestHighlightPreTag
            description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
        protocol: !<!Protocols> {}
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_66
        type: number
        precision: 64
        language: !<!Languages> 
          default:
            name: Number
            description: >-
              A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
              even for services with only one replica. The default is 80.
        protocol: !<!Protocols> {}
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
            even for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_106
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: AutocompleteRequestSearchFields
            description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
        protocol: !<!Protocols> {}
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_107
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: AutocompleteRequestSuggesterName
            description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        protocol: !<!Protocols> {}
      serializedName: suggesterName
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_67
        type: integer
        precision: 32
        language: !<!Languages> 
          default:
            name: Integer
            description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
        protocol: !<!Protocols> {}
      serializedName: top
      language: !<!Languages> 
        default:
          name: top
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: AutocompleteRequest
        description: 'Parameters for fuzzy matching, and other autocomplete query behaviors.'
        namespace: Api20190506
    protocol: !<!Protocols> {}
  dictionaries:
  - *ref_0
  - *ref_14
  - *ref_3
  - *ref_15
  - *ref_7
  - *ref_10
  arrays:
  - !<!ArraySchema> &ref_34
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_69
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get2ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet2ItemsItem
        description: Array of Get2ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_36
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_70
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get4ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet4ItemsItem
        description: Array of Get4ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_38
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_71
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get8ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet8ItemsItem
        description: Array of Get8ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_40
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_72
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get10ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet10ItemsItem
        description: Array of Get10ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_41
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_73
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get12ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet12ItemsItem
        description: Array of Get12ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_43
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_74
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get14ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet14ItemsItem
        description: Array of Get14ItemsItem
    protocol: !<!Protocols> {}
  - *ref_16
  - *ref_17
  - *ref_18
  - *ref_19
  - *ref_20
  - !<!ArraySchema> &ref_139
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_87
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get1ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet1ItemsItem
        description: Array of Get1ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_47
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_88
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get7ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet7ItemsItem
        description: Array of Get7ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_48
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_24
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: String
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfString
        description: Array of String
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_49
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: !<!StringSchema> &ref_89
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      language: !<!Languages> 
        default:
          name: Get9ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet9ItemsItem
        description: Array of Get9ItemsItem
    protocol: !<!Protocols> {}
  - *ref_21
  - *ref_22
  - *ref_23
  - !<!ArraySchema> &ref_53
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_24
    language: !<!Languages> 
      default:
        name: ArrayOfString
        description: Array of String
    protocol: !<!Protocols> {}
  - *ref_25
  booleans:
  - !<!BooleanSchema> &ref_32
    type: boolean
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: Boolean
        description: ''
    protocol: !<!Protocols> {}
  - *ref_26
  - *ref_27
  - *ref_28
  - *ref_29
  constants:
  - !<!ConstantSchema> &ref_108
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> 
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: ApiVersion20190506
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  groups:
  - !<!GroupSchema> &ref_31
    type: group
    properties:
    - !<!Property> 
      schema: !<!UuidSchema> &ref_30
        type: uuid
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        language: !<!Languages> 
          default:
            name: Uuid
            description: ''
        protocol: !<!Protocols> {}
      originalParameter:
      - !<!Parameter> &ref_112
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_114
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_132
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_133
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_136
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_137
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_140
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_141
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_154
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_155
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_159
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_161
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_163
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_167
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_170
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_179
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_183
        schema: *ref_30
        groupedBy: !<!Parameter> &ref_185
          schema: *ref_31
          implementation: Method
          language: !<!Languages> 
            default:
              name: requestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        extensions:
          x-ms-client-request-id: true
        language: !<!Languages> 
          default:
            name: client-request-id
            description: The tracking ID sent with the request to help with debugging.
            serializedName: client-request-id
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      serializedName: client-request-id
      language: !<!Languages> 
        default:
          name: clientRequestId
          description: The tracking ID sent with the request to help with debugging.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: RequestOptions
        description: Parameter group
    protocol: !<!Protocols> {}
  - !<!GroupSchema> &ref_33
    type: group
    properties:
    - !<!Property> 
      schema: *ref_32
      originalParameter:
      - !<!Parameter> &ref_116
        schema: *ref_32
        groupedBy: !<!Parameter> &ref_35
          schema: *ref_33
          implementation: Method
          language: !<!Languages> 
            default:
              name: searchOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        language: !<!Languages> 
          default:
            name: IncludeTotalResultCount
            description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
            serializedName: $count
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: IncludeTotalResultCount
      language: !<!Languages> 
        default:
          name: includeTotalResultCount
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_34
      originalParameter:
      - !<!Parameter> &ref_117
        schema: *ref_34
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: Facets
            description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
            serializedName: facet
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: form
      serializedName: Facets
      language: !<!Languages> 
        default:
          name: facets
          description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_118
        schema: *ref_24
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: $filter
            description: The OData $filter expression to apply to the search query.
            serializedName: $filter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $filter
      language: !<!Languages> 
        default:
          name: filter
          description: The OData $filter expression to apply to the search query.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_36
      originalParameter:
      - !<!Parameter> &ref_119
        schema: *ref_36
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: HighlightFields
            description: The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
            serializedName: highlight
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: HighlightFields
      language: !<!Languages> 
        default:
          name: highlightFields
          description: The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_120
        schema: *ref_24
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPostTag
            description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
            serializedName: highlightPostTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_121
        schema: *ref_24
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPreTag
            description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
            serializedName: highlightPreTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_37
        type: number
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        precision: 64
        language: !<!Languages> 
          default:
            name: Number
            description: ''
        protocol: !<!Protocols> {}
      originalParameter:
      - !<!Parameter> &ref_122
        schema: *ref_37
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: minimumCoverage
            description: >-
              A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
              for services with only one replica. The default is 100.
            serializedName: minimumCoverage
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for
            services with only one replica. The default is 100.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_38
      originalParameter:
      - !<!Parameter> &ref_123
        schema: *ref_38
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: OrderBy
            description: >-
              The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
              indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match
              score. There can be at most 32 $orderby clauses.
            serializedName: $orderby
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: OrderBy
      language: !<!Languages> 
        default:
          name: orderBy
          description: >-
            The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
            indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score.
            There can be at most 32 $orderby clauses.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_39
      originalParameter:
      - !<!Parameter> &ref_124
        schema: *ref_39
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: queryType
            description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
            serializedName: queryType
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: queryType
      language: !<!Languages> 
        default:
          name: queryType
          description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_40
      originalParameter:
      - !<!Parameter> &ref_125
        schema: *ref_40
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: ScoringParameters
            description: >-
              The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the
              parameter string would be "mylocation--122.2,44.8" (without the quotes).
            serializedName: scoringParameter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: form
      serializedName: ScoringParameters
      language: !<!Languages> 
        default:
          name: scoringParameters
          description: >-
            The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the
            parameter string would be "mylocation--122.2,44.8" (without the quotes).
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_126
        schema: *ref_24
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: scoringProfile
            description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
            serializedName: scoringProfile
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: scoringProfile
      language: !<!Languages> 
        default:
          name: scoringProfile
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_41
      originalParameter:
      - !<!Parameter> &ref_127
        schema: *ref_41
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: searchFields
            description: >-
              The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field
              names listed in this parameter.
            serializedName: searchFields
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: >-
            The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field
            names listed in this parameter.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_42
      originalParameter:
      - !<!Parameter> &ref_128
        schema: *ref_42
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: searchMode
            description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
            serializedName: searchMode
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: searchMode
      language: !<!Languages> 
        default:
          name: searchMode
          description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_43
      originalParameter:
      - !<!Parameter> &ref_129
        schema: *ref_43
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: $select
            description: 'The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
            serializedName: $select
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $select
      language: !<!Languages> 
        default:
          name: select
          description: 'The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!NumberSchema> &ref_44
        type: integer
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        precision: 32
        language: !<!Languages> 
          default:
            name: Integer
            description: ''
        protocol: !<!Protocols> {}
      originalParameter:
      - !<!Parameter> &ref_130
        schema: *ref_44
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: $skip
            description: >-
              The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and
              $filter with a range query instead.
            serializedName: $skip
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $skip
      language: !<!Languages> 
        default:
          name: skip
          description: >-
            The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and
            $filter with a range query instead.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_44
      originalParameter:
      - !<!Parameter> &ref_131
        schema: *ref_44
        groupedBy: *ref_35
        implementation: Method
        language: !<!Languages> 
          default:
            name: $top
            description: >-
              The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a
              continuation token that can be used to issue another Search request for the next page of results.
            serializedName: $top
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $top
      language: !<!Languages> 
        default:
          name: top
          description: >-
            The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation
            token that can be used to issue another Search request for the next page of results.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: SearchOptions
        description: Parameter group
    protocol: !<!Protocols> {}
  - !<!GroupSchema> &ref_45
    type: group
    properties:
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_145
        schema: *ref_24
        groupedBy: !<!Parameter> &ref_46
          schema: *ref_45
          implementation: Method
          language: !<!Languages> 
            default:
              name: suggestOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        language: !<!Languages> 
          default:
            name: $filter
            description: An OData expression that filters the documents considered for suggestions.
            serializedName: $filter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents considered for suggestions.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_32
      originalParameter:
      - !<!Parameter> &ref_146
        schema: *ref_32
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: UseFuzzyMatching
            description: >-
              A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this
              provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.
            serializedName: fuzzy
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: UseFuzzyMatching
      language: !<!Languages> 
        default:
          name: useFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides
            a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_147
        schema: *ref_24
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPostTag
            description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
            serializedName: highlightPostTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_148
        schema: *ref_24
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPreTag
            description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
            serializedName: highlightPreTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_37
      originalParameter:
      - !<!Parameter> &ref_149
        schema: *ref_37
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: minimumCoverage
            description: >-
              A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
              even for services with only one replica. The default is 80.
            serializedName: minimumCoverage
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
            for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_47
      originalParameter:
      - !<!Parameter> &ref_150
        schema: *ref_47
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: OrderBy
            description: >-
              The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
              indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match
              score. There can be at most 32 $orderby clauses.
            serializedName: $orderby
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: OrderBy
      language: !<!Languages> 
        default:
          name: orderBy
          description: >-
            The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
            indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score.
            There can be at most 32 $orderby clauses.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_48
      originalParameter:
      - !<!Parameter> &ref_151
        schema: *ref_48
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: searchFields
            description: The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
            serializedName: searchFields
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_49
      originalParameter:
      - !<!Parameter> &ref_152
        schema: *ref_49
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: $select
            description: 'The list of fields to retrieve. If unspecified, only the key field will be included in the results.'
            serializedName: $select
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $select
      language: !<!Languages> 
        default:
          name: select
          description: 'The list of fields to retrieve. If unspecified, only the key field will be included in the results.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_44
      originalParameter:
      - !<!Parameter> &ref_153
        schema: *ref_44
        groupedBy: *ref_46
        implementation: Method
        language: !<!Languages> 
          default:
            name: $top
            description: The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
            serializedName: $top
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $top
      language: !<!Languages> 
        default:
          name: top
          description: The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: SuggestOptions
        description: Parameter group
    protocol: !<!Protocols> {}
  - !<!GroupSchema> &ref_51
    type: group
    properties:
    - !<!Property> 
      schema: *ref_50
      originalParameter:
      - !<!Parameter> &ref_171
        schema: *ref_50
        groupedBy: !<!Parameter> &ref_52
          schema: *ref_51
          implementation: Method
          language: !<!Languages> 
            default:
              name: autocompleteOptions
              description: Parameter group
          protocol: !<!Protocols> {}
        implementation: Method
        language: !<!Languages> 
          default:
            name: autocompleteMode
            description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
            serializedName: autocompleteMode
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: autocompleteMode
      language: !<!Languages> 
        default:
          name: autocompleteMode
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_172
        schema: *ref_24
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: $filter
            description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
            serializedName: $filter
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_32
      originalParameter:
      - !<!Parameter> &ref_173
        schema: *ref_32
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: UseFuzzyMatching
            description: >-
              A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this
              provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
            serializedName: fuzzy
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: UseFuzzyMatching
      language: !<!Languages> 
        default:
          name: useFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_174
        schema: *ref_24
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPostTag
            description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
            serializedName: highlightPostTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_24
      originalParameter:
      - !<!Parameter> &ref_175
        schema: *ref_24
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: highlightPreTag
            description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
            serializedName: highlightPreTag
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_37
      originalParameter:
      - !<!Parameter> &ref_176
        schema: *ref_37
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: minimumCoverage
            description: >-
              A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
              even for services with only one replica. The default is 80.
            serializedName: minimumCoverage
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
            even for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_53
      originalParameter:
      - !<!Parameter> &ref_177
        schema: *ref_53
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: searchFields
            description: The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
            serializedName: searchFields
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_44
      originalParameter:
      - !<!Parameter> &ref_178
        schema: *ref_44
        groupedBy: *ref_52
        implementation: Method
        language: !<!Languages> 
          default:
            name: $top
            description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
            serializedName: $top
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      serializedName: $top
      language: !<!Languages> 
        default:
          name: top
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: AutocompleteOptions
        description: Parameter group
    protocol: !<!Protocols> {}
  numbers:
  - !<!NumberSchema> &ref_115
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    precision: 64
    language: !<!Languages> 
      default:
        name: Integer
        description: ''
    protocol: !<!Protocols> {}
  - *ref_37
  - *ref_44
  - *ref_54
  - *ref_55
  - *ref_56
  - *ref_57
  - *ref_58
  - *ref_59
  - *ref_60
  - *ref_61
  - *ref_62
  - *ref_63
  - *ref_64
  - *ref_65
  - *ref_66
  - *ref_67
  sealedChoices:
  - *ref_39
  - *ref_42
  - *ref_68
  - *ref_50
  strings:
  - *ref_1
  - *ref_24
  - *ref_69
  - *ref_70
  - *ref_71
  - *ref_72
  - *ref_73
  - *ref_74
  - *ref_75
  - *ref_76
  - *ref_77
  - *ref_78
  - *ref_79
  - *ref_9
  - *ref_80
  - *ref_81
  - *ref_82
  - *ref_83
  - *ref_84
  - *ref_85
  - *ref_86
  - *ref_87
  - *ref_88
  - *ref_89
  - *ref_90
  - *ref_91
  - *ref_92
  - *ref_93
  - *ref_94
  - *ref_95
  - *ref_96
  - *ref_97
  - *ref_98
  - *ref_99
  - *ref_100
  - *ref_101
  - *ref_102
  - *ref_103
  - *ref_104
  - *ref_105
  - *ref_106
  - *ref_107
  - !<!StringSchema> 
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    defaultValue: search.windows.net
    language: !<!Languages> 
      default:
        name: String
        description: ''
    protocol: !<!Protocols> {}
  uuids:
  - *ref_30
globalParameters:
- !<!Parameter> &ref_109
  schema: *ref_1
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 1
    x-ms-skip-url-encoding: true
    x-name: searchServiceName
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: searchServiceName
      description: The name of the search service.
      serializedName: searchServiceName
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_110
  schema: *ref_1
  clientDefaultValue: search.windows.net
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 2
    x-ms-skip-url-encoding: true
    x-name: searchDnsSuffix
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: searchDnsSuffix
      description: The DNS suffix of the search service. The default is search.windows.net.
      serializedName: searchDnsSuffix
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_111
  schema: *ref_1
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 3
    x-ms-skip-url-encoding: false
    x-name: indexName
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: indexName
      description: The name of the index.
      serializedName: indexName
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_113
  schema: *ref_108
  implementation: Client
  required: true
  language: !<!Languages> 
    default:
      name: ApiVersion
      description: Api Version
      serializedName: api-version
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
info: !<!Info> 
  description: 'Client that can be used to query an index and upload, merge, or delete documents.'
  title: SearchIndexClient
operationGroups:
- !<!OperationGroup> 
  $key: Documents
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_112
      - *ref_113
      - *ref_114
      signatureParameters:
      - *ref_114
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/$count
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_115
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexCountDocuments:
          parameters:
            api-version: 2017-11-11-Preview
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body: 427
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: Count
        description: Queries the number of documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - !<!Parameter> &ref_134
        schema: *ref_24
        implementation: Method
        language: !<!Languages> 
          default:
            name: searchText
            description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
            serializedName: search
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_116
      - *ref_117
      - *ref_118
      - *ref_119
      - *ref_120
      - *ref_121
      - *ref_122
      - *ref_123
      - *ref_124
      - *ref_125
      - *ref_126
      - *ref_127
      - *ref_128
      - *ref_129
      - *ref_130
      - *ref_131
      - *ref_113
      - *ref_132
      - *ref_35
      - *ref_133
      signatureParameters:
      - *ref_134
      - *ref_35
      - *ref_133
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_135
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSearchDocumentsGet:
          parameters:
            $count: true
            $filter: rating gt 10
            $orderby:
            - search.score() desc
            - rating desc
            $select:
            - docId
            - title
            - description
            $skip: 100
            $top: 10
            api-version: '2019-05-06'
            facet:
            - 'category,count:10,sort:count'
            highlight:
            - title
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            queryType: simple
            scoringParameters:
            - 'currentLocation--122.123,44.77233'
            scoringProfile: sp
            search: nice hotels
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            - description
            searchMode: any
            searchServiceName: myservice
          responses:
            '200':
              body:
                '@odata.count': 25
                '@search.coverage': 80
                '@search.facets':
                  category:
                  - count: 1
                    value: Economy
                  - count: 1
                    value: Luxury
                value:
                - description: Cheapest hotel in town
                  '@search.highlights':
                    title:
                    - <em>Nice</em> <em>Hotel</em>
                  '@search.score': 1.5
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.highlights':
                    title:
                    - Fancy <em>Hotel</em>
                  '@search.score': 0.7
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SearchGet
        description: Searches for documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_113
      - *ref_136
      - !<!Parameter> &ref_138
        schema: *ref_5
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: searchRequest
        language: !<!Languages> 
          default:
            name: searchRequest
            description: The definition of the Search request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      - *ref_137
      signatureParameters:
      - *ref_138
      - *ref_137
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.search
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_135
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSearchDocumentsPost:
          parameters:
            api-version: '2019-05-06'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchRequest:
              count: true
              facets:
              - 'category,count:10,sort:count'
              filter: rating gt 4.0
              highlight: title
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: {}
              orderby: 'search.score() desc,rating desc'
              queryType: simple
              scoringParameters:
              - 'currentLocation--122.123,44.77233'
              scoringProfile: sp
              search: nice hotels
              searchFields: 'title,description'
              searchMode: any
              select: 'docId,title,description'
              skip: 0
              top: 10
            searchServiceName: myservice
          responses:
            '200':
              body:
                '@odata.count': 25
                '@odata.nextLink': 'https://myservice.search.windows.net/indexes(''myindex'')/docs/search.post.search?api-version=2019-05-06'
                '@search.facets':
                  category:
                  - count: 1
                    value: Economy
                  - count: 1
                    value: Luxury
                '@search.nextPageParameters':
                  count: true
                  facets:
                  - 'category,count:10,sort:count'
                  filter: rating gt 4.0
                  highlight: title
                  highlightPostTag: </em>
                  highlightPreTag: <em>
                  minimumCoverage: {}
                  orderby: 'search.score() desc,rating desc'
                  queryType: simple
                  scoringParameters:
                  - 'currentLocation--122.123,44.77233'
                  scoringProfile: sp
                  search: nice hotels
                  searchFields: 'title,description'
                  searchMode: any
                  select: 'docId,title,description'
                  skip: 2
                  top: 8
                value:
                - description: Cheapest hotel in town
                  '@search.highlights':
                    title:
                    - <em>Nice</em> <em>Hotel</em>
                  '@search.score': 1.5
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.highlights':
                    title:
                    - Fancy <em>Hotel</em>
                  '@search.score': 0.7
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: SearchPost
        description: Searches for documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - !<!Parameter> &ref_142
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: key
            description: The key of the document to retrieve.
            serializedName: key
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_143
        schema: *ref_139
        implementation: Method
        language: !<!Languages> 
          default:
            name: selectedFields
            description: List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
            serializedName: $select
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_113
      - *ref_140
      - *ref_141
      signatureParameters:
      - *ref_142
      - *ref_143
      - *ref_141
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/docs(''{key}'')'
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_144
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexGetDocument:
          parameters:
            $select:
            - docId
            - title
            - description
            api-version: '2019-05-06'
            indexName: myindex
            key: '1'
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
                description: Cheapest hotel in town
                docId: '1'
                title: Nice Hotel
    language: !<!Languages> 
      default:
        name: Get
        description: Retrieves a document from the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - !<!Parameter> &ref_156
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: searchText
            description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
            serializedName: search
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - !<!Parameter> &ref_157
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: suggesterName
            description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
            serializedName: suggesterName
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_145
      - *ref_146
      - *ref_147
      - *ref_148
      - *ref_149
      - *ref_150
      - *ref_151
      - *ref_152
      - *ref_153
      - *ref_113
      - *ref_154
      - *ref_46
      - *ref_155
      signatureParameters:
      - *ref_156
      - *ref_157
      - *ref_46
      - *ref_155
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/search.suggest
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_158
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSuggestDocumentsGet:
          parameters:
            $filter: rating gt 10
            $orderby:
            - search.score() desc
            - rating desc
            $select:
            - docId
            - title
            - description
            $top: 10
            api-version: '2019-05-06'
            fuzzy: false
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            search: hote
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            searchServiceName: myservice
            suggesterName: sg
          responses:
            '200':
              body:
                value:
                - description: Cheapest hotel in town
                  '@search.text': Nice <em>Hotel</em>
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.text': Fancy <em>Hotel</em>
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SuggestGet
        description: Suggests documents in the index that match the given partial query text.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_113
      - *ref_159
      - !<!Parameter> &ref_162
        schema: *ref_160
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: suggestRequest
        language: !<!Languages> 
          default:
            name: suggestRequest
            description: The Suggest request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      - *ref_161
      signatureParameters:
      - *ref_162
      - *ref_161
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.suggest
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_158
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSuggestDocumentsPost:
          parameters:
            api-version: '2019-05-06'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
            suggestRequest:
              filter: rating gt 4.0
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: 80
              orderby: rating desc
              search: hote
              searchFields: title
              select: 'docId,title,description'
              top: 10
          responses:
            '200':
              body:
                value:
                - description: Cheapest hotel in town
                  '@search.text': Nice <em>Hotel</em>
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.text': Fancy <em>Hotel</em>
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: SuggestPost
        description: Suggests documents in the index that match the given partial query text.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_113
      - *ref_163
      - !<!Parameter> &ref_165
        schema: *ref_164
        flattened: true
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: batch
        language: !<!Languages> 
          default:
            name: batch
            description: The batch of index actions.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      - !<!Parameter> &ref_168
        schema: *ref_22
        implementation: Method
        originalParameter: *ref_165
        pathToProperty: []
        required: true
        serializedName: value
        targetProperty: *ref_166
        language: !<!Languages> 
          default:
            name: actions
            description: The actions in the batch.
        protocol: !<!Protocols> {}
      - *ref_167
      signatureParameters:
      - *ref_168
      - *ref_167
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.index
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_169
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_169
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '207'
    extensions:
      x-ms-examples:
        SearchIndexIndexDocuments:
          parameters:
            api-version: '2019-05-06'
            batch:
              value:
              - description: Best hotel in town
                '@search.action': upload
                docId: '1'
                title: Fancy Stay
              - '@search.action': merge
                docId: '2'
                title: Roach Motel
              - '@search.action': mergeOrUpload
                docId: '3'
                title: Econo Motel
              - '@search.action': delete
                docId: '4'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
                value:
                - errorMessage: null
                  key: '1'
                  status: true
                  statusCode: 201
                - errorMessage: null
                  key: '2'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '3'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '4'
                  status: true
                  statusCode: 200
            '207':
              body:
                value:
                - errorMessage: null
                  key: '1'
                  status: true
                  statusCode: 200
                - errorMessage: Document not found.
                  key: '2'
                  status: false
                  statusCode: 404
                - errorMessage: null
                  key: '3'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '4'
                  status: true
                  statusCode: 200
      x-ms-request-id: request-id
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: Index
        description: Sends a batch of document write actions to the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_170
      - *ref_113
      - !<!Parameter> &ref_180
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: searchText
            description: The incomplete term which should be auto-completed.
            serializedName: search
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - !<!Parameter> &ref_181
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: suggesterName
            description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
            serializedName: suggesterName
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_171
      - *ref_172
      - *ref_173
      - *ref_174
      - *ref_175
      - *ref_176
      - *ref_177
      - *ref_178
      - *ref_179
      - *ref_52
      signatureParameters:
      - *ref_180
      - *ref_181
      - *ref_179
      - *ref_52
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/search.autocomplete
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_182
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexAutocompleteDocumentsGet:
          parameters:
            api-version: '2019-05-06'
            autocompleteMode: oneTerm
            filter: 'search.in(docId,''101,102,105'')'
            fuzzy: false
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            search: washington medic
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            - description
            searchServiceName: myservice
            suggesterName: sg
            top: 10
          responses:
            '200':
              body:
              - queryPlusText: washington medicaid
                text: medicaid
              - queryPlusText: washington medicare
                text: medicare
              - queryPlusText: washington medicine
                text: medicine
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: AutocompleteGet
        description: Autocompletes incomplete query terms based on input text and matching terms in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    request: !<!Request> 
      parameters:
      - *ref_109
      - *ref_110
      - *ref_111
      - *ref_183
      - *ref_113
      - !<!Parameter> &ref_186
        schema: *ref_184
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: autocompleteRequest
        language: !<!Languages> 
          default:
            name: autocompleteRequest
            description: The definition of the Autocomplete request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      - *ref_185
      signatureParameters:
      - *ref_186
      - *ref_185
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.autocomplete
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    responses:
    - !<!SchemaResponse> 
      schema: *ref_182
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexAutocompleteDocumentsPost:
          parameters:
            api-version: 2017-11-11-Preview
            autocompleteRequest:
              autocompleteMode: oneTerm
              filter: 'search.in(docId,''101,102,105'')'
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: 80
              search: washington medic
              searchFields: 'title,description'
              suggesterName: sg
              top: 10
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
              - queryPlusText: washington medicaid
                text: medicaid
              - queryPlusText: washington medicare
                text: medicare
              - queryPlusText: washington medicine
                text: medicine
      x-ms-request-id: request-id
      x-ms-requestBody-index: 2
    language: !<!Languages> 
      default:
        name: AutocompletePost
        description: Autocompletes incomplete query terms based on input text and matching terms in the index.
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: Documents
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: SearchIndexClient
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
