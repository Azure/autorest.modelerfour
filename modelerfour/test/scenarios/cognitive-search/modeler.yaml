!<!CodeModel> 
info: !<!Info> 
  description: 'Client that can be used to query an index and upload, merge, or delete documents.'
  title: SearchIndexClient
schemas: !<!Schemas> 
  booleans:
  - !<!BooleanSchema> &ref_93
    type: boolean
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: boolean
        description: ''
    protocol: !<!Protocols> {}
  - !<!BooleanSchema> &ref_33
    type: boolean
    language: !<!Languages> 
      default:
        name: IncludeTotalResultCount
        description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
    protocol: !<!Protocols> {}
  - !<!BooleanSchema> &ref_59
    type: boolean
    language: !<!Languages> 
      default:
        name: UseFuzzyMatching
        description: >-
          A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this
          provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
    protocol: !<!Protocols> {}
  - !<!BooleanSchema> &ref_25
    type: boolean
    language: !<!Languages> 
      default:
        name: Succeeded
        description: A value indicating whether the indexing operation succeeded for the document identified by the key.
    protocol: !<!Protocols> {}
  - !<!BooleanSchema> &ref_77
    type: boolean
    language: !<!Languages> 
      default:
        name: UseFuzzyMatching
        description: >-
          A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this
          provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
    protocol: !<!Protocols> {}
  numbers:
  - !<!NumberSchema> &ref_89
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    precision: 64
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_96
    type: number
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    precision: 64
    language: !<!Languages> 
      default:
        name: number
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_101
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_30
    type: integer
    precision: 64
    language: !<!Languages> 
      default:
        name: Count
        description: >-
          The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip
          parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_31
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: Coverage
        description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.'
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_7
    type: integer
    precision: 64
    language: !<!Languages> 
      default:
        name: integer
        description: The approximate count of documents falling within the bucket described by this facet.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_39
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: number
        description: >-
          A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for
          services with only one replica. The default is 100.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_48
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: >-
          The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter
          with a range query instead.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_49
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: >-
          The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation
          token that can be used to issue another Search request for the next page of results.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_12
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: Score
        description: The relevance score of the document compared to other documents returned by the query.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_56
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: Coverage
        description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.'
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_62
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: number
        description: >-
          A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
          for services with only one replica. The default is 80.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_67
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_26
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: >-
          The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version
          conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_80
    type: number
    precision: 64
    language: !<!Languages> 
      default:
        name: number
        description: >-
          A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
          for services with only one replica. The default is 80.
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_83
    type: integer
    precision: 32
    language: !<!Languages> 
      default:
        name: integer
        description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
    protocol: !<!Protocols> {}
  strings:
  - !<!StringSchema> &ref_0
    type: string
    language: !<!Languages> 
      default:
        name: string
        description: simple string
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_18
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: string
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_1
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-2-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_2
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-4-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_3
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-8-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_4
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-10-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_5
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-12-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_6
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-14-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_9
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-facetsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_35
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-filter
        description: The OData $filter expression to apply to the search query.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_36
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: HighlightFields
        description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_37
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-highlightPostTag
        description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_38
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-highlightPreTag
        description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_40
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: OrderBy
        description: >-
          The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
          followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by
          document match score. There can be at most 32 $orderby clauses.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_10
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-scoringParametersItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_43
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-scoringProfile
        description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_44
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchText
        description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_45
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-searchFields
        description: >-
          The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over
          any field names listed in this parameter.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_47
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchRequest-select
        description: 'The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_11
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchResult-@search.highlights-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_51
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: NextLink
        description: >-
          Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search
          response. Make sure to use the same verb (GET or POST) as the request that produced this response.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_16
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-1-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_17
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-7-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_19
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: get-9-itemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_20
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: Text
        description: The text of the suggestion result.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_58
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-filter
        description: An OData expression that filters the documents considered for suggestions.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_60
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-highlightPostTag
        description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_61
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-highlightPreTag
        description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_63
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchText
        description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_64
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-searchFields
        description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_65
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-select
        description: 'The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_66
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SuggestRequest-suggesterName
        description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_23
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: IndexingResult-key
        description: The key of a document that was in the indexing request.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_24
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: IndexingResult-errorMessage
        description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_27
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteItem-text
        description: The completed term.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_28
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteItem-queryPlusText
        description: The query along with the completed term.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_74
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: SearchText
        description: The search text on which to base autocomplete results.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_76
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteRequest-filter
        description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_78
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteRequest-highlightPostTag
        description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_79
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteRequest-highlightPreTag
        description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_81
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteRequest-searchFields
        description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_82
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: AutocompleteRequest-suggesterName
        description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
    protocol: !<!Protocols> {}
  - !<!StringSchema> 
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    defaultValue: search.windows.net
    language: !<!Languages> 
      default:
        name: string
        description: ''
    protocol: !<!Protocols> {}
  sealedChoices:
  - !<!SealedChoiceSchema> &ref_41
    choices:
    - !<!ChoiceValue> 
      value: simple
      language:
        default:
          name: simple
          description: ''
    - !<!ChoiceValue> 
      value: full
      language:
        default:
          name: full
          description: ''
    type: sealed-choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    choiceType: *ref_0
    language: !<!Languages> 
      default:
        name: QueryType
        description: ''
    protocol: !<!Protocols> {}
  - !<!SealedChoiceSchema> &ref_46
    choices:
    - !<!ChoiceValue> 
      value: any
      language:
        default:
          name: any
          description: ''
    - !<!ChoiceValue> 
      value: all
      language:
        default:
          name: all
          description: ''
    type: sealed-choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    choiceType: *ref_0
    language: !<!Languages> 
      default:
        name: SearchMode
        description: ''
    protocol: !<!Protocols> {}
  - !<!SealedChoiceSchema> &ref_29
    choices:
    - !<!ChoiceValue> 
      value: upload
      language:
        default:
          name: upload
          description: ''
    - !<!ChoiceValue> 
      value: merge
      language:
        default:
          name: merge
          description: ''
    - !<!ChoiceValue> 
      value: mergeOrUpload
      language:
        default:
          name: mergeOrUpload
          description: ''
    - !<!ChoiceValue> 
      value: delete
      language:
        default:
          name: delete
          description: ''
    type: sealed-choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    choiceType: *ref_0
    language: !<!Languages> 
      default:
        name: IndexActionType
        description: The operation to perform on a document in an indexing batch.
    protocol: !<!Protocols> {}
  - !<!SealedChoiceSchema> &ref_75
    choices:
    - !<!ChoiceValue> 
      value: oneTerm
      language:
        default:
          name: oneTerm
          description: ''
    - !<!ChoiceValue> 
      value: twoTerms
      language:
        default:
          name: twoTerms
          description: ''
    - !<!ChoiceValue> 
      value: oneTermWithContext
      language:
        default:
          name: oneTermWithContext
          description: ''
    type: sealed-choice
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    choiceType: *ref_0
    language: !<!Languages> 
      default:
        name: AutocompleteMode
        description: ''
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_87
    type: constant
    value: !<!ConstantValue> 
      value: '2019-05-06'
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: ApiVersion-2019-05-06
        description: Api Version (2019-05-06)
    protocol: !<!Protocols> {}
  dictionaries:
  - !<!DictionarySchema> &ref_8
    type: dictionary
    elementType: !<!AnySchema> &ref_14
      type: any
      language: !<!Languages> 
        default:
          name: any
          description: Any object
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: FacetResult
        description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_84
    type: dictionary
    elementType: !<!ArraySchema> &ref_32
      type: array
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      elementType: !<!ObjectSchema> &ref_52
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        parents: !<!Relations> 
          all:
          - *ref_8
          immediate:
          - *ref_8
        properties:
        - !<!Property> 
          schema: *ref_7
          readOnly: true
          serializedName: count
          language: !<!Languages> 
            default:
              name: count
              description: The approximate count of documents falling within the bucket described by this facet.
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - output
        language: !<!Languages> 
          default:
            name: FacetResult
            description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
            namespace: ''
        protocol: !<!Protocols> {}
      language: !<!Languages> 
        default:
          name: components·1039crn·schemas·documentsearchresult·properties·search-facets·additionalproperties
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Facets
        description: 'The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.'
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_15
    type: dictionary
    elementType: *ref_14
    language: !<!Languages> 
      default:
        name: SearchResult
        description: 'Contains a document found by a search query, plus associated metadata.'
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_85
    type: dictionary
    elementType: !<!ArraySchema> &ref_13
      type: array
      apiVersions:
      - !<!ApiVersion> 
        version: '2019-05-06'
      elementType: *ref_11
      language: !<!Languages> 
        default:
          name: components·1fouik0·schemas·searchresult·properties·search-highlights·additionalproperties
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Highlights
        description: 'Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.'
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_21
    type: dictionary
    elementType: *ref_14
    language: !<!Languages> 
      default:
        name: SuggestResult
        description: 'A result containing a document found by a suggestion query, plus associated metadata.'
    protocol: !<!Protocols> {}
  - !<!DictionarySchema> &ref_22
    type: dictionary
    elementType: *ref_14
    language: !<!Languages> 
      default:
        name: IndexAction
        description: Represents an index action that operates on a document.
    protocol: !<!Protocols> {}
  any:
  - *ref_14
  uuids:
  - !<!UuidSchema> &ref_86
    type: uuid
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    language: !<!Languages> 
      default:
        name: uuid
        description: ''
    protocol: !<!Protocols> {}
  objects:
  - !<!ObjectSchema> &ref_122
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: *ref_30
      readOnly: true
      serializedName: '@odata.count'
      language: !<!Languages> 
        default:
          name: Count
          description: >-
            The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip
            parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_31
      readOnly: true
      serializedName: '@search.coverage'
      language: !<!Languages> 
        default:
          name: Coverage
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_84
      readOnly: true
      serializedName: '@search.facets'
      language: !<!Languages> 
        default:
          name: Facets
          description: 'The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ObjectSchema> &ref_53
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        properties:
        - !<!Property> 
          schema: *ref_33
          serializedName: count
          language: !<!Languages> 
            default:
              name: IncludeTotalResultCount
              description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_34
            type: array
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            elementType: *ref_9
            language: !<!Languages> 
              default:
                name: SearchRequest-facets
                description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
            protocol: !<!Protocols> {}
          serializedName: facets
          language: !<!Languages> 
            default:
              name: facets
              description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_35
          serializedName: filter
          language: !<!Languages> 
            default:
              name: filter
              description: The OData $filter expression to apply to the search query.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_36
          serializedName: highlight
          language: !<!Languages> 
            default:
              name: HighlightFields
              description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_37
          serializedName: highlightPostTag
          language: !<!Languages> 
            default:
              name: highlightPostTag
              description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_38
          serializedName: highlightPreTag
          language: !<!Languages> 
            default:
              name: highlightPreTag
              description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_39
          serializedName: minimumCoverage
          language: !<!Languages> 
            default:
              name: minimumCoverage
              description: >-
                A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
                for services with only one replica. The default is 100.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_40
          serializedName: orderby
          language: !<!Languages> 
            default:
              name: OrderBy
              description: >-
                The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
                followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending
                by document match score. There can be at most 32 $orderby clauses.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_41
          serializedName: queryType
          language: !<!Languages> 
            default:
              name: queryType
              description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_42
            type: array
            apiVersions:
            - !<!ApiVersion> 
              version: '2019-05-06'
            elementType: *ref_10
            language: !<!Languages> 
              default:
                name: SearchRequest-scoringParameters
                description: >-
                  The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation'
                  the parameter string would be "mylocation--122.2,44.8" (without the quotes).
            protocol: !<!Protocols> {}
          serializedName: scoringParameters
          language: !<!Languages> 
            default:
              name: scoringParameters
              description: >-
                The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation'
                the parameter string would be "mylocation--122.2,44.8" (without the quotes).
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_43
          serializedName: scoringProfile
          language: !<!Languages> 
            default:
              name: scoringProfile
              description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_44
          serializedName: search
          language: !<!Languages> 
            default:
              name: SearchText
              description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_45
          serializedName: searchFields
          language: !<!Languages> 
            default:
              name: searchFields
              description: >-
                The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence
                over any field names listed in this parameter.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_46
          serializedName: searchMode
          language: !<!Languages> 
            default:
              name: searchMode
              description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_47
          serializedName: select
          language: !<!Languages> 
            default:
              name: select
              description: 'The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_48
          serializedName: skip
          language: !<!Languages> 
            default:
              name: skip
              description: >-
                The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and
                filter with a range query instead.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_49
          serializedName: top
          language: !<!Languages> 
            default:
              name: top
              description: >-
                The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a
                continuation token that can be used to issue another Search request for the next page of results.
          protocol: !<!Protocols> {}
        serializationFormats:
        - json
        usage:
        - input
        - output
        language: !<!Languages> 
          default:
            name: SearchRequest
            description: 'Parameters for filtering, sorting, faceting, paging, and other search query behaviors.'
            namespace: ''
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: '@search.nextPageParameters'
      language: !<!Languages> 
        default:
          name: NextPageParameters
          description: >-
            Continuation JSON payload returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get
            the next part of the search response.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!ArraySchema> &ref_50
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_54
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - *ref_15
            immediate:
            - *ref_15
          properties:
          - !<!Property> 
            schema: *ref_12
            nullable: false
            readOnly: true
            serializedName: '@search.score'
            language: !<!Languages> 
              default:
                name: Score
                description: The relevance score of the document compared to other documents returned by the query.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: *ref_85
            readOnly: true
            serializedName: '@search.highlights'
            language: !<!Languages> 
              default:
                name: Highlights
                description: 'Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.'
            protocol: !<!Protocols> {}
          serializationFormats:
          - json
          usage:
          - output
          language: !<!Languages> 
            default:
              name: SearchResult
              description: 'Contains a document found by a search query, plus associated metadata.'
              namespace: ''
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The sequence of results returned by the query.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: Results
          description: The sequence of results returned by the query.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_51
      readOnly: true
      serializedName: '@odata.nextLink'
      language: !<!Languages> 
        default:
          name: NextLink
          description: >-
            Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search
            response. Make sure to use the same verb (GET or POST) as the request that produced this response.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: DocumentSearchResult
        description: Response containing search results from an index.
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_52
  - *ref_53
  - *ref_54
  - !<!ObjectSchema> &ref_144
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_55
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_57
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - *ref_21
            immediate:
            - *ref_21
          properties:
          - !<!Property> 
            schema: *ref_20
            readOnly: true
            serializedName: '@search.text'
            language: !<!Languages> 
              default:
                name: Text
                description: The text of the suggestion result.
            protocol: !<!Protocols> {}
          serializationFormats:
          - json
          usage:
          - output
          language: !<!Languages> 
            default:
              name: SuggestResult
              description: 'A result containing a document found by a suggestion query, plus associated metadata.'
              namespace: ''
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The sequence of results returned by the query.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: Results
          description: The sequence of results returned by the query.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_56
      readOnly: true
      serializedName: '@search.coverage'
      language: !<!Languages> 
        default:
          name: Coverage
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.'
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: DocumentSuggestResult
        description: Response containing suggestion query results from an index.
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_57
  - !<!ObjectSchema> &ref_146
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: *ref_58
      serializedName: filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents considered for suggestions.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_59
      serializedName: fuzzy
      language: !<!Languages> 
        default:
          name: UseFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_60
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_61
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_62
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
            for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_40
      serializedName: orderby
      language: !<!Languages> 
        default:
          name: OrderBy
          description: >-
            The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be
            followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by
            document match score. There can be at most 32 $orderby clauses.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_63
      serializedName: search
      language: !<!Languages> 
        default:
          name: SearchText
          description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_64
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_65
      serializedName: select
      language: !<!Languages> 
        default:
          name: select
          description: 'The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_66
      serializedName: suggesterName
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_67
      serializedName: top
      language: !<!Languages> 
        default:
          name: top
          description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: SuggestRequest
        description: 'Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.'
        namespace: ''
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_149
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_68
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_69
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          parents: !<!Relations> 
            all:
            - *ref_22
            immediate:
            - *ref_22
          properties:
          - !<!Property> 
            schema: *ref_29
            serializedName: '@search.action'
            language: !<!Languages> 
              default:
                name: ActionType
                description: The operation to perform on a document in an indexing batch.
            protocol: !<!Protocols> {}
          serializationFormats:
          - json
          usage:
          - input
          language: !<!Languages> 
            default:
              name: IndexAction
              description: Represents an index action that operates on a document.
              namespace: ''
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Actions
            description: The actions in the batch.
        protocol: !<!Protocols> {}
      required: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: Actions
          description: The actions in the batch.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: IndexBatch
        description: Contains a batch of document write actions to send to the index.
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_69
  - !<!ObjectSchema> &ref_151
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_70
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_71
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          properties:
          - !<!Property> 
            schema: *ref_23
            readOnly: true
            serializedName: key
            language: !<!Languages> 
              default:
                name: key
                description: The key of a document that was in the indexing request.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: *ref_24
            readOnly: true
            serializedName: errorMessage
            language: !<!Languages> 
              default:
                name: errorMessage
                description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: *ref_25
            nullable: false
            readOnly: true
            serializedName: status
            language: !<!Languages> 
              default:
                name: Succeeded
                description: A value indicating whether the indexing operation succeeded for the document identified by the key.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: *ref_26
            nullable: false
            readOnly: true
            serializedName: statusCode
            language: !<!Languages> 
              default:
                name: statusCode
                description: >-
                  The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a
                  version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
            protocol: !<!Protocols> {}
          serializationFormats:
          - json
          usage:
          - output
          language: !<!Languages> 
            default:
              name: IndexingResult
              description: Status of an indexing operation for a single document.
              namespace: ''
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The list of status information for each document in the indexing request.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: Results
          description: The list of status information for each document in the indexing request.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: DocumentIndexResult
        description: Response containing the status of operations for all documents in the indexing request.
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_71
  - !<!ObjectSchema> &ref_164
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: !<!ArraySchema> &ref_72
        type: array
        apiVersions:
        - !<!ApiVersion> 
          version: '2019-05-06'
        elementType: !<!ObjectSchema> &ref_73
          type: object
          apiVersions:
          - !<!ApiVersion> 
            version: '2019-05-06'
          properties:
          - !<!Property> 
            schema: *ref_27
            readOnly: true
            serializedName: text
            language: !<!Languages> 
              default:
                name: text
                description: The completed term.
            protocol: !<!Protocols> {}
          - !<!Property> 
            schema: *ref_28
            readOnly: true
            serializedName: queryPlusText
            language: !<!Languages> 
              default:
                name: queryPlusText
                description: The query along with the completed term.
            protocol: !<!Protocols> {}
          serializationFormats:
          - json
          usage:
          - output
          language: !<!Languages> 
            default:
              name: AutocompleteItem
              description: The result of Autocomplete requests.
              namespace: ''
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: Results
            description: The list of returned Autocompleted items.
        protocol: !<!Protocols> {}
      readOnly: true
      serializedName: value
      language: !<!Languages> 
        default:
          name: Results
          description: The list of returned Autocompleted items.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - output
    language: !<!Languages> 
      default:
        name: AutocompleteResult
        description: The result of Autocomplete query.
        namespace: ''
    protocol: !<!Protocols> {}
  - *ref_73
  - !<!ObjectSchema> &ref_166
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    properties:
    - !<!Property> 
      schema: *ref_74
      serializedName: search
      language: !<!Languages> 
        default:
          name: SearchText
          description: The search text on which to base autocomplete results.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_75
      serializedName: autocompleteMode
      language: !<!Languages> 
        default:
          name: autocompleteMode
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_76
      serializedName: filter
      language: !<!Languages> 
        default:
          name: filter
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_77
      serializedName: fuzzy
      language: !<!Languages> 
        default:
          name: UseFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_78
      serializedName: highlightPostTag
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_79
      serializedName: highlightPreTag
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_80
      serializedName: minimumCoverage
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
            even for services with only one replica. The default is 80.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_81
      serializedName: searchFields
      language: !<!Languages> 
        default:
          name: searchFields
          description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_82
      serializedName: suggesterName
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: *ref_83
      serializedName: top
      language: !<!Languages> 
        default:
          name: top
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
      protocol: !<!Protocols> {}
    serializationFormats:
    - json
    usage:
    - input
    language: !<!Languages> 
      default:
        name: AutocompleteRequest
        description: 'Parameters for fuzzy matching, and other autocomplete query behaviors.'
        namespace: ''
    protocol: !<!Protocols> {}
  arrays:
  - !<!ArraySchema> &ref_94
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_1
    language: !<!Languages> 
      default:
        name: paths·1adzgki·docs·get·parameters·2·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_95
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_2
    language: !<!Languages> 
      default:
        name: paths·18nrber·docs·get·parameters·4·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_97
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_3
    language: !<!Languages> 
      default:
        name: paths·1qpycpw·docs·get·parameters·8·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_98
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_4
    language: !<!Languages> 
      default:
        name: paths·1fk4czm·docs·get·parameters·10·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_99
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_5
    language: !<!Languages> 
      default:
        name: paths·1ydkr4·docs·get·parameters·12·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_100
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_6
    language: !<!Languages> 
      default:
        name: paths·ittppp·docs·get·parameters·14·schema
        description: ''
    protocol: !<!Protocols> {}
  - *ref_32
  - *ref_34
  - *ref_42
  - *ref_13
  - *ref_50
  - !<!ArraySchema> &ref_125
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_16
    language: !<!Languages> 
      default:
        name: paths·12hj56k·docs-key·get·parameters·1·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_129
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_17
    language: !<!Languages> 
      default:
        name: paths·8sf5uk·docs-search-suggest·get·parameters·7·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_130
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_18
    language: !<!Languages> 
      default:
        name: paths·a27jtj·docs-search-suggest·get·parameters·8·schema
        description: ''
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_131
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_19
    language: !<!Languages> 
      default:
        name: paths·qhr0c7·docs-search-suggest·get·parameters·9·schema
        description: ''
    protocol: !<!Protocols> {}
  - *ref_55
  - *ref_68
  - *ref_70
  - !<!ArraySchema> &ref_152
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    elementType: *ref_18
    language: !<!Languages> 
      default:
        name: paths·2a1zqo·docs-search-autocomplete·get·parameters·10·schema
        description: ''
    protocol: !<!Protocols> {}
  - *ref_72
globalParameters:
- !<!Parameter> &ref_90
  schema: *ref_0
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 1
    x-ms-skip-url-encoding: true
    x-name: searchServiceName
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: searchServiceName
      description: The name of the search service.
      serializedName: searchServiceName
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_91
  schema: *ref_0
  clientDefaultValue: search.windows.net
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 2
    x-ms-skip-url-encoding: true
    x-name: searchDnsSuffix
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: searchDnsSuffix
      description: The DNS suffix of the search service. The default is search.windows.net.
      serializedName: searchDnsSuffix
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_92
  schema: *ref_0
  implementation: Client
  required: true
  extensions:
    x-in: path
    x-ms-priority: 3
    x-ms-skip-url-encoding: false
    x-name: indexName
    x-required: true
    x-type: string
  language: !<!Languages> 
    default:
      name: indexName
      description: The name of the index.
      serializedName: indexName
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
- !<!Parameter> &ref_102
  schema: *ref_87
  implementation: Client
  origin: 'modelerfour:synthesized/api-version'
  required: true
  language: !<!Languages> 
    default:
      name: ApiVersion
      description: Api Version
      serializedName: api-version
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
operationGroups:
- !<!OperationGroup> 
  $key: Documents
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_88
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: &ref_103
          name: search-request-options
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    - *ref_102
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/$count
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_88
    responses:
    - !<!SchemaResponse> 
      schema: *ref_89
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexCountDocuments:
          parameters:
            api-version: '2019-05-06'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body: 427
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: Count
        description: Queries the number of documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_104
      schema: *ref_18
      implementation: Method
      language: !<!Languages> 
        default:
          name: SearchText
          description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          serializedName: search
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_105
      schema: *ref_93
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: IncludeTotalResultCount
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          serializedName: $count
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_106
      schema: *ref_94
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: Facets
          description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
          serializedName: facet
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
          style: form
    - !<!Parameter> &ref_107
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: $filter
          description: The OData $filter expression to apply to the search query.
          serializedName: $filter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_108
      schema: *ref_95
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: HighlightFields
          description: The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          serializedName: highlight
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_109
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
          serializedName: highlightPostTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_110
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
          serializedName: highlightPreTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_111
      schema: *ref_96
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for
            services with only one replica. The default is 100.
          serializedName: minimumCoverage
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_112
      schema: *ref_97
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: OrderBy
          description: >-
            The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
            indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score.
            There can be at most 32 $orderby clauses.
          serializedName: $orderby
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_113
      schema: *ref_41
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: queryType
          description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
          serializedName: queryType
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_114
      schema: *ref_98
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: ScoringParameters
          description: >-
            The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the
            parameter string would be "mylocation--122.2,44.8" (without the quotes).
          serializedName: scoringParameter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
          style: form
    - !<!Parameter> &ref_115
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: scoringProfile
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
          serializedName: scoringProfile
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_116
      schema: *ref_99
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: searchFields
          description: >-
            The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field
            names listed in this parameter.
          serializedName: searchFields
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_117
      schema: *ref_46
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: searchMode
          description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
          serializedName: searchMode
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_118
      schema: *ref_100
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: $select
          description: 'The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
          serializedName: $select
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_119
      schema: *ref_101
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: $skip
          description: >-
            The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and
            $filter with a range query instead.
          serializedName: $skip
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_120
      schema: *ref_101
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SearchParameters
      language: !<!Languages> 
        default:
          name: $top
          description: >-
            The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation
            token that can be used to issue another Search request for the next page of results.
          serializedName: $top
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - *ref_102
    - !<!Parameter> &ref_121
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_104
    - *ref_105
    - *ref_106
    - *ref_107
    - *ref_108
    - *ref_109
    - *ref_110
    - *ref_111
    - *ref_112
    - *ref_113
    - *ref_114
    - *ref_115
    - *ref_116
    - *ref_117
    - *ref_118
    - *ref_119
    - *ref_120
    - *ref_121
    responses:
    - !<!SchemaResponse> 
      schema: *ref_122
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSearchDocumentsGet:
          parameters:
            $count: true
            $filter: rating gt 10
            $orderby:
            - search.score() desc
            - rating desc
            $select:
            - docId
            - title
            - description
            $skip: 100
            $top: 10
            api-version: '2019-05-06'
            facet:
            - 'category,count:10,sort:count'
            highlight:
            - title
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            queryType: simple
            scoringParameters:
            - 'currentLocation--122.123,44.77233'
            scoringProfile: sp
            search: nice hotels
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            - description
            searchMode: any
            searchServiceName: myservice
          responses:
            '200':
              body:
                '@odata.count': 25
                '@search.coverage': 80
                '@search.facets':
                  category:
                  - count: 1
                    value: Economy
                  - count: 1
                    value: Luxury
                value:
                - description: Cheapest hotel in town
                  '@search.highlights':
                    title:
                    - <em>Nice</em> <em>Hotel</em>
                  '@search.score': 1.5
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.highlights':
                    title:
                    - Fancy <em>Hotel</em>
                  '@search.score': 0.7
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SearchGet
        description: Searches for documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - *ref_102
    - !<!Parameter> &ref_123
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_124
        schema: *ref_53
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: searchRequest
            description: The definition of the Search request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_124
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.search
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_123
    responses:
    - !<!SchemaResponse> 
      schema: *ref_122
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSearchDocumentsPost:
          parameters:
            api-version: '2019-05-06'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchRequest:
              count: true
              facets:
              - 'category,count:10,sort:count'
              filter: rating gt 4.0
              highlight: title
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: null
              orderby: 'search.score() desc,rating desc'
              queryType: simple
              scoringParameters:
              - 'currentLocation--122.123,44.77233'
              scoringProfile: sp
              search: nice hotels
              searchFields: 'title,description'
              searchMode: any
              select: 'docId,title,description'
              skip: 0
              top: 10
            searchServiceName: myservice
          responses:
            '200':
              body:
                '@odata.count': 25
                '@odata.nextLink': 'https://myservice.search.windows.net/indexes(''myindex'')/docs/search.post.search?api-version=2019-05-06'
                '@search.facets':
                  category:
                  - count: 1
                    value: Economy
                  - count: 1
                    value: Luxury
                '@search.nextPageParameters':
                  count: true
                  facets:
                  - 'category,count:10,sort:count'
                  filter: rating gt 4.0
                  highlight: title
                  highlightPostTag: </em>
                  highlightPreTag: <em>
                  minimumCoverage: null
                  orderby: 'search.score() desc,rating desc'
                  queryType: simple
                  scoringParameters:
                  - 'currentLocation--122.123,44.77233'
                  scoringProfile: sp
                  search: nice hotels
                  searchFields: 'title,description'
                  searchMode: any
                  select: 'docId,title,description'
                  skip: 2
                  top: 8
                value:
                - description: Cheapest hotel in town
                  '@search.highlights':
                    title:
                    - <em>Nice</em> <em>Hotel</em>
                  '@search.score': 1.5
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.highlights':
                    title:
                    - Fancy <em>Hotel</em>
                  '@search.score': 0.7
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SearchPost
        description: Searches for documents in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_126
      schema: *ref_18
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: key
          description: The key of the document to retrieve.
          serializedName: key
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_127
      schema: *ref_125
      implementation: Method
      language: !<!Languages> 
        default:
          name: SelectedFields
          description: List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
          serializedName: $select
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - *ref_102
    - !<!Parameter> &ref_128
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/docs(''{key}'')'
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_126
    - *ref_127
    - *ref_128
    responses:
    - !<!SchemaResponse> 
      schema: *ref_14
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexGetDocument:
          parameters:
            $select:
            - docId
            - title
            - description
            api-version: '2019-05-06'
            indexName: myindex
            key: '1'
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
                description: Cheapest hotel in town
                docId: '1'
                title: Nice Hotel
    language: !<!Languages> 
      default:
        name: Get
        description: Retrieves a document from the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_132
      schema: *ref_18
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: SearchText
          description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
          serializedName: search
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_133
      schema: *ref_18
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          serializedName: suggesterName
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_134
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: $filter
          description: An OData expression that filters the documents considered for suggestions.
          serializedName: $filter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_135
      schema: *ref_93
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: UseFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides
            a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.
          serializedName: fuzzy
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_136
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
          serializedName: highlightPostTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_137
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
          serializedName: highlightPreTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_138
      schema: *ref_96
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even
            for services with only one replica. The default is 80.
          serializedName: minimumCoverage
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_139
      schema: *ref_129
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: OrderBy
          description: >-
            The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to
            indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score.
            There can be at most 32 $orderby clauses.
          serializedName: $orderby
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_140
      schema: *ref_130
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: searchFields
          description: The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
          serializedName: searchFields
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_141
      schema: *ref_131
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: $select
          description: 'The list of fields to retrieve. If unspecified, only the key field will be included in the results.'
          serializedName: $select
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_142
      schema: *ref_101
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: SuggestParameters
      language: !<!Languages> 
        default:
          name: $top
          description: The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
          serializedName: $top
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - *ref_102
    - !<!Parameter> &ref_143
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/search.suggest
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_132
    - *ref_133
    - *ref_134
    - *ref_135
    - *ref_136
    - *ref_137
    - *ref_138
    - *ref_139
    - *ref_140
    - *ref_141
    - *ref_142
    - *ref_143
    responses:
    - !<!SchemaResponse> 
      schema: *ref_144
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSuggestDocumentsGet:
          parameters:
            $filter: rating gt 10
            $orderby:
            - search.score() desc
            - rating desc
            $select:
            - docId
            - title
            - description
            $top: 10
            api-version: '2019-05-06'
            fuzzy: false
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            search: hote
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            searchServiceName: myservice
            suggesterName: sg
          responses:
            '200':
              body:
                value:
                - description: Cheapest hotel in town
                  '@search.text': Nice <em>Hotel</em>
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.text': Fancy <em>Hotel</em>
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SuggestGet
        description: Suggests documents in the index that match the given partial query text.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - *ref_102
    - !<!Parameter> &ref_145
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_147
        schema: *ref_146
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: suggestRequest
            description: The Suggest request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_147
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.suggest
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_145
    responses:
    - !<!SchemaResponse> 
      schema: *ref_144
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexSuggestDocumentsPost:
          parameters:
            api-version: '2019-05-06'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
            suggestRequest:
              filter: rating gt 4.0
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: 80
              orderby: rating desc
              search: hote
              searchFields: title
              select: 'docId,title,description'
              top: 10
          responses:
            '200':
              body:
                value:
                - description: Cheapest hotel in town
                  '@search.text': Nice <em>Hotel</em>
                  docId: '1'
                  title: Nice Hotel
                - description: Best hotel in town
                  '@search.text': Fancy <em>Hotel</em>
                  docId: '2'
                  title: Fancy Hotel
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: SuggestPost
        description: Suggests documents in the index that match the given partial query text.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - *ref_102
    - !<!Parameter> &ref_148
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_150
        schema: *ref_149
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: batch
            description: The batch of index actions.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_150
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.index
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_148
    responses:
    - !<!SchemaResponse> 
      schema: *ref_151
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_151
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '207'
    extensions:
      x-ms-examples:
        SearchIndexIndexDocuments:
          parameters:
            api-version: '2019-05-06'
            batch:
              value:
              - description: Best hotel in town
                '@search.action': upload
                docId: '1'
                title: Fancy Stay
              - '@search.action': merge
                docId: '2'
                title: Roach Motel
              - '@search.action': mergeOrUpload
                docId: '3'
                title: Econo Motel
              - '@search.action': delete
                docId: '4'
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
                value:
                - errorMessage: null
                  key: '1'
                  status: true
                  statusCode: 201
                - errorMessage: null
                  key: '2'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '3'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '4'
                  status: true
                  statusCode: 200
            '207':
              body:
                value:
                - errorMessage: null
                  key: '1'
                  status: true
                  statusCode: 200
                - errorMessage: Document not found.
                  key: '2'
                  status: false
                  statusCode: 404
                - errorMessage: null
                  key: '3'
                  status: true
                  statusCode: 200
                - errorMessage: null
                  key: '4'
                  status: true
                  statusCode: 200
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: Index
        description: Sends a batch of document write actions to the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_153
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    - *ref_102
    - !<!Parameter> &ref_154
      schema: *ref_18
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: SearchText
          description: The incomplete term which should be auto-completed.
          serializedName: search
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_155
      schema: *ref_18
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: suggesterName
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          serializedName: suggesterName
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_156
      schema: *ref_75
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: autocompleteMode
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
          serializedName: autocompleteMode
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_157
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: $filter
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
          serializedName: $filter
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_158
      schema: *ref_93
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: UseFuzzyMatching
          description: >-
            A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this
            provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
          serializedName: fuzzy
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_159
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: highlightPostTag
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
          serializedName: highlightPostTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_160
      schema: *ref_18
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: highlightPreTag
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
          serializedName: highlightPreTag
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_161
      schema: *ref_96
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: minimumCoverage
          description: >-
            A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability
            even for services with only one replica. The default is 80.
          serializedName: minimumCoverage
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_162
      schema: *ref_152
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: searchFields
          description: The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
          serializedName: searchFields
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    - !<!Parameter> &ref_163
      schema: *ref_101
      implementation: Method
      extensions:
        x-ms-parameter-grouping:
          name: AutocompleteParameters
      language: !<!Languages> 
        default:
          name: $top
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
          serializedName: $top
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /docs/search.autocomplete
          method: get
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_153
    - *ref_154
    - *ref_155
    - *ref_156
    - *ref_157
    - *ref_158
    - *ref_159
    - *ref_160
    - *ref_161
    - *ref_162
    - *ref_163
    responses:
    - !<!SchemaResponse> 
      schema: *ref_164
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexAutocompleteDocumentsGet:
          parameters:
            api-version: '2019-05-06'
            autocompleteMode: oneTerm
            filter: 'search.in(docId,''101,102,105'')'
            fuzzy: false
            highlightPostTag: </em>
            highlightPreTag: <em>
            indexName: myindex
            minimumCoverage: 80
            search: washington medic
            searchDnsSuffix: search.windows.net
            searchFields:
            - title
            - description
            searchServiceName: myservice
            suggesterName: sg
            top: 10
          responses:
            '200':
              body:
              - queryPlusText: washington medicaid
                text: medicaid
              - queryPlusText: washington medicare
                text: medicare
              - queryPlusText: washington medicine
                text: medicine
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: AutocompleteGet
        description: Autocompletes incomplete query terms based on input text and matching terms in the index.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: '2019-05-06'
    parameters:
    - *ref_90
    - *ref_91
    - *ref_92
    - !<!Parameter> &ref_165
      schema: *ref_86
      implementation: Method
      extensions:
        x-ms-client-request-id: true
        x-ms-parameter-grouping: *ref_103
      language: !<!Languages> 
        default:
          name: client-request-id
          description: The tracking ID sent with the request to help with debugging.
          serializedName: client-request-id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: header
    - *ref_102
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> &ref_167
        schema: *ref_166
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: autocompleteRequest
            description: The definition of the Autocomplete request.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      signatureParameters:
      - *ref_167
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /docs/search.post.autocomplete
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
          uri: 'https://{searchServiceName}.{searchDnsSuffix}/indexes(''{indexName}'')'
    signatureParameters:
    - *ref_165
    responses:
    - !<!SchemaResponse> 
      schema: *ref_164
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    extensions:
      x-ms-examples:
        SearchIndexAutocompleteDocumentsPost:
          parameters:
            api-version: '2019-05-06'
            autocompleteRequest:
              autocompleteMode: oneTerm
              filter: 'search.in(docId,''101,102,105'')'
              highlightPostTag: </em>
              highlightPreTag: <em>
              minimumCoverage: 80
              search: washington medic
              searchFields: 'title,description'
              suggesterName: sg
              top: 10
            indexName: myindex
            searchDnsSuffix: search.windows.net
            searchServiceName: myservice
          responses:
            '200':
              body:
              - queryPlusText: washington medicaid
                text: medicaid
              - queryPlusText: washington medicare
                text: medicare
              - queryPlusText: washington medicine
                text: medicine
      x-ms-request-id: request-id
    language: !<!Languages> 
      default:
        name: AutocompletePost
        description: Autocompletes incomplete query terms based on input text and matching terms in the index.
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: Documents
      description: ''
  protocol: !<!Protocols> {}
security: !<!Security> 
  authenticationRequired: false
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
