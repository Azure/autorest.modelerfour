{
 "openapi": "3.0.0",
 "info": {
  "title": "AutoRest Complex Test Service",
  "description": "Test Infrastructure for AutoRest",
  "version": "2016-02-29"
 },
 "paths": {
  "/complex/basic/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_getValid",
    "description": "Get complex type {id: 2, name: 'abc', color: 'YELLOW'}",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-valid·get·responses·200",
      "description": "Get complex type {id: 2, name: 'abc', color: 'YELLOW'}"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_putValid",
    "description": "Please put {id: 2, name: 'abc', color: 'Magenta'}",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-basic-valid·put·requestbody",
     "description": "Please put {id: 2, name: 'abc', color: 'Magenta'}"
    },
    "parameters": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/parameters/ApiVersionParameter"
     }
    ],
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/basic/invalid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_getInvalid",
    "description": "Get a basic complex type that is invalid for the local strong type",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-invalid·get·responses·200",
      "description": "Get complex types with basic property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-invalid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/basic/empty": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_getEmpty",
    "description": "Get a basic complex type that is empty",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-empty·get·responses·200",
      "description": "Get complex types with basic property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-empty·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/basic/null": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_getNull",
    "description": "Get a basic complex type whose properties are null",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-null·get·responses·200",
      "description": "Get complex types with basic property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-null·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/basic/notprovided": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "basic_getNotProvided",
    "description": "Get a basic complex type while the server doesn't provide a response payload",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-basic-notprovided·get·responses·200",
      "description": "Get complex types with basic property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-basic-notprovided·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/integer": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getInt",
    "description": "Get complex types with integer properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-integer·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-integer·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putInt",
    "description": "Put complex types with integer properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-integer·put·requestbody",
     "description": "Please put -1 and 2"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-integer·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-integer·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/long": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getLong",
    "description": "Get complex types with long properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-long·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-long·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putLong",
    "description": "Put complex types with long properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-long·put·requestbody",
     "description": "Please put 1099511627775 and -999511627788"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-long·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-long·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/float": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getFloat",
    "description": "Get complex types with float properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-float·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-float·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putFloat",
    "description": "Put complex types with float properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-float·put·requestbody",
     "description": "Please put 1.05 and -0.003"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-float·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-float·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/double": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getDouble",
    "description": "Get complex types with double properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-double·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-double·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putDouble",
    "description": "Put complex types with double properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-double·put·requestbody",
     "description": "Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-double·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-double·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/bool": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getBool",
    "description": "Get complex types with bool properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-bool·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-bool·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putBool",
    "description": "Put complex types with bool properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-bool·put·requestbody",
     "description": "Please put true and false"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-bool·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-bool·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/string": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getString",
    "description": "Get complex types with string properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-string·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-string·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putString",
    "description": "Put complex types with string properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-string·put·requestbody",
     "description": "Please put 'goodrequest', '', and null"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-string·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-string·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/date": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getDate",
    "description": "Get complex types with date properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-date·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-date·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putDate",
    "description": "Put complex types with date properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-date·put·requestbody",
     "description": "Please put '0001-01-01' and '2016-02-29'"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-date·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-date·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/datetime": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getDateTime",
    "description": "Get complex types with datetime properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-datetime·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-datetime·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putDateTime",
    "description": "Put complex types with datetime properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-datetime·put·requestbody",
     "description": "Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-datetime·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-datetime·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/datetimerfc1123": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getDateTimeRfc1123",
    "description": "Get complex types with datetimeRfc1123 properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-datetimerfc1123·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-datetimerfc1123·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putDateTimeRfc1123",
    "description": "Put complex types with datetimeRfc1123 properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-datetimerfc1123·put·requestbody",
     "description": "Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-datetimerfc1123·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-datetimerfc1123·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/duration": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getDuration",
    "description": "Get complex types with duration properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-duration·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-duration·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putDuration",
    "description": "Put complex types with duration properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-duration·put·requestbody",
     "description": "Please put 'P123DT22H14M12.011S'"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-duration·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-duration·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/primitive/byte": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_getByte",
    "description": "Get complex types with byte properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-byte·get·responses·200",
      "description": "Get complex types with primitive property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-byte·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "primitive_putByte",
    "description": "Put complex types with byte properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-primitive-byte·put·requestbody",
     "description": "Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-primitive-byte·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-primitive-byte·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/array/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "array_getValid",
    "description": "Get complex types with array property",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-array-valid·get·responses·200",
      "description": "Complex object with array property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-array-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "array_putValid",
    "description": "Put complex types with array property",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-array-valid·put·requestbody",
     "description": "Please put an array with 4 items: \"1, 2, 3, 4\", \"\", null, \"&S#$(*Y\", \"The quick brown fox jumps over the lazy dog\""
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-array-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-array-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/array/empty": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "array_getEmpty",
    "description": "Get complex types with array property which is empty",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-array-empty·get·responses·200",
      "description": "Complex object with array property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-array-empty·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "array_putEmpty",
    "description": "Put complex types with array property which is empty",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-array-empty·put·requestbody",
     "description": "Please put an empty array"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-array-empty·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-array-empty·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/array/notprovided": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "array_getNotProvided",
    "description": "Get complex types with array property while server doesn't provide a response payload",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-array-notprovided·get·responses·200",
      "description": "Complex object with array property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-array-notprovided·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/dictionary/typed/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_getValid",
    "description": "Get complex types with dictionary property",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-valid·get·responses·200",
      "description": "Complex object with dictionary property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_putValid",
    "description": "Put complex types with dictionary property",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-dictionary-typed-valid·put·requestbody",
     "description": "Please put a dictionary with 5 key-value pairs: \"txt\":\"notepad\", \"bmp\":\"mspaint\", \"xls\":\"excel\", \"exe\":\"\", \"\":null"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/dictionary/typed/empty": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_getEmpty",
    "description": "Get complex types with dictionary property which is empty",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-empty·get·responses·200",
      "description": "Complex object with dictionary property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-empty·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_putEmpty",
    "description": "Put complex types with dictionary property which is empty",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-dictionary-typed-empty·put·requestbody",
     "description": "Please put an empty dictionary"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-empty·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-empty·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/dictionary/typed/null": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_getNull",
    "description": "Get complex types with dictionary property which is null",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-null·get·responses·200",
      "description": "Complex object with dictionary property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-null·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/dictionary/typed/notprovided": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "dictionary_getNotProvided",
    "description": "Get complex types with dictionary property while server doesn't provide a response payload",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-notprovided·get·responses·200",
      "description": "Complex object with dictionary property"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-dictionary-typed-notprovided·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/inheritance/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "inheritance_getValid",
    "description": "Get complex types that extend others",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-inheritance-valid·get·responses·200",
      "description": "Complex object that extends cat and pet"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-inheritance-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "inheritance_putValid",
    "description": "Put complex types that extend others",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-inheritance-valid·put·requestbody",
     "description": "Please put a siamese with id=2, name=\"Siameee\", color=green, breed=persion, which hates 2 dogs, the 1st one named \"Potato\" with id=1 and food=\"tomato\", and the 2nd one named \"Tomato\" with id=-1 and food=\"french fries\"."
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-inheritance-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-inheritance-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_getValid",
    "description": "Get complex types that are polymorphic",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-valid·get·responses·200",
      "description": "Returns an object like this: {\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_putValid",
    "description": "Put complex types that are polymorphic",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-polymorphism-valid·put·requestbody",
     "description": "Please put a salmon that looks like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/dotsyntax": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_getDotSyntax",
    "description": "Get complex types that are polymorphic, JSON key contains a dot",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-dotsyntax·get·responses·200",
      "description": "Returns an object like where JSON key of discriminator contains a dot"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-dotsyntax·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/composedWithDiscriminator": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_getComposedWithDiscriminator",
    "description": "Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-composedwithdiscriminator·get·responses·200",
      "description": "Returns an object that composes a scalar polymorphic object and array of polymorphic objects with discriminator specified"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-composedwithdiscriminator·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/composedWithoutDiscriminator": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_getComposedWithoutDiscriminator",
    "description": "Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-composedwithoutdiscriminator·get·responses·200",
      "description": "Returns an object that composes a scalar polymorphic object and array of polymorphic objects without discriminator specified"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-composedwithoutdiscriminator·get·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/complicated": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_getComplicated",
    "description": "Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-complicated·get·responses·200",
      "description": "OK"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-complicated·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_putComplicated",
    "description": "Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-polymorphism-complicated·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-complicated·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-complicated·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/missingdiscriminator": {
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_putMissingDiscriminator",
    "description": "Put complex types that are polymorphic, omitting the discriminator",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-polymorphism-missingdiscriminator·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-missingdiscriminator·put·responses·200",
      "description": "Returns a salmon"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-missingdiscriminator·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphism/missingrequired/invalid": {
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphism_putValidMissingRequired",
    "description": "Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-polymorphism-missingrequired-invalid·put·requestbody",
     "description": "Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:\n{\n    \"fishtype\": \"sawshark\",\n    \"species\": \"snaggle toothed\",\n    \"length\": 18.5,\n    \"age\": 2,\n    \"birthday\": \"2013-06-01T01:00:00Z\",\n    \"location\": \"alaska\",\n    \"picture\": base64(FF FF FF FF FE),\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"birthday\": \"2012-01-05T01:00:00Z\",\n            \"length\": 20,\n            \"age\": 6\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"picture\": base64(FF FF FF FF FE),\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphism-missingrequired-invalid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphism-missingrequired-invalid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/polymorphicrecursive/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphicrecursive_getValid",
    "description": "Get complex types that are polymorphic and have recursive references",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphicrecursive-valid·get·responses·200",
      "description": "Complex object that extends cat and pet, returns a Salmon like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'species':'predator',\n            'length':20,\n            'siblings':[\n                {\n                    'fishtype':'Salmon',\n                    'location':'atlantic',\n                    'iswild':true,\n                    'species':'coho',\n                    'length':2,\n                    'siblings':[\n                      {\n                        'fishtype':'Shark',\n                        'age':6,\n                        'birthday': '2012-01-05T01:00:00Z',\n                        'species':'predator',\n                        'length':20\n                      },\n                      {\n                        'fishtype':'Sawshark',\n                        'age':105,\n                        'birthday': '1900-01-05T01:00:00Z',\n                        'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n                        'species':'dangerous',\n                        'length':10\n                      }\n                    ]\n                },\n                {\n                    'fishtype':'Sawshark',\n                    'age':105,\n                    'birthday': '1900-01-05T01:00:00Z',\n                    'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n                    'species':'dangerous',\n                    'length':10,\n                    'siblings':[]\n                }\n            ]\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n            'length':10,'siblings':[]\n          }\n        ]\n    };"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphicrecursive-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "polymorphicrecursive_putValid",
    "description": "Put complex types that are polymorphic and have recursive references",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-polymorphicrecursive-valid·put·requestbody",
     "description": "Please put a salmon that looks like this:\n{\n    \"fishtype\": \"salmon\",\n    \"species\": \"king\",\n    \"length\": 1,\n    \"age\": 1,\n    \"location\": \"alaska\",\n    \"iswild\": true,\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"length\": 20,\n            \"age\": 6,\n            \"siblings\": [\n                {\n                    \"fishtype\": \"salmon\",\n                    \"species\": \"coho\",\n                    \"length\": 2,\n                    \"age\": 2,\n                    \"location\": \"atlantic\",\n                    \"iswild\": true,\n                    \"siblings\": [\n                        {\n                            \"fishtype\": \"shark\",\n                            \"species\": \"predator\",\n                            \"length\": 20,\n                            \"age\": 6\n                        },\n                        {\n                            \"fishtype\": \"sawshark\",\n                            \"species\": \"dangerous\",\n                            \"length\": 10,\n                            \"age\": 105\n                        }\n                    ]\n                },\n                {\n                    \"fishtype\": \"sawshark\",\n                    \"species\": \"dangerous\",\n                    \"length\": 10,\n                    \"age\": 105\n                }\n            ]\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-polymorphicrecursive-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-polymorphicrecursive-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/readonlyproperty/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "readonlyproperty_getValid",
    "description": "Get complex types that have readonly properties",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-readonlyproperty-valid·get·responses·200",
      "description": "OK"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-readonlyproperty-valid·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "readonlyproperty_putValid",
    "description": "Put complex types that have readonly properties",
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·complex-readonlyproperty-valid·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-readonlyproperty-valid·put·responses·200",
      "description": "Empty Response"
     },
     "default": {
      "$ref": "#/components/responses/paths·complex-readonlyproperty-valid·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/complex/flatten/valid": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "flattencomplex_getValid",
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·complex-flatten-valid·get·responses·200",
      "description": "OK"
     }
    }
   }
  }
 },
 "components": {
  "responses": {
   "paths·complex-basic-valid·get·responses·200": {
    "description": "Get complex type {id: 2, name: 'abc', color: 'YELLOW'}",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    }
   },
   "paths·complex-basic-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-basic-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-basic-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-basic-invalid·get·responses·200": {
    "description": "Get complex types with basic property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    }
   },
   "paths·complex-basic-invalid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-basic-empty·get·responses·200": {
    "description": "Get complex types with basic property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    }
   },
   "paths·complex-basic-empty·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-basic-null·get·responses·200": {
    "description": "Get complex types with basic property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    }
   },
   "paths·complex-basic-null·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-basic-notprovided·get·responses·200": {
    "description": "Get complex types with basic property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    }
   },
   "paths·complex-basic-notprovided·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-integer·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/int-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-integer·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-integer·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-integer·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-long·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/long-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-long·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-long·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-long·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-float·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/float-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-float·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-float·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-float·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-double·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/double-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-double·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-double·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-double·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-bool·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/boolean-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-bool·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-bool·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-bool·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-string·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/string-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-string·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-string·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-string·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-date·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/date-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-date·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-date·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-date·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-datetime·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/datetime-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-datetime·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-datetime·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-datetime·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-datetimerfc1123·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/datetimerfc1123-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-datetimerfc1123·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-datetimerfc1123·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-datetimerfc1123·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-duration·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/duration-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-duration·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-duration·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-duration·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-byte·get·responses·200": {
    "description": "Get complex types with primitive property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/byte-wrapper"
      }
     }
    }
   },
   "paths·complex-primitive-byte·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-primitive-byte·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-primitive-byte·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-array-valid·get·responses·200": {
    "description": "Complex object with array property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/array-wrapper"
      }
     }
    }
   },
   "paths·complex-array-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-array-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-array-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-array-empty·get·responses·200": {
    "description": "Complex object with array property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/array-wrapper"
      }
     }
    }
   },
   "paths·complex-array-empty·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-array-empty·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-array-empty·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-array-notprovided·get·responses·200": {
    "description": "Complex object with array property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/array-wrapper"
      }
     }
    }
   },
   "paths·complex-array-notprovided·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-valid·get·responses·200": {
    "description": "Complex object with dictionary property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-dictionary-typed-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-empty·get·responses·200": {
    "description": "Complex object with dictionary property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-empty·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-empty·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-dictionary-typed-empty·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-null·get·responses·200": {
    "description": "Complex object with dictionary property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-null·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-notprovided·get·responses·200": {
    "description": "Complex object with dictionary property",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    }
   },
   "paths·complex-dictionary-typed-notprovided·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-inheritance-valid·get·responses·200": {
    "description": "Complex object that extends cat and pet",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/siamese"
      }
     }
    }
   },
   "paths·complex-inheritance-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-inheritance-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-inheritance-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-valid·get·responses·200": {
    "description": "Returns an object like this: {\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
      }
     }
    }
   },
   "paths·complex-polymorphism-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-polymorphism-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-dotsyntax·get·responses·200": {
    "description": "Returns an object like where JSON key of discriminator contains a dot",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFish"
      }
     }
    }
   },
   "paths·complex-polymorphism-dotsyntax·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-composedwithdiscriminator·get·responses·200": {
    "description": "Returns an object that composes a scalar polymorphic object and array of polymorphic objects with discriminator specified",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFishMarket"
      }
     }
    }
   },
   "paths·complex-polymorphism-composedwithdiscriminator·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-composedwithoutdiscriminator·get·responses·200": {
    "description": "Returns an object that composes a scalar polymorphic object and array of polymorphic objects without discriminator specified",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFishMarket"
      }
     }
    }
   },
   "paths·complex-polymorphism-composedwithoutdiscriminator·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-complicated·get·responses·200": {
    "description": "OK",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/salmon"
      }
     }
    }
   },
   "paths·complex-polymorphism-complicated·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-complicated·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-polymorphism-complicated·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-missingdiscriminator·put·responses·200": {
    "description": "Returns a salmon",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/salmon"
      }
     }
    }
   },
   "paths·complex-polymorphism-missingdiscriminator·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphism-missingrequired-invalid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-polymorphism-missingrequired-invalid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphicrecursive-valid·get·responses·200": {
    "description": "Complex object that extends cat and pet, returns a Salmon like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'species':'predator',\n            'length':20,\n            'siblings':[\n                {\n                    'fishtype':'Salmon',\n                    'location':'atlantic',\n                    'iswild':true,\n                    'species':'coho',\n                    'length':2,\n                    'siblings':[\n                      {\n                        'fishtype':'Shark',\n                        'age':6,\n                        'birthday': '2012-01-05T01:00:00Z',\n                        'species':'predator',\n                        'length':20\n                      },\n                      {\n                        'fishtype':'Sawshark',\n                        'age':105,\n                        'birthday': '1900-01-05T01:00:00Z',\n                        'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n                        'species':'dangerous',\n                        'length':10\n                      }\n                    ]\n                },\n                {\n                    'fishtype':'Sawshark',\n                    'age':105,\n                    'birthday': '1900-01-05T01:00:00Z',\n                    'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n                    'species':'dangerous',\n                    'length':10,\n                    'siblings':[]\n                }\n            ]\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n            'length':10,'siblings':[]\n          }\n        ]\n    };",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
      }
     }
    }
   },
   "paths·complex-polymorphicrecursive-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-polymorphicrecursive-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-polymorphicrecursive-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-readonlyproperty-valid·get·responses·200": {
    "description": "OK",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/readonly-obj"
      }
     }
    }
   },
   "paths·complex-readonlyproperty-valid·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-readonlyproperty-valid·put·responses·200": {
    "description": "Empty Response"
   },
   "paths·complex-readonlyproperty-valid·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·complex-flatten-valid·get·responses·200": {
    "description": "OK",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/MyBaseType"
      }
     }
    }
   }
  },
  "schemas": {
   "Error": {
    "type": "object",
    "properties": {
     "status": {
      "type": "integer",
      "format": "int32"
     },
     "message": {
      "$ref": "#/components/schemas/Error-message"
     }
    }
   },
   "Error-message": {
    "type": "string"
   },
   "basic": {
    "type": "object",
    "properties": {
     "id": {
      "type": "integer",
      "description": "Basic Id"
     },
     "name": {
      "$ref": "#/components/schemas/basic-name",
      "description": "Name property with a very long description that does not fit on a single line and a line break."
     },
     "color": {
      "$ref": "#/components/schemas/basic-color"
     }
    }
   },
   "basic-name": {
    "type": "string",
    "description": "Name property with a very long description that does not fit on a single line and a line break."
   },
   "basic-color": {
    "type": "string",
    "enum": [
     "cyan",
     "Magenta",
     "YELLOW",
     "blacK"
    ],
    "x-ms-enum": {
     "name": "CMYKColors",
     "modelAsString": true
    }
   },
   "pet": {
    "type": "object",
    "properties": {
     "id": {
      "type": "integer"
     },
     "name": {
      "$ref": "#/components/schemas/pet-name"
     }
    }
   },
   "pet-name": {
    "type": "string"
   },
   "cat": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/pet"
     }
    ],
    "type": "object",
    "properties": {
     "color": {
      "$ref": "#/components/schemas/cat-color"
     },
     "hates": {
      "$ref": "#/components/schemas/cat-hates"
     }
    }
   },
   "cat-color": {
    "type": "string"
   },
   "cat-hates": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dog"
    }
   },
   "siamese": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/cat"
     }
    ],
    "type": "object",
    "properties": {
     "breed": {
      "$ref": "#/components/schemas/siamese-breed"
     }
    }
   },
   "siamese-breed": {
    "type": "string"
   },
   "dog": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/pet"
     }
    ],
    "type": "object",
    "properties": {
     "food": {
      "$ref": "#/components/schemas/dog-food"
     }
    }
   },
   "dog-food": {
    "type": "string"
   },
   "DotFish": {
    "type": "object",
    "discriminator": {
     "propertyName": "fish.type"
    },
    "properties": {
     "fish.type": {
      "$ref": "#/components/schemas/DotFish-fish.type"
     },
     "species": {
      "$ref": "#/components/schemas/DotFish-species"
     }
    },
    "required": [
     "fish.type"
    ]
   },
   "DotFish-fish.type": {
    "type": "string"
   },
   "DotFish-species": {
    "type": "string"
   },
   "DotSalmon": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFish"
     }
    ],
    "type": "object",
    "properties": {
     "location": {
      "$ref": "#/components/schemas/DotSalmon-location"
     },
     "iswild": {
      "type": "boolean"
     }
    }
   },
   "DotSalmon-location": {
    "type": "string"
   },
   "DotFishMarket": {
    "properties": {
     "sampleSalmon": {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotSalmon"
     },
     "salmons": {
      "$ref": "#/components/schemas/DotFishMarket-salmons"
     },
     "sampleFish": {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFish"
     },
     "fishes": {
      "$ref": "#/components/schemas/DotFishMarket-fishes"
     }
    }
   },
   "DotFishMarket-salmons": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotSalmon"
    }
   },
   "DotFishMarket-fishes": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/DotFish"
    }
   },
   "Fish": {
    "type": "object",
    "discriminator": {
     "propertyName": "fishtype"
    },
    "properties": {
     "fishtype": {
      "$ref": "#/components/schemas/Fish-fishtype"
     },
     "species": {
      "$ref": "#/components/schemas/Fish-species"
     },
     "length": {
      "type": "number",
      "format": "float"
     },
     "siblings": {
      "$ref": "#/components/schemas/Fish-siblings"
     }
    },
    "required": [
     "fishtype",
     "length"
    ]
   },
   "Fish-fishtype": {
    "type": "string"
   },
   "Fish-species": {
    "type": "string"
   },
   "Fish-siblings": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
    }
   },
   "salmon": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
     }
    ],
    "type": "object",
    "properties": {
     "location": {
      "$ref": "#/components/schemas/salmon-location"
     },
     "iswild": {
      "type": "boolean"
     }
    }
   },
   "salmon-location": {
    "type": "string"
   },
   "smart_salmon": {
    "type": "object",
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/salmon"
     }
    ],
    "properties": {
     "college_degree": {
      "$ref": "#/components/schemas/smart_salmon-college_degree"
     }
    },
    "additionalProperties": {
     "$ref": "#/components/schemas/components·schemas·smart_salmon·additionalproperties"
    }
   },
   "smart_salmon-college_degree": {
    "type": "string"
   },
   "components·schemas·smart_salmon·additionalproperties": {
    "type": "object"
   },
   "shark": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
     }
    ],
    "type": "object",
    "properties": {
     "age": {
      "type": "integer",
      "format": "int32"
     },
     "birthday": {
      "$ref": "#/components/schemas/shark-birthday"
     }
    },
    "required": [
     "birthday"
    ]
   },
   "shark-birthday": {
    "type": "string",
    "format": "date-time"
   },
   "sawshark": {
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/shark"
     }
    ],
    "type": "object",
    "properties": {
     "picture": {
      "$ref": "#/components/schemas/sawshark-picture"
     }
    }
   },
   "sawshark-picture": {
    "type": "string",
    "format": "byte"
   },
   "goblinshark": {
    "x-ms-discriminator-value": "goblin",
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/shark"
     }
    ],
    "type": "object",
    "properties": {
     "jawsize": {
      "type": "integer"
     },
     "color": {
      "$ref": "#/components/schemas/goblinshark-color",
      "description": "Colors possible"
     }
    }
   },
   "goblinshark-color": {
    "type": "string",
    "description": "Colors possible",
    "enum": [
     "pink",
     "gray",
     "brown"
    ],
    "x-ms-enum": {
     "name": "GoblinSharkColor",
     "modelAsString": true
    },
    "default": "gray"
   },
   "cookiecuttershark": {
    "type": "object",
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/shark"
     }
    ]
   },
   "int-wrapper": {
    "type": "object",
    "properties": {
     "field1": {
      "type": "integer",
      "format": "int32"
     },
     "field2": {
      "type": "integer",
      "format": "int32"
     }
    }
   },
   "long-wrapper": {
    "type": "object",
    "properties": {
     "field1": {
      "type": "integer",
      "format": "int64"
     },
     "field2": {
      "type": "integer",
      "format": "int64"
     }
    }
   },
   "float-wrapper": {
    "type": "object",
    "properties": {
     "field1": {
      "type": "number",
      "format": "float"
     },
     "field2": {
      "type": "number",
      "format": "float"
     }
    }
   },
   "double-wrapper": {
    "type": "object",
    "properties": {
     "field1": {
      "type": "number",
      "format": "double"
     },
     "field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose": {
      "type": "number",
      "format": "double"
     }
    }
   },
   "boolean-wrapper": {
    "type": "object",
    "properties": {
     "field_true": {
      "type": "boolean"
     },
     "field_false": {
      "type": "boolean"
     }
    }
   },
   "string-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/string-wrapper-field"
     },
     "empty": {
      "$ref": "#/components/schemas/string-wrapper-empty"
     },
     "null": {
      "$ref": "#/components/schemas/string-wrapper-null"
     }
    }
   },
   "string-wrapper-field": {
    "type": "string"
   },
   "string-wrapper-empty": {
    "type": "string"
   },
   "string-wrapper-null": {
    "type": "string"
   },
   "date-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/date-wrapper-field"
     },
     "leap": {
      "$ref": "#/components/schemas/date-wrapper-leap"
     }
    }
   },
   "date-wrapper-field": {
    "type": "string",
    "format": "date"
   },
   "date-wrapper-leap": {
    "type": "string",
    "format": "date"
   },
   "datetime-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/datetime-wrapper-field"
     },
     "now": {
      "$ref": "#/components/schemas/datetime-wrapper-now"
     }
    }
   },
   "datetime-wrapper-field": {
    "type": "string",
    "format": "date-time"
   },
   "datetime-wrapper-now": {
    "type": "string",
    "format": "date-time"
   },
   "datetimerfc1123-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/datetimerfc1123-wrapper-field"
     },
     "now": {
      "$ref": "#/components/schemas/datetimerfc1123-wrapper-now"
     }
    }
   },
   "datetimerfc1123-wrapper-field": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "datetimerfc1123-wrapper-now": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "duration-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/duration-wrapper-field"
     }
    }
   },
   "duration-wrapper-field": {
    "type": "string",
    "format": "duration"
   },
   "byte-wrapper": {
    "type": "object",
    "properties": {
     "field": {
      "$ref": "#/components/schemas/byte-wrapper-field"
     }
    }
   },
   "byte-wrapper-field": {
    "type": "string",
    "format": "byte"
   },
   "array-wrapper": {
    "type": "object",
    "properties": {
     "array": {
      "$ref": "#/components/schemas/array-wrapper-array"
     }
    }
   },
   "array-wrapper-array": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/array-wrapper-arrayItem"
    }
   },
   "array-wrapper-arrayItem": {
    "type": "string"
   },
   "dictionary-wrapper": {
    "type": "object",
    "properties": {
     "defaultProgram": {
      "$ref": "#/components/schemas/dictionary-wrapper-defaultProgram"
     }
    }
   },
   "dictionary-wrapper-defaultProgram": {
    "type": "object",
    "additionalProperties": {
     "$ref": "#/components/schemas/components·schemas·dictionary_wrapper·properties·defaultprogram·additionalproperties"
    }
   },
   "components·schemas·dictionary_wrapper·properties·defaultprogram·additionalproperties": {
    "type": "string"
   },
   "readonly-obj": {
    "type": "object",
    "properties": {
     "id": {
      "$ref": "#/components/schemas/readonly-obj-id",
      "readOnly": true
     },
     "size": {
      "type": "integer",
      "format": "int32"
     }
    }
   },
   "readonly-obj-id": {
    "type": "string",
    "readOnly": true
   },
   "MyKind": {
    "type": "string",
    "enum": [
     "Kind1"
    ],
    "x-ms-enum": {
     "name": "MyKind",
     "modelAsString": true,
     "values": [
      {
       "value": "Kind1"
      }
     ]
    }
   },
   "MyBaseHelperType": {
    "type": "object",
    "properties": {
     "propBH1": {
      "$ref": "#/components/schemas/MyBaseHelperType-propBH1"
     }
    }
   },
   "MyBaseHelperType-propBH1": {
    "type": "string"
   },
   "MyBaseType": {
    "type": "object",
    "discriminator": {
     "propertyName": "kind"
    },
    "properties": {
     "kind": {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/MyKind"
     },
     "propB1": {
      "$ref": "#/components/schemas/MyBaseType-propB1"
     },
     "helper": {
      "x-ms-client-flatten": true,
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/MyBaseHelperType"
     }
    },
    "required": [
     "kind"
    ]
   },
   "MyBaseType-propB1": {
    "type": "string"
   },
   "MyDerivedType": {
    "type": "object",
    "allOf": [
     {
      "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/MyBaseType"
     }
    ],
    "x-ms-discriminator-value": "Kind1",
    "properties": {
     "propD1": {
      "$ref": "#/components/schemas/MyDerivedType-propD1"
     }
    }
   },
   "MyDerivedType-propD1": {
    "type": "string"
   }
  },
  "requestBodies": {
   "paths·complex-basic-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/basic"
      }
     }
    },
    "required": true,
    "description": "Please put {id: 2, name: 'abc', color: 'Magenta'}",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-integer·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/int-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put -1 and 2",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-long·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/long-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 1099511627775 and -999511627788",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-float·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/float-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 1.05 and -0.003",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-double·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/double-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-bool·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/boolean-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put true and false",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-string·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/string-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 'goodrequest', '', and null",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-date·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/date-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put '0001-01-01' and '2016-02-29'",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-datetime·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/datetime-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-datetimerfc1123·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/datetimerfc1123-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-duration·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/duration-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put 'P123DT22H14M12.011S'",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-primitive-byte·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/byte-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-array-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/array-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put an array with 4 items: \"1, 2, 3, 4\", \"\", null, \"&S#$(*Y\", \"The quick brown fox jumps over the lazy dog\"",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-array-empty·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/array-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put an empty array",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-dictionary-typed-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put a dictionary with 5 key-value pairs: \"txt\":\"notepad\", \"bmp\":\"mspaint\", \"xls\":\"excel\", \"exe\":\"\", \"\":null",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-dictionary-typed-empty·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/dictionary-wrapper"
      }
     }
    },
    "required": true,
    "description": "Please put an empty dictionary",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-inheritance-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/siamese"
      }
     }
    },
    "required": true,
    "description": "Please put a siamese with id=2, name=\"Siameee\", color=green, breed=persion, which hates 2 dogs, the 1st one named \"Potato\" with id=1 and food=\"tomato\", and the 2nd one named \"Tomato\" with id=-1 and food=\"french fries\".",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-polymorphism-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
      }
     }
    },
    "required": true,
    "description": "Please put a salmon that looks like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-polymorphism-complicated·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/salmon"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-polymorphism-missingdiscriminator·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/salmon"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-polymorphism-missingrequired-invalid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
      }
     }
    },
    "required": true,
    "description": "Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:\n{\n    \"fishtype\": \"sawshark\",\n    \"species\": \"snaggle toothed\",\n    \"length\": 18.5,\n    \"age\": 2,\n    \"birthday\": \"2013-06-01T01:00:00Z\",\n    \"location\": \"alaska\",\n    \"picture\": base64(FF FF FF FF FE),\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"birthday\": \"2012-01-05T01:00:00Z\",\n            \"length\": 20,\n            \"age\": 6\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"picture\": base64(FF FF FF FF FE),\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-polymorphicrecursive-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/Fish"
      }
     }
    },
    "required": true,
    "description": "Please put a salmon that looks like this:\n{\n    \"fishtype\": \"salmon\",\n    \"species\": \"king\",\n    \"length\": 1,\n    \"age\": 1,\n    \"location\": \"alaska\",\n    \"iswild\": true,\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"length\": 20,\n            \"age\": 6,\n            \"siblings\": [\n                {\n                    \"fishtype\": \"salmon\",\n                    \"species\": \"coho\",\n                    \"length\": 2,\n                    \"age\": 2,\n                    \"location\": \"atlantic\",\n                    \"iswild\": true,\n                    \"siblings\": [\n                        {\n                            \"fishtype\": \"shark\",\n                            \"species\": \"predator\",\n                            \"length\": 20,\n                            \"age\": 6\n                        },\n                        {\n                            \"fishtype\": \"sawshark\",\n                            \"species\": \"dangerous\",\n                            \"length\": 10,\n                            \"age\": 105\n                        }\n                    ]\n                },\n                {\n                    \"fishtype\": \"sawshark\",\n                    \"species\": \"dangerous\",\n                    \"length\": 10,\n                    \"age\": 105\n                }\n            ]\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}",
    "x-ms-requestBody-name": "complexBody"
   },
   "paths·complex-readonlyproperty-valid·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/body-complex.json#/components/schemas/readonly-obj"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "complexBody"
   }
  },
  "parameters": {
   "ApiVersionParameter": {
    "name": "api-version",
    "in": "query",
    "description": "API ID.",
    "schema": {
     "enum": [
      "2014-04-01-preview"
     ],
     "type": "string"
    },
    "required": true
   }
  }
 },
 "servers": [
  {
   "url": "http://localhost:3000/"
  }
 ]
}