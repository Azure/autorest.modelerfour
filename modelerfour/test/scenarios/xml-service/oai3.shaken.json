{
 "openapi": "3.0.0",
 "info": {
  "title": "AutoRest Swagger BAT XML Service",
  "description": "Test Infrastructure for AutoRest Swagger BAT",
  "version": "1.0.0"
 },
 "paths": {
  "/xml/complex-type-ref-no-meta": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getComplexTypeRefNoMeta",
    "description": "Get a complex type that has a ref to a complex type with no XML node",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-complex_type_ref_no_meta·get·responses·200",
      "description": "The empty list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putComplexTypeRefNoMeta",
    "description": "Puts a complex type that has a ref to a complex type with no XML node",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-complex_type_ref_no_meta·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-complex_type_ref_no_meta·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/complex-type-ref-with-meta": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getComplexTypeRefWithMeta",
    "description": "Get a complex type that has a ref to a complex type with XML node",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-complex_type_ref_with_meta·get·responses·200",
      "description": "The empty list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putComplexTypeRefWithMeta",
    "description": "Puts a complex type that has a ref to a complex type with XML node",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-complex_type_ref_with_meta·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-complex_type_ref_with_meta·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/simple": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getSimple",
    "description": "Get a simple XML document",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-simple·get·responses·200",
      "description": "The simple XML document"
     },
     "default": {
      "$ref": "#/components/responses/paths·xml-simple·get·responses·default",
      "description": "Unexpected error"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putSimple",
    "description": "Put a simple XML document",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-simple·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-simple·put·responses·201",
      "description": "Indicates success"
     },
     "default": {
      "$ref": "#/components/responses/paths·xml-simple·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/xml/wrapped-lists": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getWrappedLists",
    "description": "Get an XML document with multiple wrapped lists",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-wrapped_lists·get·responses·200",
      "description": "The XML document with multiple wrapped lists"
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putWrappedLists",
    "description": "Put an XML document with multiple wrapped lists",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-wrapped_lists·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-wrapped_lists·put·responses·201",
      "description": "Indicates success"
     },
     "default": {
      "$ref": "#/components/responses/paths·xml-wrapped_lists·put·responses·default",
      "description": "Unexpected error"
     }
    }
   }
  },
  "/xml/headers": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getHeaders",
    "description": "Get strongly-typed response headers.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-headers·get·responses·200",
      "description": "The response header."
     }
    }
   }
  },
  "/xml/empty-list": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getEmptyList",
    "description": "Get an empty list.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-empty_list·get·responses·200",
      "description": "The empty list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putEmptyList",
    "description": "Puts an empty list.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-empty_list·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-empty_list·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/empty-wrapped-lists": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getEmptyWrappedLists",
    "description": "Gets some empty wrapped lists.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-empty_wrapped_lists·get·responses·200",
      "description": "The empty lists."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putEmptyWrappedLists",
    "description": "Puts some empty wrapped lists.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-empty_wrapped_lists·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-empty_wrapped_lists·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/root-list": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getRootList",
    "description": "Gets a list as the root element.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-root_list·get·responses·200",
      "description": "The root list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putRootList",
    "description": "Puts a list as the root element.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-root_list·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-root_list·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/root-list-single-item": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getRootListSingleItem",
    "description": "Gets a list with a single item.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-root_list_single_item·get·responses·200",
      "description": "The root list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putRootListSingleItem",
    "description": "Puts a list with a single item.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-root_list_single_item·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-root_list_single_item·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/empty-root-list": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getEmptyRootList",
    "description": "Gets an empty list as the root element.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-empty_root_list·get·responses·200",
      "description": "The root list."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putEmptyRootList",
    "description": "Puts an empty list as the root element.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-empty_root_list·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-empty_root_list·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/empty-child-element": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getEmptyChildElement",
    "description": "Gets an XML document with an empty child element.",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-empty_child_element·get·responses·200",
      "description": "The unknown banana."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putEmptyChildElement",
    "description": "Puts a value with an empty child element.",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-empty_child_element·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-empty_child_element·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/?comp=list": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_listContainers",
    "description": "Lists containers in a storage account.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-comp-list·get·parameters·0"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-comp-list·get·responses·200",
      "description": "A list of containers."
     }
    }
   }
  },
  "/xml/?comp=properties&restype=service": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getServiceProperties",
    "description": "Gets storage service properties.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-comp-properties-restype-service·get·parameters·0"
     },
     {
      "$ref": "#/components/parameters/paths·xml-comp-properties-restype-service·get·parameters·1"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-comp-properties-restype-service·get·responses·200",
      "description": "The storage service properties."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putServiceProperties",
    "description": "Puts storage service properties.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-comp-properties-restype-service·put·parameters·0"
     },
     {
      "$ref": "#/components/parameters/paths·xml-comp-properties-restype-service·put·parameters·1"
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-comp-properties-restype-service·put·requestbody"
    },
    "x-ms-requestBody-index": 2,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-comp-properties-restype-service·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/mycontainer?comp=acl&restype=container": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_getAcls",
    "description": "Gets storage ACLs for a container.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-acl-restype-container·get·parameters·0"
     },
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-acl-restype-container·get·parameters·1"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-mycontainer-comp-acl-restype-container·get·responses·200",
      "description": "The storage ACLs."
     }
    }
   },
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_putAcls",
    "description": "Puts storage ACLs for a container.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-acl-restype-container·put·parameters·0"
     },
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-acl-restype-container·put·parameters·1"
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-mycontainer-comp-acl-restype-container·put·requestbody"
    },
    "x-ms-requestBody-index": 2,
    "responses": {
     "201": {
      "$ref": "#/components/responses/paths·xml-mycontainer-comp-acl-restype-container·put·responses·201",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/mycontainer?comp=list&restype=container": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_listBlobs",
    "description": "Lists blobs in a storage container.",
    "tags": [
     "XML Operations"
    ],
    "parameters": [
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-list-restype-container·get·parameters·0"
     },
     {
      "$ref": "#/components/parameters/paths·xml-mycontainer-comp-list-restype-container·get·parameters·1"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-mycontainer-comp-list-restype-container·get·responses·200",
      "description": "A list of containers."
     }
    }
   }
  },
  "/xml/jsoninput": {
   "put": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_jsonInput",
    "description": "A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42",
    "tags": [
     "XML Operations"
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/paths·xml-jsoninput·put·requestbody"
    },
    "x-ms-requestBody-index": 0,
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-jsoninput·put·responses·200",
      "description": "Indicates success."
     }
    }
   }
  },
  "/xml/jsonoutput": {
   "get": {
    "servers": [
     {
      "url": "http://localhost:3000/"
     }
    ],
    "operationId": "xml_jsonOutput",
    "description": "A Swagger with XML that has one operation that returns JSON. ID number 42",
    "tags": [
     "XML Operations"
    ],
    "responses": {
     "200": {
      "$ref": "#/components/responses/paths·xml-jsonoutput·get·responses·200",
      "description": "Indicates success."
     }
    }
   }
  }
 },
 "components": {
  "responses": {
   "paths·xml-complex_type_ref_no_meta·get·responses·200": {
    "description": "The empty list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RootWithRefAndNoMeta"
      }
     }
    }
   },
   "paths·xml-complex_type_ref_no_meta·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-complex_type_ref_with_meta·get·responses·200": {
    "description": "The empty list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RootWithRefAndMeta"
      }
     }
    }
   },
   "paths·xml-complex_type_ref_with_meta·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-simple·get·responses·200": {
    "description": "The simple XML document",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Slideshow"
      }
     }
    }
   },
   "paths·xml-simple·get·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·xml-simple·put·responses·201": {
    "description": "Indicates success"
   },
   "paths·xml-simple·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·xml-wrapped_lists·get·responses·200": {
    "description": "The XML document with multiple wrapped lists",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AppleBarrel"
      }
     }
    }
   },
   "paths·xml-wrapped_lists·put·responses·201": {
    "description": "Indicates success"
   },
   "paths·xml-wrapped_lists·put·responses·default": {
    "description": "Unexpected error",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Error"
      }
     }
    }
   },
   "paths·xml-headers·get·responses·200": {
    "description": "The response header.",
    "headers": {
     "Custom-Header": {
      "$ref": "#/components/headers/paths·xml-headers·get·responses·200·headers·custom_header",
      "description": "A custom response header."
     }
    }
   },
   "paths·xml-empty_list·get·responses·200": {
    "description": "The empty list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Slideshow"
      }
     }
    }
   },
   "paths·xml-empty_list·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-empty_wrapped_lists·get·responses·200": {
    "description": "The empty lists.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AppleBarrel"
      }
     }
    }
   },
   "paths·xml-empty_wrapped_lists·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-root_list·get·responses·200": {
    "description": "The root list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-root_list·get·responses·200·content·application-xml·schema"
      }
     }
    }
   },
   "paths·xml-root_list·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-root_list_single_item·get·responses·200": {
    "description": "The root list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-root_list_single_item·get·responses·200·content·application-xml·schema"
      }
     }
    }
   },
   "paths·xml-root_list_single_item·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-empty_root_list·get·responses·200": {
    "description": "The root list.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-empty_root_list·get·responses·200·content·application-xml·schema"
      }
     }
    }
   },
   "paths·xml-empty_root_list·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-empty_child_element·get·responses·200": {
    "description": "The unknown banana.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
      }
     }
    }
   },
   "paths·xml-empty_child_element·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-comp-list·get·responses·200": {
    "description": "A list of containers.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ListContainersResponse"
      }
     }
    }
   },
   "paths·xml-comp-properties-restype-service·get·responses·200": {
    "description": "The storage service properties.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/StorageServiceProperties"
      }
     }
    }
   },
   "paths·xml-comp-properties-restype-service·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-mycontainer-comp-acl-restype-container·get·responses·200": {
    "description": "The storage ACLs.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/SignedIdentifiers"
      }
     }
    }
   },
   "paths·xml-mycontainer-comp-acl-restype-container·put·responses·201": {
    "description": "Indicates success."
   },
   "paths·xml-mycontainer-comp-list-restype-container·get·responses·200": {
    "description": "A list of containers.",
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ListBlobsResponse"
      }
     }
    }
   },
   "paths·xml-jsoninput·put·responses·200": {
    "description": "Indicates success."
   },
   "paths·xml-jsonoutput·get·responses·200": {
    "description": "Indicates success.",
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/JSONOutput"
      }
     }
    }
   }
  },
  "schemas": {
   "paths·xml-headers·get·responses·200·headers·custom_header·schema": {
    "type": "string"
   },
   "paths·xml-root_list·get·responses·200·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas"
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "paths·xml-root_list·put·requestbody·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas",
     "wrapped": true
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "paths·xml-root_list_single_item·get·responses·200·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas"
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "paths·xml-root_list_single_item·put·requestbody·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas",
     "wrapped": true
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "paths·xml-empty_root_list·get·responses·200·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas"
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "paths·xml-empty_root_list·put·requestbody·content·application-xml·schema": {
    "type": "array",
    "xml": {
     "name": "bananas",
     "wrapped": true
    },
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
    }
   },
   "JSONInput": {
    "properties": {
     "id": {
      "type": "integer"
     }
    }
   },
   "JSONOutput": {
    "properties": {
     "id": {
      "type": "integer"
     }
    }
   },
   "Error": {
    "properties": {
     "status": {
      "type": "integer",
      "format": "int32"
     },
     "message": {
      "$ref": "#/components/schemas/Error-message"
     }
    }
   },
   "Error-message": {
    "type": "string"
   },
   "Slide": {
    "type": "object",
    "description": "A slide in a slideshow",
    "properties": {
     "type": {
      "$ref": "#/components/schemas/Slide-type"
     },
     "title": {
      "$ref": "#/components/schemas/Slide-title"
     },
     "items": {
      "$ref": "#/components/schemas/Slide-items"
     }
    },
    "xml": {
     "name": "slide"
    }
   },
   "Slide-type": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "Slide-title": {
    "type": "string"
   },
   "Slide-items": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/Slide-itemsItem"
    }
   },
   "Slide-itemsItem": {
    "type": "string",
    "xml": {
     "name": "item"
    }
   },
   "Slideshow": {
    "type": "object",
    "description": "Data about a slideshow",
    "xml": {
     "name": "slideshow"
    },
    "properties": {
     "title": {
      "$ref": "#/components/schemas/Slideshow-title"
     },
     "date": {
      "$ref": "#/components/schemas/Slideshow-date"
     },
     "author": {
      "$ref": "#/components/schemas/Slideshow-author"
     },
     "slides": {
      "$ref": "#/components/schemas/Slideshow-slides"
     }
    }
   },
   "Slideshow-title": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "Slideshow-date": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "Slideshow-author": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "Slideshow-slides": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Slide"
    }
   },
   "AppleBarrel": {
    "type": "object",
    "description": "A barrel of apples.",
    "properties": {
     "GoodApples": {
      "$ref": "#/components/schemas/AppleBarrel-GoodApples"
     },
     "BadApples": {
      "$ref": "#/components/schemas/AppleBarrel-BadApples"
     }
    }
   },
   "AppleBarrel-GoodApples": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/AppleBarrel-GoodApplesItem"
    },
    "xml": {
     "wrapped": true
    }
   },
   "AppleBarrel-GoodApplesItem": {
    "type": "string",
    "xml": {
     "name": "Apple"
    }
   },
   "AppleBarrel-BadApples": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/AppleBarrel-BadApplesItem"
    },
    "xml": {
     "wrapped": true
    }
   },
   "AppleBarrel-BadApplesItem": {
    "type": "string",
    "xml": {
     "name": "Apple"
    }
   },
   "Banana": {
    "type": "object",
    "description": "A banana.",
    "properties": {
     "name": {
      "$ref": "#/components/schemas/Banana-name"
     },
     "flavor": {
      "$ref": "#/components/schemas/Banana-flavor"
     },
     "expiration": {
      "$ref": "#/components/schemas/Banana-expiration",
      "description": "The time at which you should reconsider eating this banana"
     }
    },
    "xml": {
     "name": "banana"
    }
   },
   "Banana-name": {
    "type": "string",
    "xml": {
     "name": "name"
    }
   },
   "Banana-flavor": {
    "type": "string",
    "xml": {
     "name": "flavor"
    }
   },
   "Banana-expiration": {
    "description": "The time at which you should reconsider eating this banana",
    "type": "string",
    "format": "date-time",
    "xml": {
     "name": "expiration"
    }
   },
   "Container": {
    "type": "object",
    "description": "An Azure Storage container",
    "properties": {
     "Name": {
      "$ref": "#/components/schemas/Container-Name"
     },
     "Properties": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ContainerProperties"
     },
     "Metadata": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Metadata"
     }
    },
    "required": [
     "Name",
     "Properties"
    ]
   },
   "Container-Name": {
    "type": "string"
   },
   "ContainerProperties": {
    "type": "object",
    "description": "Properties of a container",
    "properties": {
     "Last-Modified": {
      "$ref": "#/components/schemas/ContainerProperties-Last-Modified"
     },
     "Etag": {
      "$ref": "#/components/schemas/ContainerProperties-Etag"
     },
     "LeaseStatus": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseStatus"
     },
     "LeaseState": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseState"
     },
     "LeaseDuration": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseDuration"
     },
     "PublicAccess": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/PublicAccessType"
     }
    },
    "required": [
     "Last-Modified",
     "Etag"
    ]
   },
   "ContainerProperties-Last-Modified": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "ContainerProperties-Etag": {
    "type": "string",
    "format": "etag"
   },
   "ListContainersResponse": {
    "xml": {
     "name": "EnumerationResults"
    },
    "description": "An enumeration of containers",
    "type": "object",
    "properties": {
     "ServiceEndpoint": {
      "$ref": "#/components/schemas/ListContainersResponse-ServiceEndpoint"
     },
     "Prefix": {
      "$ref": "#/components/schemas/ListContainersResponse-Prefix"
     },
     "Marker": {
      "$ref": "#/components/schemas/ListContainersResponse-Marker"
     },
     "MaxResults": {
      "type": "integer"
     },
     "Containers": {
      "$ref": "#/components/schemas/ListContainersResponse-Containers"
     },
     "NextMarker": {
      "$ref": "#/components/schemas/ListContainersResponse-NextMarker"
     }
    },
    "required": [
     "ServiceEndpoint",
     "Prefix",
     "MaxResults",
     "NextMarker"
    ]
   },
   "ListContainersResponse-ServiceEndpoint": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "ListContainersResponse-Prefix": {
    "type": "string"
   },
   "ListContainersResponse-Marker": {
    "type": "string"
   },
   "ListContainersResponse-Containers": {
    "xml": {
     "wrapped": true
    },
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Container"
    }
   },
   "ListContainersResponse-NextMarker": {
    "type": "string"
   },
   "CorsRule": {
    "description": "CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain",
    "type": "object",
    "properties": {
     "AllowedOrigins": {
      "$ref": "#/components/schemas/CorsRule-AllowedOrigins",
      "description": "The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS."
     },
     "AllowedMethods": {
      "$ref": "#/components/schemas/CorsRule-AllowedMethods",
      "description": "The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)"
     },
     "AllowedHeaders": {
      "$ref": "#/components/schemas/CorsRule-AllowedHeaders",
      "description": "the request headers that the origin domain may specify on the CORS request."
     },
     "ExposedHeaders": {
      "$ref": "#/components/schemas/CorsRule-ExposedHeaders",
      "description": "The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer"
     },
     "MaxAgeInSeconds": {
      "description": "The maximum amount time that a browser should cache the preflight OPTIONS request.",
      "type": "integer",
      "minimum": 0
     }
    },
    "xml": {
     "name": "CorsRule"
    },
    "required": [
     "AllowedOrigins",
     "AllowedMethods",
     "AllowedHeaders",
     "ExposedHeaders",
     "MaxAgeInSeconds"
    ]
   },
   "CorsRule-AllowedOrigins": {
    "description": "The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS.",
    "type": "string"
   },
   "CorsRule-AllowedMethods": {
    "description": "The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)",
    "type": "string"
   },
   "CorsRule-AllowedHeaders": {
    "description": "the request headers that the origin domain may specify on the CORS request.",
    "type": "string"
   },
   "CorsRule-ExposedHeaders": {
    "description": "The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer",
    "type": "string"
   },
   "Blob": {
    "description": "An Azure Storage blob",
    "type": "object",
    "properties": {
     "Name": {
      "$ref": "#/components/schemas/Blob-Name"
     },
     "Deleted": {
      "type": "boolean"
     },
     "Snapshot": {
      "$ref": "#/components/schemas/Blob-Snapshot"
     },
     "Properties": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/BlobProperties"
     },
     "Metadata": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Metadata"
     }
    },
    "xml": {
     "name": "Blob"
    },
    "required": [
     "Name",
     "Deleted",
     "Snapshot",
     "Properties"
    ]
   },
   "Blob-Name": {
    "type": "string"
   },
   "Blob-Snapshot": {
    "type": "string"
   },
   "BlobProperties": {
    "description": "Properties of a blob",
    "type": "object",
    "properties": {
     "Last-Modified": {
      "$ref": "#/components/schemas/BlobProperties-Last-Modified"
     },
     "Etag": {
      "$ref": "#/components/schemas/BlobProperties-Etag"
     },
     "Content-Length": {
      "type": "integer",
      "format": "int64",
      "description": "Size in bytes"
     },
     "Content-Type": {
      "$ref": "#/components/schemas/BlobProperties-Content-Type"
     },
     "Content-Encoding": {
      "$ref": "#/components/schemas/BlobProperties-Content-Encoding"
     },
     "Content-Language": {
      "$ref": "#/components/schemas/BlobProperties-Content-Language"
     },
     "Content-MD5": {
      "$ref": "#/components/schemas/BlobProperties-Content-MD5"
     },
     "Content-Disposition": {
      "$ref": "#/components/schemas/BlobProperties-Content-Disposition"
     },
     "Cache-Control": {
      "$ref": "#/components/schemas/BlobProperties-Cache-Control"
     },
     "x-ms-blob-sequence-number": {
      "x-ms-client-name": "blobSequenceNumber",
      "type": "integer"
     },
     "BlobType": {
      "$ref": "#/components/schemas/BlobProperties-BlobType"
     },
     "LeaseStatus": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseStatus"
     },
     "LeaseState": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseState"
     },
     "LeaseDuration": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/LeaseDuration"
     },
     "CopyId": {
      "$ref": "#/components/schemas/BlobProperties-CopyId"
     },
     "CopyStatus": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/CopyStatus"
     },
     "CopySource": {
      "$ref": "#/components/schemas/BlobProperties-CopySource"
     },
     "CopyProgress": {
      "$ref": "#/components/schemas/BlobProperties-CopyProgress"
     },
     "CopyCompletionTime": {
      "$ref": "#/components/schemas/BlobProperties-CopyCompletionTime"
     },
     "CopyStatusDescription": {
      "$ref": "#/components/schemas/BlobProperties-CopyStatusDescription"
     },
     "ServerEncrypted": {
      "type": "boolean"
     },
     "IncrementalCopy": {
      "type": "boolean"
     },
     "DestinationSnapshot": {
      "$ref": "#/components/schemas/BlobProperties-DestinationSnapshot"
     },
     "DeletedTime": {
      "$ref": "#/components/schemas/BlobProperties-DeletedTime"
     },
     "RemainingRetentionDays": {
      "type": "integer"
     },
     "AccessTier": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AccessTier"
     },
     "AccessTierInferred": {
      "type": "boolean"
     },
     "ArchiveStatus": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ArchiveStatus"
     }
    },
    "required": [
     "Etag",
     "Last-Modified"
    ]
   },
   "BlobProperties-Last-Modified": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "BlobProperties-Etag": {
    "type": "string",
    "format": "etag"
   },
   "BlobProperties-Content-Type": {
    "type": "string"
   },
   "BlobProperties-Content-Encoding": {
    "type": "string"
   },
   "BlobProperties-Content-Language": {
    "type": "string"
   },
   "BlobProperties-Content-MD5": {
    "type": "string"
   },
   "BlobProperties-Content-Disposition": {
    "type": "string"
   },
   "BlobProperties-Cache-Control": {
    "type": "string"
   },
   "BlobProperties-BlobType": {
    "type": "string",
    "enum": [
     "BlockBlob",
     "PageBlob",
     "AppendBlob"
    ],
    "x-ms-enum": {
     "name": "BlobType",
     "modelAsString": false
    }
   },
   "BlobProperties-CopyId": {
    "type": "string"
   },
   "BlobProperties-CopySource": {
    "type": "string"
   },
   "BlobProperties-CopyProgress": {
    "type": "string"
   },
   "BlobProperties-CopyCompletionTime": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "BlobProperties-CopyStatusDescription": {
    "type": "string"
   },
   "BlobProperties-DestinationSnapshot": {
    "type": "string"
   },
   "BlobProperties-DeletedTime": {
    "type": "string",
    "format": "date-time-rfc1123"
   },
   "Logging": {
    "description": "Azure Analytics Logging settings.",
    "type": "object",
    "properties": {
     "Version": {
      "$ref": "#/components/schemas/Logging-Version",
      "description": "The version of Storage Analytics to configure."
     },
     "Delete": {
      "description": "Indicates whether all delete requests should be logged.",
      "type": "boolean"
     },
     "Read": {
      "description": "Indicates whether all read requests should be logged.",
      "type": "boolean"
     },
     "Write": {
      "description": "Indicates whether all write requests should be logged.",
      "type": "boolean"
     },
     "RetentionPolicy": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RetentionPolicy"
     }
    },
    "required": [
     "Version",
     "Delete",
     "Read",
     "Write",
     "RetentionPolicy"
    ]
   },
   "Logging-Version": {
    "description": "The version of Storage Analytics to configure.",
    "type": "string"
   },
   "Metadata": {
    "type": "object",
    "additionalProperties": {
     "$ref": "#/components/schemas/components·schemas·metadata·additionalproperties"
    }
   },
   "components·schemas·metadata·additionalproperties": {
    "type": "string"
   },
   "Metrics": {
    "description": "",
    "properties": {
     "Version": {
      "$ref": "#/components/schemas/Metrics-Version",
      "description": "The version of Storage Analytics to configure."
     },
     "Enabled": {
      "description": "Indicates whether metrics are enabled for the Blob service.",
      "type": "boolean"
     },
     "IncludeAPIs": {
      "description": "Indicates whether metrics should generate summary statistics for called API operations.",
      "type": "boolean"
     },
     "RetentionPolicy": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RetentionPolicy"
     }
    },
    "required": [
     "Enabled"
    ]
   },
   "Metrics-Version": {
    "description": "The version of Storage Analytics to configure.",
    "type": "string"
   },
   "ListBlobsResponse": {
    "xml": {
     "name": "EnumerationResults"
    },
    "description": "An enumeration of blobs",
    "type": "object",
    "properties": {
     "ServiceEndpoint": {
      "$ref": "#/components/schemas/ListBlobsResponse-ServiceEndpoint"
     },
     "ContainerName": {
      "$ref": "#/components/schemas/ListBlobsResponse-ContainerName"
     },
     "Prefix": {
      "$ref": "#/components/schemas/ListBlobsResponse-Prefix"
     },
     "Marker": {
      "$ref": "#/components/schemas/ListBlobsResponse-Marker"
     },
     "MaxResults": {
      "type": "integer"
     },
     "Delimiter": {
      "$ref": "#/components/schemas/ListBlobsResponse-Delimiter"
     },
     "Blobs": {
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Blobs"
     },
     "NextMarker": {
      "$ref": "#/components/schemas/ListBlobsResponse-NextMarker"
     }
    },
    "required": [
     "ServiceEndpoint",
     "ContainerName",
     "Prefix",
     "Marker",
     "MaxResults",
     "Delimiter",
     "Blobs",
     "NextMarker"
    ]
   },
   "ListBlobsResponse-ServiceEndpoint": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "ListBlobsResponse-ContainerName": {
    "type": "string",
    "xml": {
     "attribute": true
    }
   },
   "ListBlobsResponse-Prefix": {
    "type": "string"
   },
   "ListBlobsResponse-Marker": {
    "type": "string"
   },
   "ListBlobsResponse-Delimiter": {
    "type": "string"
   },
   "ListBlobsResponse-NextMarker": {
    "type": "string"
   },
   "Blobs": {
    "type": "object",
    "properties": {
     "BlobPrefix": {
      "$ref": "#/components/schemas/Blobs-BlobPrefix"
     },
     "Blob": {
      "$ref": "#/components/schemas/Blobs-Blob"
     }
    }
   },
   "Blobs-BlobPrefix": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/BlobPrefix"
    }
   },
   "Blobs-Blob": {
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Blob"
    }
   },
   "BlobPrefix": {
    "type": "object",
    "properties": {
     "Name": {
      "$ref": "#/components/schemas/BlobPrefix-Name"
     }
    },
    "required": [
     "Name"
    ]
   },
   "BlobPrefix-Name": {
    "type": "string"
   },
   "PublicAccessType": {
    "type": "string",
    "enum": [
     "container",
     "blob"
    ],
    "x-ms-enum": {
     "name": "PublicAccessType",
     "modelAsString": true
    }
   },
   "CopyStatus": {
    "type": "string",
    "enum": [
     "pending",
     "success",
     "aborted",
     "failed"
    ],
    "x-ms-enum": {
     "name": "CopyStatusType",
     "modelAsString": false
    }
   },
   "LeaseDuration": {
    "type": "string",
    "enum": [
     "infinite",
     "fixed"
    ],
    "x-ms-enum": {
     "name": "LeaseDurationType",
     "modelAsString": false
    }
   },
   "LeaseState": {
    "type": "string",
    "enum": [
     "available",
     "leased",
     "expired",
     "breaking",
     "broken"
    ],
    "x-ms-enum": {
     "name": "LeaseStateType",
     "modelAsString": false
    }
   },
   "LeaseStatus": {
    "type": "string",
    "enum": [
     "locked",
     "unlocked"
    ],
    "x-ms-enum": {
     "name": "LeaseStatusType",
     "modelAsString": false
    }
   },
   "AccessPolicy": {
    "type": "object",
    "description": "An Access policy",
    "properties": {
     "Start": {
      "$ref": "#/components/schemas/AccessPolicy-Start",
      "description": "the date-time the policy is active"
     },
     "Expiry": {
      "$ref": "#/components/schemas/AccessPolicy-Expiry",
      "description": "the date-time the policy expires"
     },
     "Permission": {
      "$ref": "#/components/schemas/AccessPolicy-Permission",
      "description": "the permissions for the acl policy"
     }
    },
    "required": [
     "Start",
     "Expiry",
     "Permission"
    ]
   },
   "AccessPolicy-Start": {
    "description": "the date-time the policy is active",
    "type": "string",
    "format": "date-time"
   },
   "AccessPolicy-Expiry": {
    "description": "the date-time the policy expires",
    "type": "string",
    "format": "date-time"
   },
   "AccessPolicy-Permission": {
    "description": "the permissions for the acl policy",
    "type": "string"
   },
   "AccessTier": {
    "type": "string",
    "enum": [
     "P4",
     "P6",
     "P10",
     "P20",
     "P30",
     "P40",
     "P50",
     "Hot",
     "Cool",
     "Archive"
    ],
    "x-ms-enum": {
     "name": "AccessTier",
     "modelAsString": true
    }
   },
   "ArchiveStatus": {
    "type": "string",
    "enum": [
     "rehydrate-pending-to-hot",
     "rehydrate-pending-to-cool"
    ],
    "x-ms-enum": {
     "name": "ArchiveStatus",
     "modelAsString": true
    }
   },
   "RetentionPolicy": {
    "description": "the retention policy",
    "type": "object",
    "properties": {
     "Enabled": {
      "description": "Indicates whether a retention policy is enabled for the storage service",
      "type": "boolean"
     },
     "Days": {
      "description": "Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted",
      "type": "integer",
      "minimum": 1
     }
    },
    "required": [
     "Enabled"
    ]
   },
   "SignedIdentifier": {
    "description": "signed identifier",
    "type": "object",
    "properties": {
     "Id": {
      "$ref": "#/components/schemas/SignedIdentifier-Id",
      "description": "a unique id"
     },
     "AccessPolicy": {
      "description": "The access policy",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AccessPolicy"
     }
    },
    "xml": {
     "name": "SignedIdentifier"
    },
    "required": [
     "Id",
     "AccessPolicy"
    ]
   },
   "SignedIdentifier-Id": {
    "type": "string",
    "description": "a unique id"
   },
   "SignedIdentifiers": {
    "description": "a collection of signed identifiers",
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/SignedIdentifier"
    },
    "xml": {
     "wrapped": true,
     "name": "SignedIdentifiers"
    }
   },
   "StorageServiceProperties": {
    "description": "Storage Service Properties.",
    "type": "object",
    "properties": {
     "Logging": {
      "description": "Azure Analytics Logging settings",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Logging"
     },
     "HourMetrics": {
      "description": "A summary of request statistics grouped by API in hourly aggregates for blobs",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Metrics"
     },
     "MinuteMetrics": {
      "description": "a summary of request statistics grouped by API in minute aggregates for blobs",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Metrics"
     },
     "Cors": {
      "$ref": "#/components/schemas/StorageServiceProperties-Cors",
      "description": "The set of CORS rules."
     },
     "DefaultServiceVersion": {
      "$ref": "#/components/schemas/StorageServiceProperties-DefaultServiceVersion",
      "description": "The default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions"
     },
     "DeleteRetentionPolicy": {
      "description": "The Delete Retention Policy for the service",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RetentionPolicy"
     }
    }
   },
   "StorageServiceProperties-Cors": {
    "description": "The set of CORS rules.",
    "type": "array",
    "items": {
     "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/CorsRule"
    },
    "xml": {
     "wrapped": true
    }
   },
   "StorageServiceProperties-DefaultServiceVersion": {
    "description": "The default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions",
    "type": "string"
   },
   "ComplexTypeNoMeta": {
    "description": "I am a complex type with no XML node",
    "type": "object",
    "properties": {
     "ID": {
      "$ref": "#/components/schemas/ComplexTypeNoMeta-ID",
      "description": "The id of the res"
     }
    }
   },
   "ComplexTypeNoMeta-ID": {
    "description": "The id of the res",
    "type": "string"
   },
   "ComplexTypeWithMeta": {
    "description": "I am a complex type with XML node",
    "type": "object",
    "properties": {
     "ID": {
      "$ref": "#/components/schemas/ComplexTypeWithMeta-ID",
      "description": "The id of the res"
     }
    },
    "xml": {
     "name": "XMLComplexTypeWithMeta"
    }
   },
   "ComplexTypeWithMeta-ID": {
    "description": "The id of the res",
    "type": "string"
   },
   "RootWithRefAndNoMeta": {
    "description": "I am root, and I ref a model with no meta",
    "type": "object",
    "properties": {
     "RefToModel": {
      "description": "XML will use RefToModel",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ComplexTypeNoMeta"
     },
     "Something": {
      "$ref": "#/components/schemas/RootWithRefAndNoMeta-Something",
      "description": "Something else (just to avoid flattening)"
     }
    }
   },
   "RootWithRefAndNoMeta-Something": {
    "description": "Something else (just to avoid flattening)",
    "type": "string"
   },
   "RootWithRefAndMeta": {
    "description": "I am root, and I ref a model WITH meta",
    "type": "object",
    "properties": {
     "RefToModel": {
      "description": "XML will use XMLComplexTypeWithMeta",
      "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/ComplexTypeWithMeta"
     },
     "Something": {
      "$ref": "#/components/schemas/RootWithRefAndMeta-Something",
      "description": "Something else (just to avoid flattening)"
     }
    }
   },
   "RootWithRefAndMeta-Something": {
    "description": "Something else (just to avoid flattening)",
    "type": "string"
   }
  },
  "requestBodies": {
   "paths·xml-complex_type_ref_no_meta·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RootWithRefAndNoMeta"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "model"
   },
   "paths·xml-complex_type_ref_with_meta·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/RootWithRefAndMeta"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "model"
   },
   "paths·xml-simple·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Slideshow"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "slideshow"
   },
   "paths·xml-wrapped_lists·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AppleBarrel"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "wrappedLists"
   },
   "paths·xml-empty_list·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Slideshow"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "slideshow"
   },
   "paths·xml-empty_wrapped_lists·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/AppleBarrel"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "appleBarrel"
   },
   "paths·xml-root_list·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-root_list·put·requestbody·content·application-xml·schema"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "bananas"
   },
   "paths·xml-root_list_single_item·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-root_list_single_item·put·requestbody·content·application-xml·schema"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "bananas"
   },
   "paths·xml-empty_root_list·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "#/components/schemas/paths·xml-empty_root_list·put·requestbody·content·application-xml·schema"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "bananas"
   },
   "paths·xml-empty_child_element·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/Banana"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "banana"
   },
   "paths·xml-comp-properties-restype-service·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/StorageServiceProperties"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "properties"
   },
   "paths·xml-mycontainer-comp-acl-restype-container·put·requestbody": {
    "content": {
     "application/xml": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/SignedIdentifiers"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "properties"
   },
   "paths·xml-jsoninput·put·requestbody": {
    "content": {
     "application/json": {
      "schema": {
       "$ref": "http://localhost:3000/swagger/xml-service.json#/components/schemas/JSONInput"
      }
     }
    },
    "required": true,
    "x-ms-requestBody-name": "properties"
   }
  },
  "headers": {
   "paths·xml-headers·get·responses·200·headers·custom_header": {
    "schema": {
     "$ref": "#/components/schemas/paths·xml-headers·get·responses·200·headers·custom_header·schema"
    },
    "description": "A custom response header."
   }
  },
  "parameters": {
   "paths·xml-comp-list·get·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "list"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-comp-properties-restype-service·get·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "properties"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-comp-properties-restype-service·get·parameters·1": {
    "name": "restype",
    "in": "query",
    "schema": {
     "enum": [
      "service"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-comp-properties-restype-service·put·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "properties"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-comp-properties-restype-service·put·parameters·1": {
    "name": "restype",
    "in": "query",
    "schema": {
     "enum": [
      "service"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-acl-restype-container·get·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "acl"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-acl-restype-container·get·parameters·1": {
    "name": "restype",
    "in": "query",
    "schema": {
     "enum": [
      "container"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-acl-restype-container·put·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "acl"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-acl-restype-container·put·parameters·1": {
    "name": "restype",
    "in": "query",
    "schema": {
     "enum": [
      "container"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-list-restype-container·get·parameters·0": {
    "name": "comp",
    "in": "query",
    "schema": {
     "enum": [
      "list"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   },
   "paths·xml-mycontainer-comp-list-restype-container·get·parameters·1": {
    "name": "restype",
    "in": "query",
    "schema": {
     "enum": [
      "container"
     ],
     "type": "string"
    },
    "required": true,
    "x-ms-parameter-location": "method"
   }
  }
 },
 "servers": [
  {
   "url": "http://localhost:3000/"
  }
 ]
}