!<!CodeModel> 
schemas: !<!Schemas> 
  objects:
  - !<!ObjectSchema> &ref_85
    $key: basic
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: id
      schema: !<!NumberSchema> &ref_20
        $key: typeForid
        type: integer
        description: Basic Id
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForid
            description: Basic Id
        protocol: !<!Protocols> {}
      description: Basic Id
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: Basic Id
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: name
      schema: !<!StringSchema> &ref_35
        $key: basic-name
        type: string
        description: Name property with a very long description that does not fit on a single line and a line break.
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: basic-name
            description: Name property with a very long description that does not fit on a single line and a line break.
        protocol: !<!Protocols> {}
      description: Name property with a very long description that does not fit on a single line and a line break.
      serializedName: name
      language: !<!Languages> 
        default:
          name: name
          description: Name property with a very long description that does not fit on a single line and a line break.
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: color
      schema: !<!SealedChoiceSchema> &ref_60
        $key: CMYKColors
        choices:
        - !<!ChoiceValue> 
          value: cyan
          language:
            default:
              name: cyan
              description: ''
        - !<!ChoiceValue> 
          value: Magenta
          language:
            default:
              name: Magenta
              description: ''
        - !<!ChoiceValue> 
          value: YELLOW
          language:
            default:
              name: YELLOW
              description: ''
        - !<!ChoiceValue> 
          value: blacK
          language:
            default:
              name: blacK
              description: ''
        type: sealed-choice
        description: MISSING-SCHEMA-DESCRIPTION-CHOICE
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        choiceType: !<!StringSchema> &ref_36
          $key: string
          type: string
          description: ''
          language: !<!Languages> 
            default:
              name: string
              description: ''
          protocol: !<!Protocols> {}
        extensions:
          x-ms-enum:
            name: CMYKColors
            modelAsString: true
        language: !<!Languages> 
          default:
            name: CMYKColors
            description: MISSING-SCHEMA-DESCRIPTION-CHOICE
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: color
      language: !<!Languages> 
        default:
          name: color
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: basic
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_86
    $key: Error
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: status
      schema: !<!NumberSchema> &ref_21
        $key: typeForstatus
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForstatus
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: message
      schema: !<!StringSchema> &ref_37
        $key: Error-message
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: Error-message
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Error
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_88
    $key: int-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field1
      schema: !<!NumberSchema> &ref_22
        $key: typeForfield1
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForfield1
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: field2
      schema: !<!NumberSchema> &ref_23
        $key: typeForfield2
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForfield2
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: int-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_89
    $key: long-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field1
      schema: !<!NumberSchema> &ref_24
        $key: typeForfield1
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 64
        language: !<!Languages> 
          default:
            name: typeForfield1
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: field2
      schema: !<!NumberSchema> &ref_25
        $key: typeForfield2
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 64
        language: !<!Languages> 
          default:
            name: typeForfield2
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: long-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_90
    $key: float-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field1
      schema: !<!NumberSchema> &ref_26
        $key: typeForfield1
        type: number
        description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForfield1
            description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: field2
      schema: !<!NumberSchema> &ref_27
        $key: typeForfield2
        type: number
        description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForfield2
            description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field2
      language: !<!Languages> 
        default:
          name: field2
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: float-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_91
    $key: double-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field1
      schema: !<!NumberSchema> &ref_28
        $key: typeForfield1
        type: number
        description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        precision: 64
        language: !<!Languages> 
          default:
            name: typeForfield1
            description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field1
      language: !<!Languages> 
        default:
          name: field1
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
      schema: !<!NumberSchema> &ref_29
        $key: typeForfield_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
        type: number
        description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        precision: 64
        language: !<!Languages> 
          default:
            name: typeForfield_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
            description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
      language: !<!Languages> 
        default:
          name: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: double-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_92
    $key: boolean-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field_true
      schema: !<!BooleanSchema> &ref_64
        $key: typeForfield_true
        type: boolean
        description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
        language: !<!Languages> 
          default:
            name: typeForfield_true
            description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field_true
      language: !<!Languages> 
        default:
          name: field_true
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: field_false
      schema: !<!BooleanSchema> &ref_65
        $key: typeForfield_false
        type: boolean
        description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
        language: !<!Languages> 
          default:
            name: typeForfield_false
            description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field_false
      language: !<!Languages> 
        default:
          name: field_false
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: boolean-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_93
    $key: string-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!StringSchema> &ref_38
        $key: string-wrapper-field
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: string-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: empty
      schema: !<!StringSchema> &ref_39
        $key: string-wrapper-empty
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: string-wrapper-empty
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: empty
      language: !<!Languages> 
        default:
          name: empty
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: 'null'
      schema: !<!StringSchema> &ref_40
        $key: string-wrapper-null
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: string-wrapper-null
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: 'null'
      language: !<!Languages> 
        default:
          name: 'null'
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: string-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_94
    $key: date-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!DateSchema> &ref_68
        $key: date-wrapper-field
        type: date
        description: MISSING-SCHEMA-DESCRIPTION-DATE
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: date-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-DATE
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: leap
      schema: !<!DateSchema> &ref_69
        $key: date-wrapper-leap
        type: date
        description: MISSING-SCHEMA-DESCRIPTION-DATE
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: date-wrapper-leap
            description: MISSING-SCHEMA-DESCRIPTION-DATE
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: leap
      language: !<!Languages> 
        default:
          name: leap
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: date-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_95
    $key: datetime-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!DateTimeSchema> &ref_70
        $key: datetime-wrapper-field
        type: date-time
        format: date-time
        description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: datetime-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: now
      schema: !<!DateTimeSchema> &ref_71
        $key: datetime-wrapper-now
        type: date-time
        format: date-time
        description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: datetime-wrapper-now
            description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: now
      language: !<!Languages> 
        default:
          name: now
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: datetime-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_96
    $key: datetimerfc1123-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!DateTimeSchema> &ref_72
        $key: datetimerfc1123-wrapper-field
        type: date-time
        format: date-time-rfc1123
        description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: datetimerfc1123-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: now
      schema: !<!DateTimeSchema> &ref_73
        $key: datetimerfc1123-wrapper-now
        type: date-time
        format: date-time-rfc1123
        description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: datetimerfc1123-wrapper-now
            description: MISSING-SCHEMA-DESCRIPTION-DATETIME
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: now
      language: !<!Languages> 
        default:
          name: now
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: datetimerfc1123-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_97
    $key: duration-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!DurationSchema> &ref_75
        $key: duration-wrapper-field
        type: duration
        description: MISSING-SCHEMA-DESCRIPTION-DURATION
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: duration-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-DURATION
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: duration-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_98
    $key: byte-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: field
      schema: !<!ByteArraySchema> &ref_76
        $key: byte-wrapper-field
        type: byte-array
        format: byte
        description: MISSING-SCHEMA-DESCRIPTION-BYTEARRAY
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: byte-wrapper-field
            description: MISSING-SCHEMA-DESCRIPTION-BYTEARRAY
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: field
      language: !<!Languages> 
        default:
          name: field
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: byte-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_99
    $key: array-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: array
      schema: !<!ArraySchema> &ref_78
        $key: array-wrapper-array
        type: array
        description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: !<!StringSchema> &ref_41
          $key: array-wrapper-arrayItem
          type: string
          description: MISSING-SCHEMA-DESCRIPTION-STRING
          apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
          language: !<!Languages> 
            default:
              name: array-wrapper-arrayItem
              description: MISSING-SCHEMA-DESCRIPTION-STRING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: array-wrapper-array
            description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: array
      language: !<!Languages> 
        default:
          name: array
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: array-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_100
    $key: dictionary-wrapper
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: defaultProgram
      schema: !<!DictionarySchema> &ref_83
        $key: dictionary-wrapper-defaultProgram
        type: dictionary
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        elementType: !<!StringSchema> &ref_42
          $key: components·schemas·dictionary_wrapper·properties·defaultprogram·additionalproperties
          type: string
          description: MISSING-SCHEMA-DESCRIPTION-STRING
          apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
          language: !<!Languages> 
            default:
              name: components·schemas·dictionary_wrapper·properties·defaultprogram·additionalproperties
              description: MISSING-SCHEMA-DESCRIPTION-STRING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: dictionary-wrapper-defaultProgram
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: defaultProgram
      language: !<!Languages> 
        default:
          name: defaultProgram
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: dictionary-wrapper
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> 
    $key: dictionary-wrapper-defaultProgram
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: dictionary-wrapper-defaultProgram
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_0
    $key: pet
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_1
        $key: dog
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        parents: !<!Relations> 
          all:
          - *ref_0
          immediate:
          - *ref_0
        properties:
        - !<!Property> 
          $key: food
          schema: !<!StringSchema> &ref_45
            $key: dog-food
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: dog-food
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: food
          language: !<!Languages> 
            default:
              name: food
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: dog
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      - !<!ObjectSchema> &ref_2
        $key: cat
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_3
            $key: siamese
            type: object
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            parents: !<!Relations> 
              all:
              - *ref_2
              - *ref_0
              immediate:
              - *ref_2
            properties:
            - !<!Property> 
              $key: breed
              schema: !<!StringSchema> &ref_46
                $key: siamese-breed
                type: string
                description: MISSING-SCHEMA-DESCRIPTION-STRING
                apiVersions:
                - !<!ApiVersion> 
                  version: '2016-02-29'
                language: !<!Languages> 
                  default:
                    name: siamese-breed
                    description: MISSING-SCHEMA-DESCRIPTION-STRING
                protocol: !<!Protocols> {}
              description: PROPERTY-DESCRIPTION-MISSING
              serializedName: breed
              language: !<!Languages> 
                default:
                  name: breed
                  description: PROPERTY-DESCRIPTION-MISSING
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: siamese
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                namespace: Api20160229
            protocol: !<!Protocols> {}
          immediate:
          - *ref_3
        parents: !<!Relations> 
          all:
          - *ref_0
          immediate:
          - *ref_0
        properties:
        - !<!Property> 
          $key: color
          schema: !<!StringSchema> &ref_44
            $key: cat-color
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: cat-color
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: color
          language: !<!Languages> 
            default:
              name: color
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        - !<!Property> 
          $key: hates
          schema: !<!ArraySchema> &ref_79
            $key: cat-hates
            type: array
            description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            elementType: *ref_1
            language: !<!Languages> 
              default:
                name: cat-hates
                description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: hates
          language: !<!Languages> 
            default:
              name: hates
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: cat
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      - *ref_3
      immediate:
      - *ref_1
      - *ref_2
    properties:
    - !<!Property> 
      $key: id
      schema: !<!NumberSchema> &ref_30
        $key: typeForid
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForid
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: name
      schema: !<!StringSchema> &ref_43
        $key: pet-name
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: pet-name
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: name
      language: !<!Languages> 
        default:
          name: name
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: pet
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - *ref_2
  - *ref_1
  - *ref_3
  - !<!ObjectSchema> &ref_4
    $key: Fish
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_6
        $key: salmon
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_8
            $key: smart_salmon
            type: object
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: smart_salmon
            parents: !<!Relations> 
              all:
              - *ref_6
              - !<!DictionarySchema> &ref_7
                $key: smart_salmon
                type: dictionary
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                elementType: !<!AnySchema> 
                  $key: any
                  type: any
                  description: MISSING-SCHEMA-DESCRIPTION-ANY
                  language: !<!Languages> 
                    default:
                      name: any
                      description: MISSING-SCHEMA-DESCRIPTION-ANY
                  protocol: !<!Protocols> {}
                language: !<!Languages> 
                  default:
                    name: smart_salmon
                    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                protocol: !<!Protocols> {}
              - *ref_4
              - *ref_7
              immediate:
              - *ref_6
              - *ref_7
            properties:
            - !<!Property> 
              $key: college_degree
              schema: !<!StringSchema> &ref_57
                $key: smart_salmon-college_degree
                type: string
                description: MISSING-SCHEMA-DESCRIPTION-STRING
                apiVersions:
                - !<!ApiVersion> 
                  version: '2016-02-29'
                language: !<!Languages> 
                  default:
                    name: smart_salmon-college_degree
                    description: MISSING-SCHEMA-DESCRIPTION-STRING
                protocol: !<!Protocols> {}
              description: PROPERTY-DESCRIPTION-MISSING
              serializedName: college_degree
              language: !<!Languages> 
                default:
                  name: college_degree
                  description: PROPERTY-DESCRIPTION-MISSING
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: smart_salmon
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                namespace: Api20160229
            protocol: !<!Protocols> {}
          immediate:
          - *ref_8
        discriminator: !<!Discriminator> 
          all:
            smart_salmon: *ref_8
          immediate:
            smart_salmon: *ref_8
          property: !<!Property> &ref_5
            $key: fishtype
            schema: !<!StringSchema> &ref_47
              $key: Fish-fishtype
              type: string
              description: MISSING-SCHEMA-DESCRIPTION-STRING
              apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
              language: !<!Languages> 
                default:
                  name: Fish-fishtype
                  description: MISSING-SCHEMA-DESCRIPTION-STRING
              protocol: !<!Protocols> {}
            description: PROPERTY-DESCRIPTION-MISSING
            isDiscriminator: true
            required: true
            serializedName: fishtype
            language: !<!Languages> 
              default:
                name: fishtype
                description: PROPERTY-DESCRIPTION-MISSING
            protocol: !<!Protocols> {}
        discriminatorValue: salmon
        parents: !<!Relations> 
          all:
          - *ref_4
          immediate:
          - *ref_4
        properties:
        - !<!Property> 
          $key: location
          schema: !<!StringSchema> &ref_52
            $key: salmon-location
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: salmon-location
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: location
          language: !<!Languages> 
            default:
              name: location
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        - !<!Property> 
          $key: iswild
          schema: !<!BooleanSchema> &ref_67
            $key: typeForiswild
            type: boolean
            description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
            language: !<!Languages> 
              default:
                name: typeForiswild
                description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: iswild
          language: !<!Languages> 
            default:
              name: iswild
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: salmon
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      - *ref_8
      - !<!ObjectSchema> &ref_9
        $key: shark
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        children: !<!Relations> 
          all:
          - !<!ObjectSchema> &ref_10
            $key: sawshark
            type: object
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: sawshark
            parents: !<!Relations> 
              all:
              - *ref_9
              - *ref_4
              immediate:
              - *ref_9
            properties:
            - !<!Property> 
              $key: picture
              schema: !<!ByteArraySchema> &ref_77
                $key: sawshark-picture
                type: byte-array
                format: byte
                description: MISSING-SCHEMA-DESCRIPTION-BYTEARRAY
                apiVersions:
                - !<!ApiVersion> 
                  version: '2016-02-29'
                language: !<!Languages> 
                  default:
                    name: sawshark-picture
                    description: MISSING-SCHEMA-DESCRIPTION-BYTEARRAY
                protocol: !<!Protocols> {}
              description: PROPERTY-DESCRIPTION-MISSING
              serializedName: picture
              language: !<!Languages> 
                default:
                  name: picture
                  description: PROPERTY-DESCRIPTION-MISSING
              protocol: !<!Protocols> {}
            language: !<!Languages> 
              default:
                name: sawshark
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                namespace: Api20160229
            protocol: !<!Protocols> {}
          - !<!ObjectSchema> &ref_11
            $key: goblinshark
            type: object
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: goblin
            parents: !<!Relations> 
              all:
              - *ref_9
              - *ref_4
              immediate:
              - *ref_9
            properties:
            - !<!Property> 
              $key: jawsize
              schema: !<!NumberSchema> &ref_34
                $key: typeForjawsize
                type: integer
                description: MISSING-SCHEMA-DESCRIPTION-INTEGER
                precision: 32
                language: !<!Languages> 
                  default:
                    name: typeForjawsize
                    description: MISSING-SCHEMA-DESCRIPTION-INTEGER
                protocol: !<!Protocols> {}
              description: PROPERTY-DESCRIPTION-MISSING
              serializedName: jawsize
              language: !<!Languages> 
                default:
                  name: jawsize
                  description: PROPERTY-DESCRIPTION-MISSING
              protocol: !<!Protocols> {}
            - !<!Property> 
              $key: color
              schema: !<!SealedChoiceSchema> &ref_61
                $key: GoblinSharkColor
                choices:
                - !<!ChoiceValue> 
                  value: pink
                  language:
                    default:
                      name: pink
                      description: ''
                - !<!ChoiceValue> 
                  value: gray
                  language:
                    default:
                      name: gray
                      description: ''
                - !<!ChoiceValue> 
                  value: brown
                  language:
                    default:
                      name: brown
                      description: ''
                type: sealed-choice
                description: Colors possible
                apiVersions:
                - !<!ApiVersion> 
                  version: '2016-02-29'
                choiceType: !<!StringSchema> &ref_58
                  $key: string
                  type: string
                  description: Colors possible
                  language: !<!Languages> 
                    default:
                      name: string
                      description: Colors possible
                  protocol: !<!Protocols> {}
                defaultValue: gray
                extensions:
                  x-ms-enum:
                    name: GoblinSharkColor
                    modelAsString: true
                language: !<!Languages> 
                  default:
                    name: GoblinSharkColor
                    description: Colors possible
                protocol: !<!Protocols> {}
              description: Colors possible
              serializedName: color
              language: !<!Languages> 
                default:
                  name: color
                  description: Colors possible
              protocol: !<!Protocols> {}
            extensions:
              x-ms-discriminator-value: goblin
            language: !<!Languages> 
              default:
                name: goblinshark
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                namespace: Api20160229
            protocol: !<!Protocols> {}
          - !<!ObjectSchema> &ref_12
            $key: cookiecuttershark
            type: object
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            discriminatorValue: cookiecuttershark
            parents: !<!Relations> 
              all:
              - *ref_9
              - *ref_4
              immediate:
              - *ref_9
            language: !<!Languages> 
              default:
                name: cookiecuttershark
                description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
                namespace: Api20160229
            protocol: !<!Protocols> {}
          immediate:
          - *ref_10
          - *ref_11
          - *ref_12
        discriminator: !<!Discriminator> 
          all:
            cookiecuttershark: *ref_12
            goblin: *ref_11
            sawshark: *ref_10
          immediate:
            cookiecuttershark: *ref_12
            goblin: *ref_11
            sawshark: *ref_10
          property: *ref_5
        discriminatorValue: shark
        parents: !<!Relations> 
          all:
          - *ref_4
          immediate:
          - *ref_4
        properties:
        - !<!Property> 
          $key: age
          schema: !<!NumberSchema> &ref_33
            $key: typeForage
            type: integer
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
            precision: 32
            language: !<!Languages> 
              default:
                name: typeForage
                description: MISSING-SCHEMA-DESCRIPTION-INTEGER
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          required: false
          serializedName: age
          language: !<!Languages> 
            default:
              name: age
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        - !<!Property> 
          $key: birthday
          schema: !<!DateTimeSchema> &ref_74
            $key: shark-birthday
            type: date-time
            format: date-time
            description: MISSING-SCHEMA-DESCRIPTION-DATETIME
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: shark-birthday
                description: MISSING-SCHEMA-DESCRIPTION-DATETIME
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          required: true
          serializedName: birthday
          language: !<!Languages> 
            default:
              name: birthday
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: shark
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      - *ref_10
      - *ref_11
      - *ref_12
      immediate:
      - *ref_6
      - *ref_9
    discriminator: !<!Discriminator> 
      all:
        cookiecuttershark: *ref_12
        goblin: *ref_11
        salmon: *ref_6
        sawshark: *ref_10
        shark: *ref_9
        smart_salmon: *ref_8
      immediate:
        salmon: *ref_6
        shark: *ref_9
      property: *ref_5
    properties:
    - *ref_5
    - !<!Property> 
      $key: species
      schema: !<!StringSchema> &ref_48
        $key: Fish-species
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: Fish-species
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: false
      serializedName: species
      language: !<!Languages> 
        default:
          name: species
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: length
      schema: !<!NumberSchema> &ref_31
        $key: typeForlength
        type: number
        description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForlength
            description: MISSING-SCHEMA-DESCRIPTION-NUMBER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: true
      serializedName: length
      language: !<!Languages> 
        default:
          name: length
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: siblings
      schema: !<!ArraySchema> &ref_80
        $key: Fish-siblings
        type: array
        description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_4
        language: !<!Languages> 
          default:
            name: Fish-siblings
            description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: false
      serializedName: siblings
      language: !<!Languages> 
        default:
          name: siblings
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Fish
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_14
    $key: DotFish
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_15
        $key: DotSalmon
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        discriminatorValue: DotSalmon
        parents: !<!Relations> 
          all:
          - *ref_14
          immediate:
          - *ref_14
        properties:
        - !<!Property> 
          $key: location
          schema: !<!StringSchema> &ref_51
            $key: DotSalmon-location
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: DotSalmon-location
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: location
          language: !<!Languages> 
            default:
              name: location
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        - !<!Property> 
          $key: iswild
          schema: !<!BooleanSchema> &ref_66
            $key: typeForiswild
            type: boolean
            description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
            language: !<!Languages> 
              default:
                name: typeForiswild
                description: MISSING-SCHEMA-DESCRIPTION-BOOLEAN
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: iswild
          language: !<!Languages> 
            default:
              name: iswild
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: DotSalmon
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      immediate:
      - *ref_15
    discriminator: !<!Discriminator> 
      all:
        DotSalmon: *ref_15
      immediate:
        DotSalmon: *ref_15
      property: !<!Property> &ref_13
        $key: fish.type
        schema: !<!StringSchema> &ref_49
          $key: DotFish-fish.type
          type: string
          description: MISSING-SCHEMA-DESCRIPTION-STRING
          apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
          language: !<!Languages> 
            default:
              name: DotFish-fish.type
              description: MISSING-SCHEMA-DESCRIPTION-STRING
          protocol: !<!Protocols> {}
        description: PROPERTY-DESCRIPTION-MISSING
        isDiscriminator: true
        required: true
        serializedName: fish.type
        language: !<!Languages> 
          default:
            name: fish.type
            description: PROPERTY-DESCRIPTION-MISSING
        protocol: !<!Protocols> {}
    properties:
    - *ref_13
    - !<!Property> 
      $key: species
      schema: !<!StringSchema> &ref_50
        $key: DotFish-species
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: DotFish-species
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: false
      serializedName: species
      language: !<!Languages> 
        default:
          name: species
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: DotFish
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_101
    $key: DotFishMarket
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: sampleSalmon
      schema: *ref_15
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: sampleSalmon
      language: !<!Languages> 
        default:
          name: sampleSalmon
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: salmons
      schema: !<!ArraySchema> &ref_81
        $key: DotFishMarket-salmons
        type: array
        description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_15
        language: !<!Languages> 
          default:
            name: DotFishMarket-salmons
            description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: salmons
      language: !<!Languages> 
        default:
          name: salmons
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: sampleFish
      schema: *ref_14
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: sampleFish
      language: !<!Languages> 
        default:
          name: sampleFish
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: fishes
      schema: !<!ArraySchema> &ref_82
        $key: DotFishMarket-fishes
        type: array
        description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        elementType: *ref_14
        language: !<!Languages> 
          default:
            name: DotFishMarket-fishes
            description: MISSING-SCHEMA-DESCRIPTION-ARRAYSCHEMA
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: fishes
      language: !<!Languages> 
        default:
          name: fishes
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: DotFishMarket
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - *ref_15
  - *ref_6
  - !<!ObjectSchema> &ref_102
    $key: readonly-obj
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    properties:
    - !<!Property> 
      $key: id
      schema: !<!StringSchema> &ref_53
        $key: readonly-obj-id
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: readonly-obj-id
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      readOnly: true
      serializedName: id
      language: !<!Languages> 
        default:
          name: id
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: size
      schema: !<!NumberSchema> &ref_32
        $key: typeForsize
        type: integer
        description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForsize
            description: MISSING-SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      serializedName: size
      language: !<!Languages> 
        default:
          name: size
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: readonly-obj
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_17
    $key: MyBaseType
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_18
        $key: MyDerivedType
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        discriminatorValue: Kind1
        parents: !<!Relations> 
          all:
          - *ref_17
          immediate:
          - *ref_17
        properties:
        - !<!Property> 
          $key: propD1
          schema: !<!StringSchema> &ref_59
            $key: MyDerivedType-propD1
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: MyDerivedType-propD1
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: propD1
          language: !<!Languages> 
            default:
              name: propD1
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        extensions:
          x-ms-discriminator-value: Kind1
        language: !<!Languages> 
          default:
            name: MyDerivedType
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      immediate:
      - *ref_18
    discriminator: !<!Discriminator> 
      all:
        Kind1: *ref_18
      immediate:
        Kind1: *ref_18
      property: !<!Property> &ref_16
        $key: kind
        schema: !<!ConstantSchema> &ref_63
          $key: MyKind
          type: constant
          description: MISSING-SCHEMA-DESCRIPTION-CHOICE
          apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
          value: !<!ConstantValue> 
            value: Kind1
            language:
              default:
                name: ''
                description: ''
          valueType: !<!StringSchema> &ref_54
            $key: string
            type: string
            description: ''
            language: !<!Languages> 
              default:
                name: string
                description: ''
            protocol: !<!Protocols> {}
          extensions:
            x-ms-enum:
              name: MyKind
              modelAsString: true
              values:
              - value: Kind1
          language: !<!Languages> 
            default:
              name: MyKind
              description: MISSING-SCHEMA-DESCRIPTION-CHOICE
          protocol: !<!Protocols> {}
        description: PROPERTY-DESCRIPTION-MISSING
        isDiscriminator: true
        required: true
        serializedName: kind
        language: !<!Languages> 
          default:
            name: kind
            description: PROPERTY-DESCRIPTION-MISSING
        protocol: !<!Protocols> {}
    properties:
    - *ref_16
    - !<!Property> 
      $key: propB1
      schema: !<!StringSchema> &ref_55
        $key: MyBaseType-propB1
        type: string
        description: MISSING-SCHEMA-DESCRIPTION-STRING
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        language: !<!Languages> 
          default:
            name: MyBaseType-propB1
            description: MISSING-SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: false
      serializedName: propB1
      language: !<!Languages> 
        default:
          name: propB1
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    - !<!Property> 
      $key: helper
      schema: !<!ObjectSchema> &ref_19
        $key: MyBaseHelperType
        type: object
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
        properties:
        - !<!Property> 
          $key: propBH1
          schema: !<!StringSchema> &ref_56
            $key: MyBaseHelperType-propBH1
            type: string
            description: MISSING-SCHEMA-DESCRIPTION-STRING
            apiVersions:
            - !<!ApiVersion> 
              version: '2016-02-29'
            language: !<!Languages> 
              default:
                name: MyBaseHelperType-propBH1
                description: MISSING-SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          description: PROPERTY-DESCRIPTION-MISSING
          serializedName: propBH1
          language: !<!Languages> 
            default:
              name: propBH1
              description: PROPERTY-DESCRIPTION-MISSING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: MyBaseHelperType
            description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api20160229
        protocol: !<!Protocols> {}
      description: PROPERTY-DESCRIPTION-MISSING
      required: false
      serializedName: helper
      language: !<!Languages> 
        default:
          name: helper
          description: PROPERTY-DESCRIPTION-MISSING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: MyBaseType
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - *ref_19
  - *ref_8
  - !<!ObjectSchema> 
    $key: components·schemas·smart_salmon·additionalproperties
    type: object
    description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
    apiVersions:
    - !<!ApiVersion> 
      version: '2016-02-29'
    language: !<!Languages> 
      default:
        name: components·schemas·smart_salmon·additionalproperties
        description: MISSING-SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api20160229
    protocol: !<!Protocols> {}
  - *ref_9
  - *ref_10
  - *ref_11
  - *ref_12
  - *ref_18
  dictionaries:
  - *ref_83
  - *ref_7
  arrays:
  - *ref_78
  - *ref_79
  - *ref_80
  - *ref_81
  - *ref_82
  booleans:
  - *ref_64
  - *ref_65
  - *ref_66
  - *ref_67
  byteArrays:
  - *ref_76
  - *ref_77
  constants:
  - !<!ConstantSchema> &ref_87
    $key: ''
    type: constant
    description: MISSING-SCHEMA-DESCRIPTION-CHOICE
    value: !<!ConstantValue> 
      value: 2014-04-01-preview
      language:
        default:
          name: ''
          description: ''
    valueType: !<!StringSchema> &ref_62
      $key: string
      type: string
      description: ''
      language: !<!Languages> 
        default:
          name: string
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ''
        description: MISSING-SCHEMA-DESCRIPTION-CHOICE
    protocol: !<!Protocols> {}
  - *ref_63
  dateTimes:
  - *ref_70
  - *ref_71
  - *ref_72
  - *ref_73
  - *ref_74
  dates:
  - *ref_68
  - *ref_69
  durations:
  - *ref_75
  numbers:
  - *ref_20
  - *ref_21
  - *ref_22
  - *ref_23
  - *ref_24
  - *ref_25
  - *ref_26
  - *ref_27
  - *ref_28
  - *ref_29
  - *ref_30
  - *ref_31
  - *ref_32
  - *ref_33
  - *ref_34
  sealedChoices:
  - *ref_60
  - *ref_61
  strings:
  - *ref_35
  - *ref_36
  - *ref_37
  - *ref_62
  - *ref_38
  - *ref_39
  - *ref_40
  - *ref_41
  - *ref_42
  - *ref_43
  - *ref_44
  - *ref_45
  - *ref_46
  - *ref_47
  - *ref_48
  - *ref_49
  - *ref_50
  - *ref_51
  - *ref_52
  - *ref_53
  - *ref_54
  - *ref_55
  - *ref_56
  - *ref_57
  - *ref_58
  - *ref_59
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: body-complex
operationGroups:
- !<!OperationGroup> 
  $key: basic
  operations:
  - !<!Operation> 
    $key: getValid
    description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/valid
          method: get
          servers:
          - !<!HttpServer> &ref_84
            url: 'http://localhost:3000/'
            language:
              default:
                name: server-name
                description: MISSING-SERVER-DESCRIPTION
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: api-version
        schema: *ref_87
        description: API ID.
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: api-version
            description: API ID.
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_85
        description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/basic/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getInvalid
    description: Get a basic complex type that is invalid for the local strong type
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/invalid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getInvalid
        description: Get a basic complex type that is invalid for the local strong type
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getEmpty
    description: Get a basic complex type that is empty
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/empty
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get a basic complex type that is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getNull
    description: Get a basic complex type whose properties are null
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/null
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNull
        description: Get a basic complex type whose properties are null
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getNotProvided
    description: Get a basic complex type while the server doesn't provide a response payload
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/basic/notprovided
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get a basic complex type while the server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: basic
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: primitive
  operations:
  - !<!Operation> 
    $key: getInt
    description: Get complex types with integer properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/integer
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_88
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getInt
        description: Get complex types with integer properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putInt
    description: Put complex types with integer properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_88
        description: Please put -1 and 2
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put -1 and 2
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/integer
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putInt
        description: Put complex types with integer properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getLong
    description: Get complex types with long properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/long
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_89
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getLong
        description: Get complex types with long properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putLong
    description: Put complex types with long properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_89
        description: Please put 1099511627775 and -999511627788
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 1099511627775 and -999511627788
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/long
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putLong
        description: Put complex types with long properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getFloat
    description: Get complex types with float properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/float
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_90
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getFloat
        description: Get complex types with float properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putFloat
    description: Put complex types with float properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_90
        description: Please put 1.05 and -0.003
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 1.05 and -0.003
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/float
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putFloat
        description: Put complex types with float properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDouble
    description: Get complex types with double properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/double
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_91
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDouble
        description: Get complex types with double properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putDouble
    description: Put complex types with double properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_91
        description: Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/double
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putDouble
        description: Put complex types with double properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getBool
    description: Get complex types with bool properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/bool
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_92
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getBool
        description: Get complex types with bool properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putBool
    description: Put complex types with bool properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_92
        description: Please put true and false
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put true and false
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/bool
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putBool
        description: Put complex types with bool properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getString
    description: Get complex types with string properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/string
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_93
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getString
        description: Get complex types with string properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putString
    description: Put complex types with string properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_93
        description: 'Please put ''goodrequest'', '''', and null'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''goodrequest'', '''', and null'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/string
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putString
        description: Put complex types with string properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDate
    description: Get complex types with date properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/date
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_94
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDate
        description: Get complex types with date properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putDate
    description: Put complex types with date properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_94
        description: Please put '0001-01-01' and '2016-02-29'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put '0001-01-01' and '2016-02-29'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/date
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putDate
        description: Put complex types with date properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDateTime
    description: Get complex types with datetime properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/datetime
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_95
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDateTime
        description: Get complex types with datetime properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putDateTime
    description: Put complex types with datetime properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_95
        description: 'Please put ''0001-01-01T12:00:00-04:00'' and ''2015-05-18T11:38:00-08:00'''
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''0001-01-01T12:00:00-04:00'' and ''2015-05-18T11:38:00-08:00'''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/datetime
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putDateTime
        description: Put complex types with datetime properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDateTimeRfc1123
    description: Get complex types with datetimeRfc1123 properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/datetimerfc1123
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_96
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDateTimeRfc1123
        description: Get complex types with datetimeRfc1123 properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putDateTimeRfc1123
    description: Put complex types with datetimeRfc1123 properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_96
        description: 'Please put ''Mon, 01 Jan 0001 12:00:00 GMT'' and ''Mon, 18 May 2015 11:38:00 GMT'''
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put ''Mon, 01 Jan 0001 12:00:00 GMT'' and ''Mon, 18 May 2015 11:38:00 GMT'''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/datetimerfc1123
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putDateTimeRfc1123
        description: Put complex types with datetimeRfc1123 properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDuration
    description: Get complex types with duration properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/duration
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_97
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDuration
        description: Get complex types with duration properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putDuration
    description: Put complex types with duration properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_97
        description: Please put 'P123DT22H14M12.011S'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put 'P123DT22H14M12.011S'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/duration
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putDuration
        description: Put complex types with duration properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getByte
    description: Get complex types with byte properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/primitive/byte
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_98
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getByte
        description: Get complex types with byte properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putByte
    description: Put complex types with byte properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_98
        description: Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/primitive/byte
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putByte
        description: Put complex types with byte properties
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: primitive
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: array
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types with array property
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_99
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types with array property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types with array property
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_99
        description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/array/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types with array property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getEmpty
    description: Get complex types with array property which is empty
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/empty
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_99
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get complex types with array property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putEmpty
    description: Put complex types with array property which is empty
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_99
        description: Please put an empty array
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put an empty array
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/array/empty
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putEmpty
        description: Put complex types with array property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getNotProvided
    description: Get complex types with array property while server doesn't provide a response payload
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/array/notprovided
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_99
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get complex types with array property while server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: array
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: dictionary
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types with dictionary property
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types with dictionary property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types with dictionary property
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_100
        description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/dictionary/typed/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types with dictionary property
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getEmpty
    description: Get complex types with dictionary property which is empty
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/empty
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmpty
        description: Get complex types with dictionary property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putEmpty
    description: Put complex types with dictionary property which is empty
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_100
        description: Please put an empty dictionary
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: Please put an empty dictionary
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/dictionary/typed/empty
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putEmpty
        description: Put complex types with dictionary property which is empty
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getNull
    description: Get complex types with dictionary property which is null
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/null
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNull
        description: Get complex types with dictionary property which is null
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getNotProvided
    description: Get complex types with dictionary property while server doesn't provide a response payload
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/dictionary/typed/notprovided
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getNotProvided
        description: Get complex types with dictionary property while server doesn't provide a response payload
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: dictionary
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: inheritance
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types that extend others
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/inheritance/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_3
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that extend others
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types that extend others
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_3
        description: 'Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".'
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: 'Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".'
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/inheritance/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that extend others
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: inheritance
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: polymorphism
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types that are polymorphic
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_4
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that are polymorphic
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types that are polymorphic
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_4
        description: |-
          Please put a salmon that looks like this:
          {
                  'fishtype':'Salmon',
                  'location':'alaska',
                  'iswild':true,
                  'species':'king',
                  'length':1.0,
                  'siblings':[
                    {
                      'fishtype':'Shark',
                      'age':6,
                      'birthday': '2012-01-05T01:00:00Z',
                      'length':20.0,
                      'species':'predator',
                    },
                    {
                      'fishtype':'Sawshark',
                      'age':105,
                      'birthday': '1900-01-05T01:00:00Z',
                      'length':10.0,
                      'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                      'species':'dangerous',
                    },
                    {
                      'fishtype': 'goblin',
                      'age': 1,
                      'birthday': '2015-08-08T00:00:00Z',
                      'length': 30.0,
                      'species': 'scary',
                      'jawsize': 5
                    }
                  ]
                };
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please put a salmon that looks like this:
              {
                      'fishtype':'Salmon',
                      'location':'alaska',
                      'iswild':true,
                      'species':'king',
                      'length':1.0,
                      'siblings':[
                        {
                          'fishtype':'Shark',
                          'age':6,
                          'birthday': '2012-01-05T01:00:00Z',
                          'length':20.0,
                          'species':'predator',
                        },
                        {
                          'fishtype':'Sawshark',
                          'age':105,
                          'birthday': '1900-01-05T01:00:00Z',
                          'length':10.0,
                          'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                          'species':'dangerous',
                        },
                        {
                          'fishtype': 'goblin',
                          'age': 1,
                          'birthday': '2015-08-08T00:00:00Z',
                          'length': 30.0,
                          'species': 'scary',
                          'jawsize': 5
                        }
                      ]
                    };
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that are polymorphic
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getDotSyntax
    description: 'Get complex types that are polymorphic, JSON key contains a dot'
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/dotsyntax
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_14
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDotSyntax
        description: 'Get complex types that are polymorphic, JSON key contains a dot'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getComposedWithDiscriminator
    description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.'
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/composedWithDiscriminator
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_101
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComposedWithDiscriminator
        description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getComposedWithoutDiscriminator
    description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.'
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/composedWithoutDiscriminator
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_101
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComposedWithoutDiscriminator
        description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: getComplicated
    description: 'Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphism/complicated
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_6
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getComplicated
        description: 'Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putComplicated
    description: 'Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_6
        description: ''
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/complicated
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putComplicated
        description: 'Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putMissingDiscriminator
    description: 'Put complex types that are polymorphic, omitting the discriminator'
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_6
        description: ''
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/missingdiscriminator
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_6
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putMissingDiscriminator
        description: 'Put complex types that are polymorphic, omitting the discriminator'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValidMissingRequired
    description: 'Put complex types that are polymorphic, attempting to omit required ''birthday'' field - the request should not be allowed from the client'
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_4
        description: |-
          Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:
          {
              "fishtype": "sawshark",
              "species": "snaggle toothed",
              "length": 18.5,
              "age": 2,
              "birthday": "2013-06-01T01:00:00Z",
              "location": "alaska",
              "picture": base64(FF FF FF FF FE),
              "siblings": [
                  {
                      "fishtype": "shark",
                      "species": "predator",
                      "birthday": "2012-01-05T01:00:00Z",
                      "length": 20,
                      "age": 6
                  },
                  {
                      "fishtype": "sawshark",
                      "species": "dangerous",
                      "picture": base64(FF FF FF FF FE),
                      "length": 10,
                      "age": 105
                  }
              ]
          }
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:
              {
                  "fishtype": "sawshark",
                  "species": "snaggle toothed",
                  "length": 18.5,
                  "age": 2,
                  "birthday": "2013-06-01T01:00:00Z",
                  "location": "alaska",
                  "picture": base64(FF FF FF FF FE),
                  "siblings": [
                      {
                          "fishtype": "shark",
                          "species": "predator",
                          "birthday": "2012-01-05T01:00:00Z",
                          "length": 20,
                          "age": 6
                      },
                      {
                          "fishtype": "sawshark",
                          "species": "dangerous",
                          "picture": base64(FF FF FF FF FE),
                          "length": 10,
                          "age": 105
                      }
                  ]
              }
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphism/missingrequired/invalid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValidMissingRequired
        description: 'Put complex types that are polymorphic, attempting to omit required ''birthday'' field - the request should not be allowed from the client'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: polymorphism
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: polymorphicrecursive
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types that are polymorphic and have recursive references
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/polymorphicrecursive/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_4
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that are polymorphic and have recursive references
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types that are polymorphic and have recursive references
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_4
        description: |-
          Please put a salmon that looks like this:
          {
              "fishtype": "salmon",
              "species": "king",
              "length": 1,
              "age": 1,
              "location": "alaska",
              "iswild": true,
              "siblings": [
                  {
                      "fishtype": "shark",
                      "species": "predator",
                      "length": 20,
                      "age": 6,
                      "siblings": [
                          {
                              "fishtype": "salmon",
                              "species": "coho",
                              "length": 2,
                              "age": 2,
                              "location": "atlantic",
                              "iswild": true,
                              "siblings": [
                                  {
                                      "fishtype": "shark",
                                      "species": "predator",
                                      "length": 20,
                                      "age": 6
                                  },
                                  {
                                      "fishtype": "sawshark",
                                      "species": "dangerous",
                                      "length": 10,
                                      "age": 105
                                  }
                              ]
                          },
                          {
                              "fishtype": "sawshark",
                              "species": "dangerous",
                              "length": 10,
                              "age": 105
                          }
                      ]
                  },
                  {
                      "fishtype": "sawshark",
                      "species": "dangerous",
                      "length": 10,
                      "age": 105
                  }
              ]
          }
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: |-
              Please put a salmon that looks like this:
              {
                  "fishtype": "salmon",
                  "species": "king",
                  "length": 1,
                  "age": 1,
                  "location": "alaska",
                  "iswild": true,
                  "siblings": [
                      {
                          "fishtype": "shark",
                          "species": "predator",
                          "length": 20,
                          "age": 6,
                          "siblings": [
                              {
                                  "fishtype": "salmon",
                                  "species": "coho",
                                  "length": 2,
                                  "age": 2,
                                  "location": "atlantic",
                                  "iswild": true,
                                  "siblings": [
                                      {
                                          "fishtype": "shark",
                                          "species": "predator",
                                          "length": 20,
                                          "age": 6
                                      },
                                      {
                                          "fishtype": "sawshark",
                                          "species": "dangerous",
                                          "length": 10,
                                          "age": 105
                                      }
                                  ]
                              },
                              {
                                  "fishtype": "sawshark",
                                  "species": "dangerous",
                                  "length": 10,
                                  "age": 105
                              }
                          ]
                      },
                      {
                          "fishtype": "sawshark",
                          "species": "dangerous",
                          "length": 10,
                          "age": 105
                      }
                  ]
              }
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/polymorphicrecursive/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that are polymorphic and have recursive references
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: polymorphicrecursive
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: readonlyproperty
  operations:
  - !<!Operation> 
    $key: getValid
    description: Get complex types that have readonly properties
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/readonlyproperty/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_102
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getValid
        description: Get complex types that have readonly properties
    protocol: !<!Protocols> {}
  - !<!Operation> 
    $key: putValid
    description: Put complex types that have readonly properties
    request: !<!Request> 
      parameters:
      - !<!Parameter> 
        $key: complexBody
        schema: *ref_102
        description: ''
        implementation: Method
        extensions:
          x-ms-requestBody-name: complexBody
        language: !<!Languages> 
          default:
            name: complexBody
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: /complex/readonlyproperty/valid
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
          servers:
          - *ref_84
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: putValid
        description: Put complex types that have readonly properties
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: readonlyproperty
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: flattencomplex
  operations:
  - !<!Operation> 
    $key: getValid
    description: MISSING-OPERATION-DESCRIPTION
    request: !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /complex/flatten/valid
          method: get
          servers:
          - *ref_84
    responses:
    - !<!SchemaResponse> 
      schema: *ref_17
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: getValid
        description: MISSING-OPERATION-DESCRIPTION
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: flattencomplex
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> 
    servers:
    - *ref_84
