!<!CodeModel> 
schemas: !<!Schemas> 
  objects:
  - !<!ObjectSchema> &ref_13
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!NumberSchema> &ref_4
        type: integer
        precision: 32
        language: !<!Languages> 
          default:
            name: typeForstatus
            description: MISSING·SCHEMA-DESCRIPTION-INTEGER
        protocol: !<!Protocols> {}
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: MISSING·SCHEMA-DESCRIPTION-INTEGER
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_5
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        language: !<!Languages> 
          default:
            name: Error-message
            description: MISSING·SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: MISSING·SCHEMA-DESCRIPTION-STRING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Error
        description: MISSING·SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api100
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_0
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    children: !<!Relations> 
      all:
      - !<!ObjectSchema> &ref_1
        type: object
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        parents: !<!Relations> 
          all:
          - *ref_0
          immediate:
          - *ref_0
        properties:
        - !<!Property> 
          schema: !<!StringSchema> &ref_8
            type: string
            apiVersions:
            - !<!ApiVersion> 
              version: 1.0.0
            language: !<!Languages> 
              default:
                name: B-textStatusCode
                description: MISSING·SCHEMA-DESCRIPTION-STRING
            protocol: !<!Protocols> {}
          serializedName: textStatusCode
          language: !<!Languages> 
            default:
              name: textStatusCode
              description: MISSING·SCHEMA-DESCRIPTION-STRING
          protocol: !<!Protocols> {}
        language: !<!Languages> 
          default:
            name: B
            description: MISSING·SCHEMA-DESCRIPTION-OBJECTSCHEMA
            namespace: Api100
        protocol: !<!Protocols> {}
      immediate:
      - *ref_1
    properties:
    - !<!Property> 
      schema: !<!StringSchema> &ref_7
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        language: !<!Languages> 
          default:
            name: A-statusCode
            description: MISSING·SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      serializedName: statusCode
      language: !<!Languages> 
        default:
          name: statusCode
          description: MISSING·SCHEMA-DESCRIPTION-STRING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: MyException
        description: MISSING·SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api100
    protocol: !<!Protocols> {}
  - *ref_1
  - !<!ObjectSchema> &ref_78
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!StringSchema> &ref_9
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        language: !<!Languages> 
          default:
            name: C-httpCode
            description: MISSING·SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      serializedName: httpCode
      language: !<!Languages> 
        default:
          name: httpCode
          description: MISSING·SCHEMA-DESCRIPTION-STRING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: C
        description: MISSING·SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api100
    protocol: !<!Protocols> {}
  - !<!ObjectSchema> &ref_79
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!StringSchema> &ref_10
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        language: !<!Languages> 
          default:
            name: D-httpStatusCode
            description: MISSING·SCHEMA-DESCRIPTION-STRING
        protocol: !<!Protocols> {}
      serializedName: httpStatusCode
      language: !<!Languages> 
        default:
          name: httpStatusCode
          description: MISSING·SCHEMA-DESCRIPTION-STRING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: D
        description: MISSING·SCHEMA-DESCRIPTION-OBJECTSCHEMA
        namespace: Api100
    protocol: !<!Protocols> {}
  arrays:
  - !<!ArraySchema> &ref_33
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: !<!StringSchema> &ref_6
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: 1.0.0
      language: !<!Languages> 
        default:
          name: get-300-application-json-itemsItem
          description: MISSING·SCHEMA-DESCRIPTION-STRING
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfget-300-application-json-itemsItem
        description: 'A list of location options for the request [''/http/success/get/200'']'
    protocol: !<!Protocols> {}
  booleans:
  - !<!BooleanSchema> &ref_2
    type: boolean
    language: !<!Languages> 
      default:
        name: bool
        description: simple boolean
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_12
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant0
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_14
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant1
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_15
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant2
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_16
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant3
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_17
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant4
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_18
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant5
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_19
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant6
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_20
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant7
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_21
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant8
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_22
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant9
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_23
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant10
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_24
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant11
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_25
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant12
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_26
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant13
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_27
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant14
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_28
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant15
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_29
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant16
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_31
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant17
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_30
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant18
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_32
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/head/200
      language:
        default:
          name: ''
          description: ''
    valueType: !<!StringSchema> &ref_3
      type: string
      language: !<!Languages> 
        default:
          name: string
          description: simple string
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant19
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_34
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/get/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant20
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_35
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/head/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant21
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_36
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/get/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant22
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_37
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant23
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_38
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/failure/500
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant24
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_39
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/head/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant25
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_40
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/get/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant26
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_41
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant27
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_42
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/failure/500
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant28
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_43
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant29
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_44
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/get/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant30
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_45
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/head/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant31
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_46
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/get/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant32
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_47
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/options/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant33
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_54
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant34
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_55
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/put/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant35
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_48
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant36
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_49
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/patch/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant37
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_50
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant38
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_51
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/post/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant39
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_52
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant40
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_53
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: /http/success/delete/200
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant41
        description: MISSING·SCHEMA-DESCRIPTION-CHOICE
        header: Location
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_56
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant42
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_57
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant43
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_58
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant44
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_59
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant45
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_60
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant46
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_61
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant47
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_62
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant48
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_63
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant49
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_64
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant50
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_65
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant51
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_66
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant52
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_67
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant53
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_68
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant54
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_69
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant55
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_70
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant56
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_71
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant57
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_72
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant58
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_73
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant59
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_74
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant60
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_75
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant61
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_76
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant62
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_77
    type: constant
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    value: !<!ConstantValue> 
      value: true
      language:
        default:
          name: ''
          description: ''
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant63
        description: Simple boolean value true
    protocol: !<!Protocols> {}
  numbers:
  - *ref_4
  strings:
  - *ref_3
  - *ref_5
  - *ref_6
  - *ref_7
  - *ref_8
  - *ref_9
  - *ref_10
globalParameters:
- !<!Parameter> &ref_11
  schema: *ref_3
  clientDefaultValue: 'http://localhost:3000'
  implementation: Client
  required: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: path
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: httpInfrastructure
operationGroups:
- !<!OperationGroup> 
  $key: httpFailure
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/emptybody/error'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_12
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getEmptyError
        description: Get empty error form server
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/nomodel/error'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_14
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: getNoModelError
        description: Get empty error form server
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/nomodel/empty'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: getNoModelEmpty
        description: Get empty response from server
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpFailure
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: httpSuccess
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/success/200'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head200
        description: Return 200 status code if successful
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/success/200'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_16
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200
        description: Get 200 success
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/success/200'
          method: options
    responses:
    - !<!SchemaResponse> 
      schema: *ref_17
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options200
        description: Options 200 success
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_18
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/200'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put200
        description: Put boolean value true returning 200 success
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_19
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/200'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch200
        description: Patch true Boolean value in request returning 200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_20
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/200'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post200
        description: Post bollean value true in request that returns a 200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_21
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/200'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete200
        description: Delete simple boolean value true returns 200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_22
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/201'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '201'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put201
        description: Put true Boolean value in request returns 201
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_23
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/201'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '201'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post201
        description: Post true Boolean value in request returns 201 (Created)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_24
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/202'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put202
        description: Put true Boolean value in request returns 202 (Accepted)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_25
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/202'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch202
        description: Patch true Boolean value in request returns 202
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_26
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/202'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post202
        description: Post true Boolean value in request returns 202 (Accepted)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_27
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/202'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete202
        description: Delete true Boolean value in request returns 202 (accepted)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/success/204'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head204
        description: Return 204 status code if successful
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_28
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/204'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put204
        description: Put true Boolean value in request returns 204 (no content)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_29
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/204'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch204
        description: Patch true Boolean value in request returns 204 (no content)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_30
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/204'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete204
        description: Delete true Boolean value in request returns 204 (no content)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/success/404'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head404
        description: Return 404 status code
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpSuccess
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: HttpSuccess
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_31
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/success/204'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post204
        description: Post true Boolean value in request returns 204 (no content)
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: HttpSuccess
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: httpRedirects
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/300'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_32
            header: Location
          statusCodes:
          - '300'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head300
        description: Return 300 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/300'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_33
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_34
            header: Location
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '300'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get300
        description: Return 300 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/301'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_35
            header: Location
          statusCodes:
          - '301'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head301
        description: Return 301 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/301'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_36
            header: Location
          statusCodes:
          - '301'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get301
        description: Return 301 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_37
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/301'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_38
            header: Location
          statusCodes:
          - '301'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put301
        description: 'Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/302'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_39
            header: Location
          statusCodes:
          - '302'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head302
        description: Return 302 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/302'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_40
            header: Location
          statusCodes:
          - '302'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get302
        description: Return 302 status code and redirect to /http/success/200
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_41
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/302'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_42
            header: Location
          statusCodes:
          - '302'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch302
        description: 'Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_43
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/303'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_44
            header: Location
          statusCodes:
          - '303'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post303
        description: 'Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/307'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_45
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head307
        description: 'Redirect with 307, resulting in a 200 success'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/307'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_46
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get307
        description: 'Redirect get with 307, resulting in a 200 success'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/redirect/307'
          method: options
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_47
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options307
        description: 'options redirected with 307, resulting in a 200 after redirect'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_48
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/307'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_49
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch307
        description: 'Patch redirected with 307, resulting in a 200 after redirect'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_50
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/307'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_51
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post307
        description: 'Post redirected with 307, resulting in a 200 after redirect'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_52
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/307'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_53
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete307
        description: 'Delete redirected with 307, resulting in a 200 after redirect'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpRedirects
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: HttpRedirects
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_54
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/redirect/307'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          headers:
          - !<!HttpHeader> 
            schema: *ref_55
            header: Location
          statusCodes:
          - '307'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put307
        description: 'Put redirected with 307, resulting in a 200 after redirect'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: HttpRedirects
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: httpClientFailure
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/400'
          method: head
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/400'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/400'
          method: options
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_56
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/400'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_57
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/400'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_58
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/400'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_59
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/400'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete400
        description: Return 400 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/401'
          method: head
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head401
        description: Return 401 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/402'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get402
        description: Return 402 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/403'
          method: options
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options403
        description: Return 403 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/403'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get403
        description: Return 403 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_60
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/404'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put404
        description: Return 404 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_61
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/405'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch405
        description: Return 405 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_62
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/406'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post406
        description: Return 406 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_63
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/407'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete407
        description: Return 407 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_64
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/409'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put409
        description: Return 409 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/410'
          method: head
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head410
        description: Return 410 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/411'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get411
        description: Return 411 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/412'
          method: options
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options412
        description: Return 412 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/412'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get412
        description: Return 412 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_65
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/413'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put413
        description: Return 413 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_66
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/414'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch414
        description: Return 414 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_67
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/415'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post415
        description: Return 415 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/416'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get416
        description: Return 416 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_68
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/client/417'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete417
        description: Return 417 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/client/429'
          method: head
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head429
        description: Return 429 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpClientFailure
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: httpServerFailure
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/server/501'
          method: head
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head501
        description: Return 501 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/failure/server/501'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get501
        description: Return 501 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_69
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/server/505'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post505
        description: Return 505 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_70
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/failure/server/505'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete505
        description: Return 505 status code - should be represented in the client as an error
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpServerFailure
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: httpRetry
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/retry/408'
          method: head
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: head408
        description: 'Return 408 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_71
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/500'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put500
        description: 'Return 500 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_72
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/500'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch500
        description: 'Return 500 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/retry/502'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get502
        description: 'Return 502 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/retry/502'
          method: options
    responses:
    - !<!SchemaResponse> 
      schema: *ref_73
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: options502
        description: 'Return 502 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_74
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/503'
          method: post
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: post503
        description: 'Return 503 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_75
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/503'
          method: delete
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: delete503
        description: 'Return 503 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_76
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/504'
          method: put
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: put504
        description: 'Return 504 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_77
        implementation: Method
        required: true
        extensions:
          x-ms-requestBody-name: booleanValue
        language: !<!Languages> 
          default:
            name: booleanValue
            description: Simple boolean value true
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: json
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpWithBodyRequest> 
          path: '{$host}/http/retry/504'
          method: patch
          knownMediaType: json
          mediaTypes:
          - application/json
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    extensions:
      x-ms-requestBody-index: 0
    language: !<!Languages> 
      default:
        name: patch504
        description: 'Return 504 status code, then 200 after retry'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: httpRetry
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: multipleResponses
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/204/none/default/Error/response/200/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model204NoModelDefaultError200Valid
        description: 'Send a 200 response with valid payload: {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/204/none/default/Error/response/204/none'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model204NoModelDefaultError204Valid
        description: Send a 204 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/204/none/default/Error/response/201/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model204NoModelDefaultError201Invalid
        description: 'Send a 201 response with valid payload: {''statusCode'': ''201''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/204/none/default/Error/response/202/none'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model204NoModelDefaultError202None
        description: 'Send a 202 response with no payload:'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/204/none/default/Error/response/400/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model204NoModelDefaultError400Valid
        description: 'Send a 400 response with valid error payload: {''status'': 400, ''message'': ''client error''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/B/default/Error/response/200/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_1
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model201ModelDefaultError200Valid
        description: 'Send a 200 response with valid payload: {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/B/default/Error/response/201/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_1
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model201ModelDefaultError201Valid
        description: 'Send a 201 response with valid payload: {''statusCode'': ''201'', ''textStatusCode'': ''Created''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/B/default/Error/response/400/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_1
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200Model201ModelDefaultError400Valid
        description: 'Send a 400 response with valid payload: {''code'': ''400'', ''message'': ''client error''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_78
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    - !<!SchemaResponse> 
      schema: *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '404'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200ModelA201ModelC404ModelDDefaultError200Valid
        description: 'Send a 200 response with valid payload: {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_78
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    - !<!SchemaResponse> 
      schema: *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '404'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200ModelA201ModelC404ModelDDefaultError201Valid
        description: 'Send a 200 response with valid payload: {''httpCode'': ''201''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_78
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    - !<!SchemaResponse> 
      schema: *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '404'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200ModelA201ModelC404ModelDDefaultError404Valid
        description: 'Send a 200 response with valid payload: {''httpStatusCode'': ''404''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    - !<!SchemaResponse> 
      schema: *ref_78
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '201'
    - !<!SchemaResponse> 
      schema: *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '404'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get200ModelA201ModelC404ModelDDefaultError400Valid
        description: 'Send a 400 response with valid payload: {''code'': ''400'', ''message'': ''client error''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/Error/response/202/none'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultError202None
        description: Send a 202 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/Error/response/204/none'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultError204None
        description: Send a 204 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/Error/response/400/valid'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultError400Valid
        description: 'Send a 400 response with valid payload: {''code'': ''400'', ''message'': ''client error''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/none/response/202/invalid'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultNone202Invalid
        description: 'Send a 202 response with an unexpected payload {''property'': ''value''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/none/response/204/none'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultNone204None
        description: Send a 204 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/none/response/400/none'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultNone400None
        description: Send a 400 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/202/none/204/none/default/none/response/400/invalid'
          method: get
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '204'
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: get202None204NoneDefaultNone400Invalid
        description: 'Send a 400 response with an unexpected payload {''property'': ''value''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/A/response/200/valid'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultModelA200Valid
        description: 'Send a 200 response with valid payload: {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/A/response/200/none'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultModelA200None
        description: Send a 200 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/A/response/400/valid'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultModelA400Valid
        description: 'Send a 400 response with valid payload: {''statusCode'': ''400''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/A/response/400/none'
          method: get
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultModelA400None
        description: Send a 400 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/none/response/200/invalid'
          method: get
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultNone200Invalid
        description: 'Send a 200 response with invalid payload: {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/none/response/200/none'
          method: get
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultNone200None
        description: Send a 200 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/none/response/400/invalid'
          method: get
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultNone400Invalid
        description: 'Send a 400 response with valid payload: {''statusCode'': ''400''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/default/none/response/400/none'
          method: get
    exceptions:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: getDefaultNone400None
        description: Send a 400 response with no payload
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/200/none'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA200None
        description: 'Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/200/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA200Valid
        description: 'Send a 200 response with payload {''statusCode'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/200/invalid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA200Invalid
        description: 'Send a 200 response with invalid payload {''statusCodeInvalid'': ''200''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/400/none'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA400None
        description: Send a 400 response with no payload client should treat as an http error with no error model
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/400/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA400Valid
        description: 'Send a 200 response with payload {''statusCode'': ''400''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/400/invalid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA400Invalid
        description: 'Send a 200 response with invalid payload {''statusCodeInvalid'': ''400''}'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '{$host}/http/payloads/200/A/response/202/valid'
          method: get
    responses:
    - !<!SchemaResponse> 
      schema: *ref_0
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - '200'
    language: !<!Languages> 
      default:
        name: get200ModelA202Valid
        description: 'Send a 202 response with payload {''statusCode'': ''202''}'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: multipleResponses
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: ''
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
